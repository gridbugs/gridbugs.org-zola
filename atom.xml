<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>gridbugs</title>
    <link rel="self" type="application/atom+xml" href="https://gridbugs.github.io/gridbugs.org-zola/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-03-09T00:00:00+00:00</updated>
    <id>https://gridbugs.github.io/gridbugs.org-zola/atom.xml</id>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2024: Shops, Organs, Environment Effects, Boss</title>
        <published>2024-03-09T00:00:00+00:00</published>
        <updated>2024-03-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day7/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day7/</id>
        
        <summary type="html">&lt;p&gt;It’s the end of day 7 and my game is complete. I stayed up all night finishing
it and managed to complete all the features and content I intended and still
had a few hours for delirious  playtesting and bugfixing. This was by far the
largest scope for any 7DRL I’ve done in the past in terms of features as well
as content. This game has procedurally-generated music and sound effects, 10
types of enemy each with their own unique abilities (not including
shopkeepers), 14 items, an equipment system that allows dual-wielding
one-handed weapons, accounts for two-handed weapons, and allows each hand to
turn into claws that can’t hold weapons (e.g. you can have one claw and still
hold a one-handed weapon in the other hand), a system for determining the
player’s stats based on which organs they currently have, a system for a
applying mutations to organs if you absorb too much radiation, realtime
particle effects for smoke and explosions, a dynamic diminishing lighting
system and a secret ending (shhhh!). All the items have descriptions that render in the
UI, and there are many different types of message that can appear in the game’s
message log about events that happen in the game.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2024-day7&#x2F;screenshot1.png&quot; alt=&quot;Fighting the final boss on the bottom level of the city&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2024: Applying Items, Equipment</title>
        <published>2024-03-08T00:00:00+00:00</published>
        <updated>2024-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day6/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day6/</id>
        
        <summary type="html">&lt;p&gt;One day left! Tonight I implemented the equipment system. Weapons can be equipped
from the inventory to the hands. Some weapons require both hands while others
require only one. This is important as the “Claw” organ takes up a hand; you
can’t use a two-handed weapon if one of your hands is a claw (and you can’t use
a one-handed weapon if both of your hands are claws). Getting the logic and
error handling for equipping, unequipping and reloading weapons was trickier
than I expected. Especially since you can hold one pistol in each hand.&lt;&#x2F;p&gt;
&lt;p&gt;It’s possible to lose the game:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2024-day6&#x2F;screenshot1.png&quot; alt=&quot;death screen&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2024: Items</title>
        <published>2024-03-07T00:00:00+00:00</published>
        <updated>2024-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day5/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day5/</id>
        
        <summary type="html">&lt;p&gt;Tonight I added items. This includes the logic for picking up and dropping
objects, the UI control flow for displaying menus allowing the playing to drop
or use an item, and the item descriptions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2024-day5&#x2F;apply-item.png&quot; alt=&quot;Apply item menu&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The most complicated part is dealing with what happens when a user drops an item
while standing in a cell that already contains an item. The game engine does not
allow multiple items to exist at the same location, so when a collision would
occur the game searches for the nearest cell that doesn’t contain an item
(without traversing wall, etc) and puts the item there.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2024: Ranged Combat, Sound Effects, Message Log</title>
        <published>2024-03-06T00:00:00+00:00</published>
        <updated>2024-03-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day4/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day4/</id>
        
        <summary type="html">&lt;p&gt;The main focus of the day was the combat system. This involved setting up the
control flow so that when the player presses the fire button the UI lets them
aim, and then commits the fire action after the user confirms their target.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2024-day4&#x2F;aim.png&quot; alt=&quot;Gameplay demonstrating the aim UI&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2024: Title, Pathfinding, UI</title>
        <published>2024-03-05T00:00:00+00:00</published>
        <updated>2024-03-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day3/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day3/</id>
        
        <summary type="html">&lt;p&gt;I had a productive evening working on Electric Organ. Firstly I implemented an
animated main menu. I’m spending a lot of time up front working on aesthetics
as I find that if the game is pretty I’m more motivated to work on it later in
the week. Hopefully there’s enough time to implement all the mechanics I have
planned.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2024-day3&#x2F;menu.png&quot; alt=&quot;Main menu of the game. The foreground is a neon pink grid. The background is a city with a night sky behind it. There is a floating blue anatomical heart.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;See the animation along with the music on &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;y5wBxGF-kPM&quot;&gt;youtube&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2024: Animation, Music, Level Switching</title>
        <published>2024-03-04T00:00:00+00:00</published>
        <updated>2024-03-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day2/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day2/</id>
        
        <summary type="html">&lt;p&gt;I mostly spent the day working on dynamically-generated synthesizer music. There
are currently two songs - one for the main menu and another that plays during
levels. If I get time I will add more.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2024-day2&#x2F;screenshot.png&quot; alt=&quot;Ascii representation of a city with burning debris and a glowing green blob&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2024: Procgen, Graphics</title>
        <published>2024-03-03T00:00:00+00:00</published>
        <updated>2024-03-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day1/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2024-day1/">&lt;p&gt;It’s the end of day 1 of 7DRL2024. So far I’ve got a level generator for an
area of ruined city and basic graphics and lighting:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2024-day1&#x2F;screenshot.png&quot; alt=&quot;Screenshot showing a pink street with some burning debris&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While working on this I fixed a very longstanding bug in my &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;visible_area_detection&quot;&gt;lighting
system&lt;&#x2F;a&gt; that caused lights to
be too bright near their sources and to drop off with harsh steps rather than a
smooth gradient.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Component Pinouts and Notes</title>
        <published>2023-05-27T00:00:00+00:00</published>
        <updated>2023-05-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/component-pinouts-and-notes/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/component-pinouts-and-notes/</id>
        
        <summary type="html">&lt;p&gt;This page will list pinouts of some electronic components I commonly find myself
using, as well as some notes on using them that might not be obvious from
reading the datasheets.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Programming an Arduino the Hard Way</title>
        <published>2023-05-10T00:00:00+00:00</published>
        <updated>2023-05-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/programming-an-arduino-the-hard-way/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/programming-an-arduino-the-hard-way/</id>
        
        <summary type="html">&lt;p&gt;This is a guide I wrote mostly for my future self on how to set up an ergonomic
development environment for writing Arduino programs in c without any
Arduino-specific tools and using an Arduino to make a simple circuit with some
flashing LEDs. I’ll also discus options for powering the Arduino from a 12v
DC power supply.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;programming-an-arduino-the-hard-way&#x2F;arduino1.jpg&quot; alt=&quot;A breadboard holding an Arduino and several other components including a range of coloured LEDs, some of which are on.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Chargrid SDL Frontend</title>
        <published>2023-03-16T00:00:00+00:00</published>
        <updated>2023-03-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/chargrid-sdl-frontend/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/chargrid-sdl-frontend/</id>
        
        <summary type="html">&lt;p&gt;One problem with using the rust programming language for game development is the
notoriously slow compile times. For my recent 7DRL project
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;boat-journey&#x2F;&quot;&gt;Boat Journey&lt;&#x2F;a&gt; an incremental debug build takes about 6
seconds on my main development machine. This is frustratingly slow when making
many minor gameplay tweaks during playtesting.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2023: Mechanics, Content, Playtesting</title>
        <published>2023-03-12T00:00:00+00:00</published>
        <updated>2023-03-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day7/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day7/</id>
        
        <summary type="html">&lt;p&gt;The sun is peeking beneath my curtains and another 7DRL draws to a
close. Today I implemented the passenger mechanic, the trading mechanic,
collectable junk (the game’s currency), the combat system via abilities gained
from passengers, and added 7 different passengers you can pick up, each granting
you a unique ability.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2023-day7&#x2F;screenshot3.png&quot; alt=&quot;Screenshot of the finished game&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The game is playable and downloadable on itch.io at
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;boat-journey&quot;&gt;gridbugs.itch.io&#x2F;boat-journey&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;During playtesting I found some interesting emergent mechanics.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Boat Journey</title>
        <published>2023-03-12T00:00:00+00:00</published>
        <updated>2023-03-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/boat-journey/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/boat-journey/</id>
        
        <summary type="html">&lt;p&gt;Boat Journey is a turn-based game where you drive a boat through a
procedurally-generated landscape on a voyage along a river destined for the
ocean. Accept passengers to have them help you on your journey. Fight monsters,
collect junk, trade the junk for fuel, use the fuel to travel to the ocean.&lt;&#x2F;p&gt;
&lt;p&gt;You can play it in a web browser or download the game from &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;boat-journey&quot;&gt;gridbugs.itch.io&#x2F;boat-journey&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for the game is at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;boat-journey&quot;&gt;github.com&#x2F;gridbugs&#x2F;boat-journey&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;boat-journey&#x2F;cover.png&quot; alt=&quot;Text-based drawing of a boat at the end of a pier&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2023: Passengers, Art</title>
        <published>2023-03-11T00:00:00+00:00</published>
        <updated>2023-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day6/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day6/</id>
        
        <summary type="html">&lt;p&gt;Today I drew a bunch of background images for menus and the victory screen.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2023-day6&#x2F;title.png&quot; alt=&quot;Title screen showing main menu and a picture of a boat&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2023: UI, Night, Loss, Menus</title>
        <published>2023-03-10T00:00:00+00:00</published>
        <updated>2023-03-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day5/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day5/</id>
        
        <summary type="html">&lt;p&gt;I added stats like health, fuel, and daylight and display them in the game’s UI.
There’s a hinting system that displays hints based on what tiles are currently
on the screen.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2023-day5&#x2F;screenshot.png&quot; alt=&quot;Screenshot showing the game’s UI&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2023: Even More Procedural Generation!</title>
        <published>2023-03-09T00:00:00+00:00</published>
        <updated>2023-03-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day4/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day4/</id>
        
        <summary type="html">&lt;p&gt;Yet another day of working on procedural generation and I think I’m finally finished (the
procgen - not the game!). I added a generator for the starting town, a swamp
area, a flooded city area, and dungeons which are accessible from the city.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2023-day4&#x2F;town.png&quot; alt=&quot;Screenshot of the starting town&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2023: More Procedural Generation</title>
        <published>2023-03-08T00:00:00+00:00</published>
        <updated>2023-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day3/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day3/</id>
        
        <summary type="html">&lt;p&gt;Another day of mostly working on procedural generation. This game is by far the
most complex procgen project I’ve done. I’ve integrated the river generator into
the game engine and added a couple of pools along the river which I’ll populate
with settlements. There is also a small lake at the beginning of the river and
an ocean where the game ends.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2023-day3&#x2F;screenshot.png&quot; alt=&quot;Screenshot showing the boat in a river lined with rocks and trees&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2023: Procedural Generation</title>
        <published>2023-03-07T00:00:00+00:00</published>
        <updated>2023-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day2/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day2/</id>
        
        <summary type="html">&lt;p&gt;I spent this evening making a procedural generator for the shape of river and
choosing points along the river to place settlements. While I iterate on
procedural generation I’m working in a separate project to the main game so I
don’t need to deal with the complexities of integrating the generated levels
into the game while I’m also figuring out how level generation will work at all.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the debug output of the terrain generator so far showing the shape of the
river and the points where settlements will go.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2023-day2&#x2F;river.png&quot; alt=&quot;Debug image showing a procedurally-generated river&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2023: Bootstrapping, Boat Gameplay, Vision</title>
        <published>2023-03-06T00:00:00+00:00</published>
        <updated>2023-03-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2023-day1/</id>
        
        <summary type="html">&lt;p&gt;It’s the end of my first day of hacking on this year’s 7DRL.
My game will be called “Boat Journey”. It’s about driving a boat along a river
with the goal of reaching the ocean without running out of fuel or otherwise
becoming stranded, while picking up passengers who give you additional
abilities.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2023-day1&#x2F;screenshot.png&quot; alt=&quot;Screenshot of gameplay showing the player standing on a boat adjacent to a small island&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I’m intentionally going for a very minimal graphical style this year since the
past few years I’ve found I spend more time on fancy graphics than I would like,
and less time working on gameplay features.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Playing sound on the NES by directly setting its DMC output</title>
        <published>2023-01-21T00:00:00+00:00</published>
        <updated>2023-01-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/playing-sound-on-the-nes-by-directly-setting-its-dmc-output/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/playing-sound-on-the-nes-by-directly-setting-its-dmc-output/</id>
        
        <summary type="html">&lt;p&gt;Games on the Nintendo Entertainment System play audio using a handful of
tools within the device’s Audio Processing Unit (APU). The Delta Modulation
Channel (DMC) is the most expressive such tool as it can play arbitrary audio
data. Any sound you’ve heard come out of a NES other than variations on
square and triangle waves, and noise, was played using the DMC.&lt;&#x2F;p&gt;
&lt;p&gt;As its name suggests, the DMC can play &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Delta_modulation&quot;&gt;delta
modulated&lt;&#x2F;a&gt;
audio data, where a signal is represented by a sequence of relative changes
rather than a sequence of samples. The DMC also exposes a register that allows
audio samples to be written directly to its output, and that’s what this post
will be about.&lt;&#x2F;p&gt;
&lt;p&gt;This post is aimed at people looking to write programs to play
audio on the NES, or write an emulator for the NES’s APU. I found &lt;a href=&quot;https:&#x2F;&#x2F;www.nesdev.org&#x2F;wiki&#x2F;APU_DMC&quot;&gt;the DMC
documentation on the NesDev wiki&lt;&#x2F;a&gt; great for
low-level technical details but after reading it I felt I had little
intuition for what to expect when actually using the DMC, so I did some experiments which
I will share.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Demystifying Floating Points</title>
        <published>2023-01-15T00:00:00+00:00</published>
        <updated>2023-01-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/demystifying-floating-points/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/demystifying-floating-points/</id>
        
        <summary type="html">&lt;p&gt;Floating points are a way of representing numbers based on the idea that the
larger the magnitude of a number, the less we care about knowing its precise
value. If you’re anything like me (until recently) you use floating points regularly in your code
with a rough understanding of what to expect, but don’t understand the specifics
of what floats can and can’t represent. For example what’s the biggest floating
point, or the smallest positive floating point? Or how many times can you add
1.0 to a floating point before &lt;em&gt;something bad&lt;&#x2F;em&gt; happens, and what is that
&lt;em&gt;something bad&lt;&#x2F;em&gt;? How many floating point values are there between 0 and 1? What
about between 1 and 2?&lt;&#x2F;p&gt;
&lt;p&gt;The answer to these questions is, of course, “it depends”, so let’s talk about a
specific floating point standard, the “binary32” type defined in IEEE 754-2008.
This is the commonly-found single-precision floating point type, which
backs the &lt;code&gt;f32&lt;&#x2F;code&gt; type in rust, and usually backs the &lt;code&gt;float&lt;&#x2F;code&gt; type in c
(though of course technically this is left unspecified).
From now on this this post, I will refer to this type as simply “float”.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s what a float can represent:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;all powers of 2 from 2^-126 to 2^127&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;for each consecutive pair of powers of 2, there are 8,388,607 (that’s 2^23 - 1)
additional numbers, evenly spaced apart&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;zero&lt;&#x2F;li&gt;
&lt;li&gt;infinity&lt;&#x2F;li&gt;
&lt;li&gt;negative versions of all of the above&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The second point is the most important for understanding floating points. &lt;strong&gt;Each
successive pair of powers of 2 has 2^23 - 1 floating point values evenly spread
out between them.&lt;&#x2F;strong&gt;
There are 2^23 - 1 floats between 0.125 and 0.25, between 1 and 2, between 1024
and 2048, and between 8,388,608 (2^23) and 16,777,216 (2^24). As the numeric
range between consecutive powers of 2 increases, the number of floats between
them stays the same at 2^23 - 1; the floats just get more spread out.
This is the reason that values with lower
magnitudes can be more precisely represented with floating points.&lt;&#x2F;p&gt;
&lt;p&gt;Some implications of this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;in between 1 and 2, consecutive float values are 2^-23 apart from one
another&lt;&#x2F;li&gt;
&lt;li&gt;in between 2 and 4, consecutive float values are 2^-22 apart from another&lt;&#x2F;li&gt;
&lt;li&gt;in between 8,388,608 (2^23) and 16,777,216 (2^24), consecutive float values
are 1 apart from one another&lt;&#x2F;li&gt;
&lt;li&gt;for each power of 2, there are 8,388,608 (2^23) floats (1 for the power of 2,
and 2^23 - 1 between (exclusive) the power of 2 and the next power of 2)&lt;&#x2F;li&gt;
&lt;li&gt;the number of positive floats less than 1 is 126 x 2^23 = 1,056,964,608
&lt;ul&gt;
&lt;li&gt;there are 126 powers of 2 less than 1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;the number of positive floats greater than or equal to 1 is 128 x 2^23 = 1,073,741,824
&lt;ul&gt;
&lt;li&gt;there are 128 powers of 2 greater than or equal to 1 (including 2^0 = 1)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;all floats above 8,388,608 (2^23) are integers&lt;&#x2F;li&gt;
&lt;li&gt;all floats above 16,777,216 (2^24) are even&lt;&#x2F;li&gt;
&lt;li&gt;if you attempt to add 1 to 16,777,216 (2^24), the result will be 16,777,216 (2^24)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s how floats are encoded:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;demystifying-floating-points&#x2F;bits.svg&quot; alt=&quot;diagram: [ Sign (1 bit) | Exponent (8 bits) | Fraction (23 bits) ]&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>If you use a custom linker script, _start might not be your entry point</title>
        <published>2023-01-07T00:00:00+00:00</published>
        <updated>2023-01-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/if-you-use-a-custom-linker-script-_start-is-not-necessarily-the-entry-point/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/if-you-use-a-custom-linker-script-_start-is-not-necessarily-the-entry-point/</id>
        
        <summary type="html">&lt;p&gt;For most of my life I took for granted that programs begin executing at an
address denoted by the symbol &lt;code&gt;_start&lt;&#x2F;code&gt; (a single underscore, followed by the
word “start”). Turns out it’s not so simple.&lt;&#x2F;p&gt;
&lt;p&gt;Take this x86 assembly program that prints “Hello, World!” on Linux:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;_start
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;.text
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;message:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    .ascii &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Hello, World!\n&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;_start:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    # print the message
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;rax        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;syscall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;is write
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;rdi        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;# file descriptor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;is stdout
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;rsi  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;# pass address of messsage
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;rdx       &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;# pass length of message
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;syscall             &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;# perform write system &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;call
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    # exit
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;rax       &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;syscall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;60 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;is exit
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt;rdi        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;# pass exit status of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;syscall             &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;# perform exit system &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;call
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To compile and run this program (assume it’s in the file hello.s):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ gcc -c hello.s   # compile hello.s to object file hello.o
&lt;&#x2F;span&gt;&lt;span&gt;$ ld hello.o       # link hello.o to executable a.out
&lt;&#x2F;span&gt;&lt;span&gt;$ .&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span&gt;Hello, World!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Rain Forest</title>
        <published>2022-04-06T00:00:00+00:00</published>
        <updated>2022-04-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/rain-forest/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/rain-forest/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/rain-forest/">&lt;p&gt;Rain Forest is a roguelike game about spending a few days in a forest, in the
rain. Figure out what daily tasks you can perform to stay motivated to remain
in the forest, and try not to get too wet from the constant rain and rising
flood water. And above all, try to have a relaxing time.&lt;&#x2F;p&gt;
&lt;p&gt;This game is my 7th entry in the &lt;a href=&quot;https:&#x2F;&#x2F;itch.io&#x2F;jam&#x2F;7drl-challenge-2022&quot;&gt;7 Day Roguelike&lt;&#x2F;a&gt; game jam.&lt;&#x2F;p&gt;
&lt;p&gt;Play or download Rain Forest on &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;rain-forest&quot;&gt;its itch.io page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;rain-forest&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The game is open source, and the code is available on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;rainforest&quot;&gt;github&lt;&#x2F;a&gt;. It’s written in
rust, and the rendering, IO handling, UI and cross-platform support is handled
by my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid&quot;&gt;chargrid&lt;&#x2F;a&gt; library.&lt;&#x2F;p&gt;
&lt;p&gt;My main focus this year was on setting the mood of a rainy forest. I personally
find rain very calming, and tried to convey this calmness in the aesthetic of
Rain Forest. I’m quite satisfied with how the game turned out visually. I’m
planning to release a new version at some point that includes rain sounds (not
for consideration in the 7DRL of course) to complete the mood.&lt;&#x2F;p&gt;
&lt;p&gt;The gameplay is not particularly exciting; there’s no combat, and most of the
game is wandering around locating the various sites in the forest you can use
to gain motivation, and coming up with a daily routine that evolves as the
flood water rises and the rain gets heavier.&lt;&#x2F;p&gt;
&lt;p&gt;I had some ideas to make it more interactive, like digging ditches to redirect
the water, or stepping stones which can be moved into water to allow the player
to cross safely. These all made it into the game but there’s little incentive
for the player to actually use these features. I couldn’t work out a way to
make it necessary to engage in these mechanics while also being fun. I’m
not sure yet whether I’ll try to come up with gameplay changes to try to
make the game more fun. A part of me wants to strip away the features which
the game doesn’t need and just keep the minimal experience of walking
around in the forest in the rain.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2022: Complete</title>
        <published>2022-03-11T00:00:00+00:00</published>
        <updated>2022-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day7/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day7/</id>
        
        <summary type="html">&lt;p&gt;I added a win condition, implemented an equipment system, and did a bunch of play testing and balancing.
The game is finished and submitted to the &lt;a href=&quot;https:&#x2F;&#x2F;itch.io&#x2F;jam&#x2F;7drl-challenge-2022&quot;&gt;7drl&lt;&#x2F;a&gt; jam.
Play it in a browser, or download binaries from &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;rain-forest&quot;&gt;it’s itch.io page&lt;&#x2F;a&gt;.
The source code is on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;rainforest&quot;&gt;github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2022-day7&#x2F;2.png&quot; alt=&quot;2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2022: Interactions</title>
        <published>2022-03-10T00:00:00+00:00</published>
        <updated>2022-03-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day6/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day6/</id>
        
        <summary type="html">&lt;p&gt;I implemented most of the gameplay tonight. Gameplay consists of performing simple daily tasks
like making tea or placing a flower on an altar.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2022-day6&#x2F;1.png&quot; alt=&quot;1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2022: Motivation</title>
        <published>2022-03-09T00:00:00+00:00</published>
        <updated>2022-03-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day5/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day5/</id>
        
        <summary type="html">&lt;p&gt;Tonight I added the motivation system.
It’s a number which gradually ticks down, and if it gets to zero, you lose.
It ticks down faster when you’re uncomfortable, such as when you’re standing
in the rain or flood water.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2022-day5&#x2F;lake.png&quot; alt=&quot;lake.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Various things can restore your motivation, like sleeping, or visiting the lake.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2022: Time</title>
        <published>2022-03-08T00:00:00+00:00</published>
        <updated>2022-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day4/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day4/</id>
        
        <summary type="html">&lt;p&gt;Tonight I added the concept of time to the game.
Each day, as time progresses, the light and visibility systems respond to the passage of time,
simulating a sunrise and sunset, and making it dark at night.
There are three different rain modes (light, medium, heavy) and a randomized (ahem, “procedural”)
schedule that makes the rain get heavier over time (on average).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2022-day4&#x2F;flood.png&quot; alt=&quot;flood.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Also each day the flood level rises, and when you walk into the flood water the ‘@’ sign is partially submerged!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2022: Content</title>
        <published>2022-03-07T00:00:00+00:00</published>
        <updated>2022-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day3/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day3/</id>
        
        <summary type="html">&lt;p&gt;I spent the day adding assets. There’s a large lake one one side of the map with a pier.
Lamp posts, grass, and rocks are randomly placed around the forest.
There are patches of flowers and tea plants.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2022-day3&#x2F;1.png&quot; alt=&quot;1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In addition to looking nice, the grass serves the purpose of showing players where they
have been, as when you walk on the grass it gets trampled and its sprite changes.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2022: Atmosphere</title>
        <published>2022-03-06T00:00:00+00:00</published>
        <updated>2022-03-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day2/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day2/</id>
        
        <summary type="html">&lt;p&gt;The aspect I care most about this year is setting the mood of being inside
(or outside) on a rainy day in the woods. I spent most of today building
the rain and mist systems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2022-day2&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2022: Bootstrapping</title>
        <published>2022-03-05T00:00:00+00:00</published>
        <updated>2022-03-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2022-day1/</id>
        
        <summary type="html">&lt;p&gt;I spent most of the day bootstrapping the project.
Unlike the last few years, this year I’ve elected to start from scratch
rather than from an existing project, though I am copying code aggressively
from last years entry. The reason for doing this is to prevent needing to
prevent the technical debt from accumulating over multiple game jams hacking
on the same code base.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2022-day1&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Reverse-Engineering NES Tetris to add Hard Drop</title>
        <published>2021-03-21T00:00:00+00:00</published>
        <updated>2021-03-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/reverse-engineering-nes-tetris-to-add-hard-drop/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/reverse-engineering-nes-tetris-to-add-hard-drop/</id>
        
        <summary type="html">&lt;style&gt;
.nes-screenshot img {
    width: 512px;
    height: 480px;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}
.nes-screenshot-half img {
    width: 256px;
    height: 240px;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}
.nes-screenshot-quarter img {
    width: 128px;
    height: 120px;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}
&lt;&#x2F;style&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tetris_(NES_video_game)&quot;&gt;Tetris for the NES&lt;&#x2F;a&gt; is one of my favourite versions of Tetris.
My only complaint is that it lacks the ability to “hard drop” - instantly dropping the current piece and locking it into place.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s change that!&lt;&#x2F;p&gt;
&lt;p&gt;This post describes a modification I made to NES Tetris so that pressing the “up” button causes the current piece to hard drop,
and so that the game renders a “ghost piece” - a dotted outline of the current piece showing where it will land.&lt;&#x2F;p&gt;
&lt;div class=&quot;nes-screenshot&quot;&gt;
&lt;img src=&quot;screenshot1.png&quot;&gt;
&lt;&#x2F;div&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Orbital Decay</title>
        <published>2021-03-14T00:00:00+00:00</published>
        <updated>2021-03-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/orbital-decay/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/orbital-decay/</id>
        
        <summary type="html">&lt;p&gt;Orbital Decay is a traditional roguelike where you fight zombies on a space station.
It features destructible terrain, an air pressure system, and ranged combat.
Try not to shoot the hull, or you may find yourself sucked out into space!&lt;&#x2F;p&gt;
&lt;p&gt;In keeping with the traditions of the genre, graphics are made entirely of text,
though each tile is made of 3x3 characters.
There is a soundtrack of 6 songs, and about 10 different sound effects.
It’s playable in a browser, or a standalone graphical program. MacOS and Linux
users can also play the game in a terminal.&lt;&#x2F;p&gt;
&lt;p&gt;This is my entry in the 7 Day Roguelike 2021 game jam.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Play or download Orbital Decay on &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;orbital-decay&quot;&gt;its itch.io page&lt;&#x2F;a&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;orbital-decay&#x2F;screenshot1.png&quot; alt=&quot;screenshot1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2021: Gamepad Support, Audio, Maps, Help Screen, Play Testing</title>
        <published>2021-03-12T00:00:00+00:00</published>
        <updated>2021-03-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day7/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day7/</id>
        
        <summary type="html">&lt;p&gt;Firstly, here’s a screenshot of my first organic encounter with the final level of Orbital Decay:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2021-day7&#x2F;screenshot5.png&quot; alt=&quot;screenshot5.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2021: Enemies, Message Log, Space Gradient</title>
        <published>2021-03-11T00:00:00+00:00</published>
        <updated>2021-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day6/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day6/</id>
        
        <summary type="html">&lt;p&gt;Tonight I added a range of enemies, a message log, and made the space background a gradient.
The game is now feature-complete! I also added placeholder sound effects so when I get my hands on
real sound effects I can just slot them in.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2021-day6&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tomorrow I’ll be adding music and sound effects, play-testing, polishing, and fixing bugs.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2021: Weapons</title>
        <published>2021-03-10T00:00:00+00:00</published>
        <updated>2021-03-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day5/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day5/</id>
        
        <summary type="html">&lt;p&gt;Tonight I added weapons.
This screenshot shows the game’s arsenal.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2021-day5&#x2F;weapons.png&quot; alt=&quot;weapons.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Other than art, most of the work was setting up interactions like displaying a prompt before picking up a new weapon
that would replace the weapon in its destination weapon slot.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2021: Upgrades</title>
        <published>2021-03-09T00:00:00+00:00</published>
        <updated>2021-03-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day4/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day4/</id>
        
        <summary type="html">&lt;p&gt;Today I implemented the upgrade system.
You collect credits which can spent at an upgrade store.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2021-day4&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The store presents a menu from which one of three upgrades can be chosen.
There are three upgrade tracks with two levels each. Each level unlocks a new passive character upgrade.
The menu includes a description of the currently-selected upgrade.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2021: Depressurisation</title>
        <published>2021-03-08T00:00:00+00:00</published>
        <updated>2021-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day3/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day3/</id>
        
        <summary type="html">&lt;p&gt;I spent the day getting depressurisation  working.
When the hull gets pierced, the area of the station exposed to space is depressurised.
Any characters in that part of the station are pulled towards the breach for several turns
until the pressure is equalised.&lt;&#x2F;p&gt;
&lt;p&gt;The red warning light indicates that an area is being depressurised.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2021-day3&#x2F;1.png&quot; alt=&quot;1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once the pressure equalises, a blue warning light indicates that an area has no air.
The oxygen meter will start draining, and when it runs out the health meter will start draining.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2021: NPCs, Pathfinding, First Level, Final Level, Projectiles, Destructible Terrain</title>
        <published>2021-03-07T00:00:00+00:00</published>
        <updated>2021-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day2/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day2/</id>
        
        <summary type="html">&lt;p&gt;I got through a good amount of core gameplay mechanics today including NPCs, projectiles and destructible terrain.
I also spent some time focussing on flair, such as special first and last levels, animations in the game menu,
death screens, and smoke trails on bullets.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2021-day2&#x2F;intro.png&quot; alt=&quot;intro.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2021: Procedural Generation, Rendering, Pretty Menus, End Text</title>
        <published>2021-03-06T00:00:00+00:00</published>
        <updated>2021-03-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2021-day1/</id>
        
        <summary type="html">&lt;style&gt;
.orbital-decay {
    color: #D08C15;
    background-color: #00003B;
}
&lt;&#x2F;style&gt;
&lt;h2 id=&quot;orbital-decay&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#orbital-decay&quot; aria-label=&quot;Anchor link for: orbital-decay&quot;&gt;&lt;span class=&quot;orbital-decay&quot;&gt;Orbital Decay&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2021-day1&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p class=&quot;orbital-decay&quot;&gt;
You tape over the flashing warning light.
An overheating engine is the least of your worries.
Gotta focus.
&lt;&#x2F;p&gt;
&lt;p class=&quot;orbital-decay&quot;&gt;
The space station looms ahead.
It&#x27;s out of fuel, and about to come crashing down to Earth.
Unless you get to it first.
Special delivery: 1 hydrogen fuel cell with enough juice to kick the station out of this pesky atmosphere and back into space where it belongs.
&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2021: Preparation</title>
        <published>2021-03-04T00:00:00+00:00</published>
        <updated>2021-03-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2021-prep/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2021-prep/</id>
        
        <summary type="html">&lt;style&gt;
.orbital-decay {
    color: #D08C15;
    background-color: #00003B;
}
&lt;&#x2F;style&gt;
&lt;p&gt;This year’s 7DRL is days away.
Over the last few weeks I’ve dusted off my game engine and come up with a plan for the jam.
I’m going to revisit the idea behind my first 7DRL - &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;skeleton-crew&#x2F;&quot;&gt;Skeleton Crew&lt;&#x2F;a&gt; -
which was a game about fighting zombies in a space ship where shooting the hull caused the
ship to decompress.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>2020 Recap</title>
        <published>2020-12-25T00:00:00+00:00</published>
        <updated>2020-12-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/2020-recap/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/2020-recap/</id>
        
        <summary type="html">&lt;p&gt;This is a look at some of the things I’ve worked on in my spare time
during 2020. I started branching into new areas this year such as
hobby OS dev, writing, and music theory, as well as continuing to work
on roguelike games and supporting libraries.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>NTFS on FreeBSD</title>
        <published>2020-12-18T00:00:00+00:00</published>
        <updated>2020-12-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/ntfs-on-freebsd/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/ntfs-on-freebsd/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/ntfs-on-freebsd/">&lt;p&gt;Here’s a guide for myself on how to format and mount an NTFS partition on FreeBSD.
These examples were run on FreeBSD 12.2-RELEASE.&lt;&#x2F;p&gt;
&lt;p&gt;List disks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# geom disk list
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Geom name: da1
&lt;&#x2F;span&gt;&lt;span&gt;Providers:
&lt;&#x2F;span&gt;&lt;span&gt;1. Name: da1
&lt;&#x2F;span&gt;&lt;span&gt;   Mediasize: 1000204886016 (932G)
&lt;&#x2F;span&gt;&lt;span&gt;   Sectorsize: 512
&lt;&#x2F;span&gt;&lt;span&gt;   Stripesize: 4096
&lt;&#x2F;span&gt;&lt;span&gt;   Stripeoffset: 0
&lt;&#x2F;span&gt;&lt;span&gt;   Mode: r0w0e0
&lt;&#x2F;span&gt;&lt;span&gt;   descr: HGST TOURO S
&lt;&#x2F;span&gt;&lt;span&gt;   lunid: 5000000000000001
&lt;&#x2F;span&gt;&lt;span&gt;   ident: 21001410170002100173
&lt;&#x2F;span&gt;&lt;span&gt;   rotationrate: unknown
&lt;&#x2F;span&gt;&lt;span&gt;   fwsectors: 63
&lt;&#x2F;span&gt;&lt;span&gt;   fwheads: 255
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This guide will create a single giant NTFS partition taking up the entirety of da1.&lt;&#x2F;p&gt;
&lt;p&gt;Destroy the existing partition table if necessary:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# gpart destroy -F da1
&lt;&#x2F;span&gt;&lt;span&gt;da1 destroyed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create the (GPT) partition table if you don’t already have one.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# gpart create -s GPT da1
&lt;&#x2F;span&gt;&lt;span&gt;da1 created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create a partition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# gpart add -t ms-basic-data da1
&lt;&#x2F;span&gt;&lt;span&gt;da1p1 added
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A common mistake when trying to create an NTFS partition is to run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# gpart add -t ntfs da1
&lt;&#x2F;span&gt;&lt;span&gt;gpart: Invalid argument
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is one of the least helpful error messages I can imagine.
&lt;code&gt;gpart&lt;&#x2F;code&gt; doesn’t let you create a partition with type “ntfs” on a disk with a GPT
partition table. You’d need to make a MBR partition table instead.&lt;&#x2F;p&gt;
&lt;p&gt;Format the partition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# NTFS_USE_UBLIO=0 mkntfs -vf &#x2F;dev&#x2F;da1p1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;mkntfs&lt;&#x2F;code&gt; command is part of the &lt;code&gt;sysutils&#x2F;fusefs-ntfs&lt;&#x2F;code&gt; package.
&lt;code&gt;-v&lt;&#x2F;code&gt; prints verbose output, &lt;code&gt;-f&lt;&#x2F;code&gt; skips zeroing out the partition and elides some checks to speed up
creating the partition. Setting &lt;code&gt;NTFS_USE_UBLIO&lt;&#x2F;code&gt; is a workaround for a bug in &lt;code&gt;mkntfs&lt;&#x2F;code&gt; which causes
the command to hang.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bugs.freebsd.org&#x2F;bugzilla&#x2F;show_bug.cgi?id=206978&quot;&gt;bug report&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;513732&#x2F;why-is-mkntfs-taking-such-a-long-time&quot;&gt;stack exchange post about the problem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chieflemming.wordpress.com&#x2F;tag&#x2F;freebsd&#x2F;&quot;&gt;blog post where I first read about this issue and the workaround&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Mount the partition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# ntfs-3g &#x2F;dev&#x2F;da1p1 &#x2F;mnt&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;ntfs-3g&lt;&#x2F;code&gt; program is also part of the &lt;code&gt;sysutils&#x2F;fusefs-ntfs&lt;&#x2F;code&gt; package.&lt;&#x2F;p&gt;
&lt;p&gt;Should this fail with the error &lt;code&gt;fuse: failed to open fuse device: No such file or directory&lt;&#x2F;code&gt;,
the &lt;code&gt;fuse&lt;&#x2F;code&gt; kernel module is likely not loaded. Load it with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# kldload fuse
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set it to load on boot by adding the following to &#x2F;boot&#x2F;loader.conf:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;fuse_load=&amp;quot;YES&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To unmount the partition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# umount &#x2F;mnt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>NTFS on FreeBSD</title>
        <published>2020-12-18T00:00:00+00:00</published>
        <updated>2020-12-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/ntfs-on-freebsd/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/ntfs-on-freebsd/</id>
        
        <summary type="html">&lt;p&gt;Here’s a guide for myself on how to format and mount an NTFS partition on FreeBSD.
These examples were run on FreeBSD 12.2-RELEASE.&lt;&#x2F;p&gt;
&lt;p&gt;List disks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# geom disk list
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Geom name: da1
&lt;&#x2F;span&gt;&lt;span&gt;Providers:
&lt;&#x2F;span&gt;&lt;span&gt;1. Name: da1
&lt;&#x2F;span&gt;&lt;span&gt;   Mediasize: 1000204886016 (932G)
&lt;&#x2F;span&gt;&lt;span&gt;   Sectorsize: 512
&lt;&#x2F;span&gt;&lt;span&gt;   Stripesize: 4096
&lt;&#x2F;span&gt;&lt;span&gt;   Stripeoffset: 0
&lt;&#x2F;span&gt;&lt;span&gt;   Mode: r0w0e0
&lt;&#x2F;span&gt;&lt;span&gt;   descr: HGST TOURO S
&lt;&#x2F;span&gt;&lt;span&gt;   lunid: 5000000000000001
&lt;&#x2F;span&gt;&lt;span&gt;   ident: 21001410170002100173
&lt;&#x2F;span&gt;&lt;span&gt;   rotationrate: unknown
&lt;&#x2F;span&gt;&lt;span&gt;   fwsectors: 63
&lt;&#x2F;span&gt;&lt;span&gt;   fwheads: 255
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>dmenu_histogram</title>
        <published>2020-11-29T00:00:00+00:00</published>
        <updated>2020-11-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/dmenu-histogram/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/dmenu-histogram/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/dmenu-histogram/">&lt;p&gt;One of the programs I’ve made that most directly benefited my life is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;bin&#x2F;dmenu_histogram&quot;&gt;this little bash script in my dotfiles repo&lt;&#x2F;a&gt;
which runs the application launcher &lt;a href=&quot;https:&#x2F;&#x2F;tools.suckless.org&#x2F;dmenu&#x2F;&quot;&gt;dmenu&lt;&#x2F;a&gt; showing the most-frequently-used
programs first.&lt;&#x2F;p&gt;
&lt;p&gt;The typical way to run dmenu is to pipe the output of &lt;code&gt;dmenu_path&lt;&#x2F;code&gt; into &lt;code&gt;dmenu&lt;&#x2F;code&gt;.
Both commands come in the &lt;code&gt;dmenu&lt;&#x2F;code&gt; package. The former simply prints a list of all programs
in the user’s path:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ dmenu_path
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;2to3-2.7
&lt;&#x2F;span&gt;&lt;span&gt;2to3-3.7
&lt;&#x2F;span&gt;&lt;span&gt;aafire
&lt;&#x2F;span&gt;&lt;span&gt;aainfo
&lt;&#x2F;span&gt;&lt;span&gt;aalib-config
&lt;&#x2F;span&gt;&lt;span&gt;aasavefont
&lt;&#x2F;span&gt;&lt;span&gt;aatest
&lt;&#x2F;span&gt;&lt;span&gt;ac
&lt;&#x2F;span&gt;&lt;span&gt;accton
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;dmenu&lt;&#x2F;code&gt; program reads a list of strings from its standard input and presents a graphical list.
The user selects a single item from the list, and dmenu prints the selection to its standard output.&lt;&#x2F;p&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ echo -e &amp;#39;hello\nworld&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;hello
&lt;&#x2F;span&gt;&lt;span&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;$ echo -e &amp;#39;hello\nworld&amp;#39; | dmenu
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second command displays this GUI at the top of the screen:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;dmenu-histogram&#x2F;dmenu-hello-world.png&quot; alt=&quot;dmenu-hello-world.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Use the arrow keys to change the selection or start typing a name to narrow down the list:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;dmenu-histogram&#x2F;dmenu-world.png&quot; alt=&quot;dmenu-world.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hit enter and dmenu exits after printing &lt;code&gt;world&lt;&#x2F;code&gt; to its standard output.&lt;&#x2F;p&gt;
&lt;p&gt;To use it as a program launcher, the dmenu package comes with a third program - a shell script
&lt;code&gt;dmenu_run&lt;&#x2F;code&gt; which combines the above two programs. Here’s its source:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;#!&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;dmenu_path &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;dmenu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;${SHELL&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;:-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&#x2F;bin&#x2F;sh&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an aside, dmenu is a perfect example of a tool which does one thing well, and adds value
to an existing set of tools by being easily composable.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the list I see when I run it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;dmenu-histogram&#x2F;dmenu.png&quot; alt=&quot;dmenu.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And after pressing “t”:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;dmenu-histogram&#x2F;dmenu-t.png&quot; alt=&quot;dmenu-t.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Menu items are shown in the order they appeared on &lt;code&gt;dmenu&lt;&#x2F;code&gt;’s stdin, and &lt;code&gt;dmenu_path&lt;&#x2F;code&gt; prints
all program’s in the user’s &lt;code&gt;$PATH&lt;&#x2F;code&gt; in alphabetical order. The problem with this is there
are only a tiny handful of graphical programs that I ever want to launch with dmenu, and
it’s unlikely that they will appear early in the alphabetically-listed program names.
&lt;code&gt;dmenu_histogram&lt;&#x2F;code&gt; addresses this by maintaining a histogram of launched programs and placing
these programs in order of frequency on &lt;code&gt;dmenu&lt;&#x2F;code&gt;’s stdin before the output of &lt;code&gt;dmenu_path&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Running the &lt;code&gt;dmenu_histogram&lt;&#x2F;code&gt; script:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;dmenu-histogram&#x2F;hist.png&quot; alt=&quot;hist.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;…shows a list of programs I commonly use. If I press “t”…&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;dmenu-histogram&#x2F;hist-t.png&quot; alt=&quot;hist-t.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;…the list narrows to just the programs starting with “t”, and still shows the most
frequent programs first.&lt;&#x2F;p&gt;
&lt;p&gt;To be perfectly clear, I did not develop dmenu. I wrote myself a bash script that invokes
&lt;code&gt;dmenu&lt;&#x2F;code&gt; on the output of &lt;code&gt;dmenu_path&lt;&#x2F;code&gt; augmented with a list of common programs ordered by
frequency of use, and &lt;em&gt;updates&lt;&#x2F;em&gt; a histogram counting the number of times each program is
launched to build a more accurate list for the next invocation.&lt;&#x2F;p&gt;
&lt;p&gt;The histogram it maintains looks like this on my system at the time of writing:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;8 xterm
&lt;&#x2F;span&gt;&lt;span&gt;1 xfontsel
&lt;&#x2F;span&gt;&lt;span&gt;2 uxterm
&lt;&#x2F;span&gt;&lt;span&gt;6 st
&lt;&#x2F;span&gt;&lt;span&gt;1 vimdot
&lt;&#x2F;span&gt;&lt;span&gt;7 gimp
&lt;&#x2F;span&gt;&lt;span&gt;15 wifimgr
&lt;&#x2F;span&gt;&lt;span&gt;11 thunderbird
&lt;&#x2F;span&gt;&lt;span&gt;4 pavucontrol
&lt;&#x2F;span&gt;&lt;span&gt;1 mtpaint
&lt;&#x2F;span&gt;&lt;span&gt;2 surf
&lt;&#x2F;span&gt;&lt;span&gt;195 xlock
&lt;&#x2F;span&gt;&lt;span&gt;2 xeyes
&lt;&#x2F;span&gt;&lt;span&gt;5 virtualbox
&lt;&#x2F;span&gt;&lt;span&gt;1 dmenu
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>dmenu_histogram</title>
        <published>2020-11-29T00:00:00+00:00</published>
        <updated>2020-11-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/dmenu_histogram/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/dmenu_histogram/</id>
        
        <summary type="html">&lt;p&gt;Of all the programs I’ve written, perhaps the one that has most directly benefited me is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;bin&#x2F;dmenu_histogram&quot;&gt;this little bash script in my dotfiles repo&lt;&#x2F;a&gt;
which runs the application launcher &lt;a href=&quot;https:&#x2F;&#x2F;tools.suckless.org&#x2F;dmenu&#x2F;&quot;&gt;dmenu&lt;&#x2F;a&gt; showing the most-frequently-used
programs first.&lt;&#x2F;p&gt;
&lt;p&gt;The typical way to run dmenu is to pipe the output of &lt;code&gt;dmenu_path&lt;&#x2F;code&gt; into &lt;code&gt;dmenu&lt;&#x2F;code&gt;.
Both commands come in the &lt;code&gt;dmenu&lt;&#x2F;code&gt; package. The former simply prints a list of all programs
in the user’s path:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ dmenu_path
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;2to3-2.7
&lt;&#x2F;span&gt;&lt;span&gt;2to3-3.7
&lt;&#x2F;span&gt;&lt;span&gt;aafire
&lt;&#x2F;span&gt;&lt;span&gt;aainfo
&lt;&#x2F;span&gt;&lt;span&gt;aalib-config
&lt;&#x2F;span&gt;&lt;span&gt;aasavefont
&lt;&#x2F;span&gt;&lt;span&gt;aatest
&lt;&#x2F;span&gt;&lt;span&gt;ac
&lt;&#x2F;span&gt;&lt;span&gt;accton
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Stopping daily posts</title>
        <published>2020-11-15T00:00:00+00:00</published>
        <updated>2020-11-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/stopping-daily-posts/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/stopping-daily-posts/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/stopping-daily-posts/">&lt;p&gt;After just over 100 daily posts, I’m going to relax the constraint that they be written each day.
I’m struggling to come up with interesting content, and writing daily posts is starting to feel like a chore.
I’ll keep this area of the site as a place where I can write relatively low-effort, short posts, but I’ll
only write them on days when I have something compelling to say.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Disk image tool progress - Counter-intuitive header population</title>
        <published>2020-11-13T00:00:00+00:00</published>
        <updated>2020-11-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress-counter-intuitive-header-population/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress-counter-intuitive-header-population/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress-counter-intuitive-header-population/">&lt;p&gt;While preparing to implement a disk image creation tool I built a few tools for
reading files from inside disk images. In the process I wrote some code for
parsing the various disk and partition header structures present in a disk
image.  Now that I’m actually generating images of my own, I need to populate
headers in the images.&lt;&#x2F;p&gt;
&lt;p&gt;The most obvious way to do this is to populate the fields of the same header
type that I previously parsed from disk images when reading files from them,
and then have some additional code for serializing the header type into the
disk image in whatever format the GPT or FAT protocols expect.&lt;&#x2F;p&gt;
&lt;p&gt;After going a little way down this path I stopped and tried an alternative,
where I write header information directly in its serialized form to a buffer,
and then parse it back out with my existing header parsers, purely as a sanity
check. There are two benefits to this approach.  The first is the sanity check&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve tested the header parsing code on real disk images and have some degree
of confidence that it works. In addition to parsing values from disk headers,
it also performs some validation, such as checking checksums.  Writing the disk
header directly and parsing it back means I can check that the header I’m
writing to disk is valid.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The second benefit is less code. Were I to populate a struct with header
fields, and then serialize it, I’d have 3 places where each field is listed out
in the code - parsing headers, populating header structs, and serializing
header structs. As it is now, there are only two - parsing headers, and writing
header fields.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Disk image tool progress - directory hierarchies</title>
        <published>2020-11-12T00:00:00+00:00</published>
        <updated>2020-11-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress-directory-hierarchies/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress-directory-hierarchies/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress-directory-hierarchies/">&lt;p&gt;I finally mustered to motivation to get some work done on my
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;gpt-fat-disk-image&quot;&gt;disk image creation tool&lt;&#x2F;a&gt;.
Tonight I prepared for writing the FAT partition to the image by constructing
a representation of the directory hierarchy implied by the list of paths
to all files that will be created in the disk image.
Currently the hierarchy is only used to determine the partition size.
The next step will be to also use it to populate the FAT table and clusters
that make up a FAT partition.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Learning about kqueue</title>
        <published>2020-11-11T00:00:00+00:00</published>
        <updated>2020-11-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/learning-about-kqueue/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/learning-about-kqueue/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/learning-about-kqueue/">&lt;p&gt;I’m trying to fix a bug in the &lt;code&gt;rb-kqueue&lt;&#x2F;code&gt; gem which occasionally
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;building-this-site-sometimes-crashes-ruby&#x2F;&quot;&gt;crashes the ruby interpreter&lt;&#x2F;a&gt;
when I’m running a file-watching server while working on this site.&lt;&#x2F;p&gt;
&lt;p&gt;The bug seems to be in the &lt;code&gt;rb-kqueue&lt;&#x2F;code&gt; gem, which is a thin wrapper around *BSD’s kqueue
API, which is an interface for subscribing to notifications when a file changes, similar
to Linux’s inotify.&lt;&#x2F;p&gt;
&lt;p&gt;To understand what’s wrong with &lt;code&gt;rb-kqueue&lt;&#x2F;code&gt;, I’m going to start by learning how to make
the most basic thing that does what &lt;code&gt;rb-kqueue&lt;&#x2F;code&gt; does. To start, forget ruby, and makd something
simple in c.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how to get started with kqueue:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ man kqueue
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…and scroll down to the “EXAMPLES” section.
Copy paste the example code into a c file, compile it, and run it.
It will watch the file specified as an argument and print a message when the watched file changes.&lt;&#x2F;p&gt;
&lt;p&gt;Then read the manual page and modify the code to learn more.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Configuring Feh</title>
        <published>2020-11-10T00:00:00+00:00</published>
        <updated>2020-11-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/configuring-feh/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/configuring-feh/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/configuring-feh/">&lt;p&gt;In lieu of a file listing configuration settings, the image viewer &lt;code&gt;feh&lt;&#x2F;code&gt; does something
I’ve never seen anywhere else. The config file lists “themes”, which are named sets of arguments.
You can list as many themes as you like, giving each a unique name.&lt;&#x2F;p&gt;
&lt;p&gt;My list:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# ~&#x2F;.config&#x2F;feh&#x2F;themes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fehp --keep-zoom-vp --force-aliasing --draw-filename --draw-tinted
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I only have one theme named “fehp” (the p stands for “pixelated”).
To use the theme, make a symlink to the &lt;code&gt;feh&lt;&#x2F;code&gt; executable, and name the symlink after the theme:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ ln -s $(which feh) ~&#x2F;bin&#x2F;fehp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now I can run &lt;code&gt;fehp&lt;&#x2F;code&gt; and it will be equivalent to running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ feh --keep-zoom-vp --force-aliasing --draw-filename --draw-tinted
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Chargrid HiDPI Scaling Fix</title>
        <published>2020-11-09T00:00:00+00:00</published>
        <updated>2020-11-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/chargrid-hidpi-scaling-fix/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/chargrid-hidpi-scaling-fix/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/chargrid-hidpi-scaling-fix/">&lt;p&gt;I spent some time over the weekend trying to reproduce a bug where
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;winit-makes-windows-the-wrong-size-in-some-cases-i-think&#x2F;&quot;&gt;winit windows end up the wrong size due to rapid scaling factor changes&lt;&#x2F;a&gt;.
Ultimately I couldn’t reproduce the problem (but I’m keeping an eye out) but what I did learn is that when the
mouse cursor is on the hidpi monitor (I have two - one hidpi and one normal-dpi), and a windows opens on the non-hidip
monitor, it starts with the hidip scaling factor, but soon after starting its scaling factor changes back to 1.
I found that &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;chargrid_graphical&quot;&gt;chargrid_graphical&lt;&#x2F;a&gt; wasn’t handling the scaling factor change
(only the accompanying window size change), which caused graphics to appear blurry after the resize. It’s now fixed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ruby shell with custom .inputrc</title>
        <published>2020-11-08T00:00:00+00:00</published>
        <updated>2020-11-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/ruby-shell-with-custom-inputrc/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/ruby-shell-with-custom-inputrc/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/ruby-shell-with-custom-inputrc/">&lt;p&gt;The program &lt;code&gt;irb&lt;&#x2F;code&gt; is an interactive ruby shell.
When I run it, the VI navigation keys “HJKL” move the cursor rather than inserting the characters “HJKL”.
This looks related to my custom ~&#x2F;.inputrc file which specifies readline use the VI keybindings, instead of
the default emacs keybindings:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# ~&#x2F;.inputrc
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;set editing-mode vi
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In certain interactive shells (those that use readline), such as bash and the python shell, this adds
modal line editing and VI key navigation that I’m accustomed to in Vim.
But it seems that &lt;code&gt;irb&lt;&#x2F;code&gt; doesn’t work correctly with VI editing mode.
It’s trying to do &lt;em&gt;something&lt;&#x2F;em&gt;. Switching from insert to normal mode works, and I can use additional
VI navigation commands such as work navigation while in normal mode. But “HJKL” navigation doesn’t
turn off in insert mode, so I can’t type “HJKL”.&lt;&#x2F;p&gt;
&lt;p&gt;The workaround is to tell &lt;code&gt;irb&lt;&#x2F;code&gt; to ignore ~&#x2F;.inputrc when launching it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ INPUTRC=&#x2F;dev&#x2F;null irb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tmux runs a login shell by default</title>
        <published>2020-11-07T00:00:00+00:00</published>
        <updated>2020-11-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/tmux-runs-a-login-shell-by-default/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/tmux-runs-a-login-shell-by-default/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/tmux-runs-a-login-shell-by-default/">&lt;p&gt;Unless configured otherwise, shells running in tmux panes are login shells.
This means that if you start tmux from a shell whose environment already reflects
your (say) .profile script, you’ll end up sourcing it a second time leading to
problems highlighted &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;make-sure-your-terminal-emulator-runs-in-the-expected-environment&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To have tmux run a non-login shell, add this to .tmux.conf:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;set -g default-command &amp;quot;${SHELL}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building this site sometimes crashes ruby</title>
        <published>2020-11-06T00:00:00+00:00</published>
        <updated>2020-11-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/building-this-site-sometimes-crashes-ruby/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/building-this-site-sometimes-crashes-ruby/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/building-this-site-sometimes-crashes-ruby/">&lt;p&gt;This is a jekyll site, which means that it’s composed of a bunch of markdown files,
and I run a ruby script called “jekyll” which turns it into a bunch of html files
which I then upload to my web server. When working on a post, I usually run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;bundle exec jekyll serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…which watches the markdown files, regenerating the
html each time a file changes, and serves the result on a local we server.
When I first switched to FreeBSD, the file-watching mechanism wasn’t working properly,
and I would see:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;          NoMethodError:
&lt;&#x2F;span&gt;&lt;span&gt;            undefined method `callback!&amp;#39; for nil:NilClass
&lt;&#x2F;span&gt;&lt;span&gt;          # .&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;2.6&#x2F;gems&#x2F;rb-kqueue-0.2.5&#x2F;lib&#x2F;rb-kqueue&#x2F;event.rb:80:in `callback!&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;          # .&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;2.6&#x2F;gems&#x2F;rb-kqueue-0.2.5&#x2F;lib&#x2F;rb-kqueue&#x2F;queue.rb:337:in `block in process&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;          # .&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;2.6&#x2F;gems&#x2F;rb-kqueue-0.2.5&#x2F;lib&#x2F;rb-kqueue&#x2F;queue.rb:337:in `each&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;          # .&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;2.6&#x2F;gems&#x2F;rb-kqueue-0.2.5&#x2F;lib&#x2F;rb-kqueue&#x2F;queue.rb:337:in `process&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;          # .&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;2.6&#x2F;gems&#x2F;rb-kqueue-0.2.5&#x2F;lib&#x2F;rb-kqueue&#x2F;queue.rb:316:in `run&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…and the site wouldn’t rebuild when a file changed. This is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;guard&#x2F;listen&#x2F;issues&#x2F;475&quot;&gt;known issue&lt;&#x2F;a&gt;,
and I could work around it by polling instead of using FreeBSD’s kqueue mechanism to watch files, but
the latency was quite high. I eventually &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mat813&#x2F;rb-kqueue&#x2F;pull&#x2F;12&quot;&gt;fixed&lt;&#x2F;a&gt; a bug in the
rb-kqueue gem which seemed to solve the problem. It’s not merged yet but I can include a reference to my
fork of the library in this site’s Gemfile until it gets merged.&lt;&#x2F;p&gt;
&lt;p&gt;Lately however, I’ve started seeing this crash when changing a file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;usr&#x2F;home&#x2F;steve&#x2F;.rvm&#x2F;gems&#x2F;ruby-2.7.2&#x2F;bundler&#x2F;gems&#x2F;rb-kqueue-144ee7bb7963&#x2F;lib&#x2F;rb-kqueue&#x2F;native&#x2F;flags.rb:145: [BUG] Segmentation fault at 0x0000000100210014
&lt;&#x2F;span&gt;&lt;span&gt;ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-freebsd12.2]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…which is clearly related to rb-kqueue. I’m not sure if this was introduced by my change.
Need to dig deeper!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How I start X</title>
        <published>2020-11-05T00:00:00+00:00</published>
        <updated>2020-11-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/how-i-start-x/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/how-i-start-x/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/how-i-start-x/">&lt;p&gt;On FreeBSD and Linux I start X with &lt;code&gt;startx&lt;&#x2F;code&gt;. I don’t use a display manager, instead electing to
login directly to a tty and start X explicitly. Over the years I’ve tried out a bunch of display
managers. I used SLIM while it existed, and LXDM after that, but at some point I decided that
the complexity of configuring a display manager to start X just the way I like meant more work
than typing &lt;code&gt;startx&lt;&#x2F;code&gt; the first time I login to my computer. I maintain a .xinitrc file which
performs some setup and starts my window manager of choice - dwm.&lt;&#x2F;p&gt;
&lt;p&gt;On OpenBSD, which I occasionally experiment with, there is no &lt;code&gt;startx&lt;&#x2F;code&gt; command because something
something security. OpenBSD comes with a display manager called “xenodm” (if you select it
during installation), which presents you with a graphical login form, then starts X by running
a file called “.xsession” in your home directory. My .session looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;. ~&#x2F;.profile
&lt;&#x2F;span&gt;&lt;span&gt;. ~&#x2F;.xinitrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It sources .profile to set environment variables for the window manager, then sources .xinitrc
to start the window manager as per my carefully crafted configuration. Simple!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Make sure your terminal emulator runs in the expected environment</title>
        <published>2020-11-04T00:00:00+00:00</published>
        <updated>2020-11-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/make-sure-your-terminal-emulator-runs-in-the-expected-environment/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/make-sure-your-terminal-emulator-runs-in-the-expected-environment/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/make-sure-your-terminal-emulator-runs-in-the-expected-environment/">&lt;p&gt;Unix processes run in an environment consisting of string values assigned to named environment variables.
Some processes such as a shell or window manager are responsible for launching additional processes.
By convention, new processes inherit the environment variables of the process that created them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;$PATH&lt;&#x2F;code&gt; is a particularly interesting variable because it’s usually updated by concatenating a list of directories
with the original value of &lt;code&gt;$PATH&lt;&#x2F;code&gt;. A conventional place to update &lt;code&gt;$PATH&lt;&#x2F;code&gt; is a “profile” script (usually .profile or
.bash_profile), which is run when a login shell starts.
Avoid sourcing this script multiple times, as the &lt;code&gt;$PATH&lt;&#x2F;code&gt; variable will grow larger and larger, as more (duplicate) values are concatenated onto it.
As long as a login shell is run once when you log in to your machine, and all other processes
(including other shells) are descendants of the login shell, your &lt;code&gt;$PATH&lt;&#x2F;code&gt; will remain what it was set to when the login shell started.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s my &lt;code&gt;$PATH&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+steve@fontaine ~ $ echo $PATH
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;home&#x2F;steve&#x2F;.cargo&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;sbin:
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.rvm&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run &lt;code&gt;bash&lt;&#x2F;code&gt; to start a new shell as a child of the current shell:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+steve@fontaine ~ $ bash
&lt;&#x2F;span&gt;&lt;span&gt;+steve@fontaine ~ $ echo $PATH
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;home&#x2F;steve&#x2F;.cargo&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;sbin:
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.rvm&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the &lt;code&gt;$PATH&lt;&#x2F;code&gt; wasn’t affected. My .profile script didn’t run.&lt;&#x2F;p&gt;
&lt;p&gt;Now run &lt;code&gt;bash --login&lt;&#x2F;code&gt; which starts a new login shell as a child of the current shell:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+steve@fontaine ~ $ bash --login
&lt;&#x2F;span&gt;&lt;span&gt;+steve@fontaine ~ $ echo $PATH
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;home&#x2F;steve&#x2F;.cargo&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;sbin:
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;home&#x2F;steve&#x2F;.cargo&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;sbin:
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.rvm&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.rvm&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This time my &lt;code&gt;$PATH&lt;&#x2F;code&gt; got longer, as all the directories I add when a login shell starts got added &lt;em&gt;again&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This scenario was contrived, but similar problems can arise in practice, in particular through the use of a window manager (WM).&lt;&#x2F;p&gt;
&lt;p&gt;How do you launch your window manager? The two common ways are running &lt;code&gt;startx&lt;&#x2F;code&gt; from a tty, and logging in via a display manager, which
presents a graphical login form and then starts your window manager after login. Much like a text shell (such as bash), your window manager
creates new processes. &lt;code&gt;$PATH&lt;&#x2F;code&gt; is of particular relevance to terminal emulators, so let’s only consider terminal emulators and the shells that run
“inside” them. Whether you’re double-clicking on an icon, using a launcher like dmenu, or have configured your window manager to directly launch
a terminal emulator in response to a key combination, the windows manager is starting your terminal emulator, which in turn is starting a shell.&lt;&#x2F;p&gt;
&lt;p&gt;Whenever you start a shell, your goal is to have your &lt;code&gt;$PATH&lt;&#x2F;code&gt; be set to whatever your .profile script specifies.
Something is amiss if &lt;code&gt;$PATH&lt;&#x2F;code&gt; has the settings in .profile applied multiple times (as in the example above), or not at all in which case
none of your custom executable directories will work.&lt;&#x2F;p&gt;
&lt;p&gt;If you start your WM with &lt;code&gt;startx&lt;&#x2F;code&gt;, then you must have logged into a tty directly
which will have started a login shell. Running &lt;code&gt;startx&lt;&#x2F;code&gt; from a login shell will result in your intended &lt;code&gt;$PATH&lt;&#x2F;code&gt; being part of your WM’s
environment (WMs are unix processes too; they have environments), and when your WM launched a shell (via a terminal emulator)
the shell inherited the correct &lt;code&gt;$PATH&lt;&#x2F;code&gt; too and you’re done.&lt;&#x2F;p&gt;
&lt;p&gt;If you use a display manager to login, somehow by the time you launch a shell, you’re .profile script needs to have been invoked &lt;em&gt;exactly once&lt;&#x2F;em&gt; (so your &lt;code&gt;$PATH&lt;&#x2F;code&gt;
is set the way you like). This can be done from within the WM itself. Most terminal emulators take a flag which instructs them to launch a login
shell rather than a regular shell. Have your WM pass this flag when launching a terminal. If you were to start a second terminal from the first
(e.g. tmux), it would just launch a regular (non-login) shell, so the duplicate &lt;code&gt;$PATH&lt;&#x2F;code&gt; problem is avoided. The only gotcha here is if you ever
start the WM with startx and not a display manager, WM-spawned terminal emulators will have sourced your .profile script twice
(once from the login shell you got when logging in to a tty, and a second time as you instructed your WM to launch a terminal emulator with a login shell inside).
A less fragile approach is to configure the display manager to setup your environment before launching the WM, however unfortunately not all display managers can
be thus configured.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Make sure your terminal emulator runs in the expected environment</title>
        <published>2020-11-04T00:00:00+00:00</published>
        <updated>2020-11-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/make-sure-your-terminal-emulator-runs-in-the-expected-environment/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/make-sure-your-terminal-emulator-runs-in-the-expected-environment/</id>
        
        <summary type="html">&lt;p&gt;This is a follow-up to &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;why-you-need-a-.bashrc-and-.profile&#x2F;&quot;&gt;Why you need a .bashrc and .profile&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Unix processes run in an environment consisting of string values assigned to named environment variables.
Some processes such as a shell or window manager are responsible for launching additional processes.
By convention, new processes inherit the environment variables of the process that created them.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Winit makes windows the wrong size in some cases I think</title>
        <published>2020-11-03T00:00:00+00:00</published>
        <updated>2020-11-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/winit-makes-windows-the-wrong-size-in-some-cases-i-think/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/winit-makes-windows-the-wrong-size-in-some-cases-i-think/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/winit-makes-windows-the-wrong-size-in-some-cases-i-think/">&lt;p&gt;I want to find some time to debug a problem with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;chargrid_graphical&quot;&gt;chargrid_graphical&lt;&#x2F;a&gt;
where new windows spend a couple of frames at their specified size before shrinking. It seems related to hi-dpi
scaling. In particular, when a program starts, I observe the hi-dpi scaling factor starting as 1, then briefly changing
to 1.6667, then back to 1 again after several milliseconds. My hypothesis is that there is a race condition in
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;winit&quot;&gt;winit&lt;&#x2F;a&gt; - the de-facto standard windows creation library for rust.
The scaling factor change from 1 to 1.6667 should have caused the window to get larger, but logging the size of the
window on each frame reveals that this never happens. The change from 1.6667 back to 1 does cause it to get smaller,
but it ends up 1&#x2F;1.6667 of its original size. This suggests that winit is telling X11 (in my case) to resize the window,
and also querying X11 for windows sizes, and that there is a delay between telling X11 to resize and the change being
affected, during which X11 still reports the old size.&lt;&#x2F;p&gt;
&lt;p&gt;As to why new windows briefly have their scaling factor set to 1.6667, I have no idea! It’s possibly related to
my multi-monitor setup, where one monitor is hi-dpi and the other is not. This behaviour only exhibits on the
non-hi-dpi monitor.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Why you need a .bashrc and .profile</title>
        <published>2020-11-02T00:00:00+00:00</published>
        <updated>2020-11-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/why-you-need-a-bashrc-and-profile/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/why-you-need-a-bashrc-and-profile/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/why-you-need-a-bashrc-and-profile/">&lt;p&gt;I’ve been doing this wrong my whole life.&lt;&#x2F;p&gt;
&lt;p&gt;For as long as I can remember I’ve included some version of the following line in my .bashrc:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;bin:$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;.bin:$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;.local&#x2F;bin:$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;.local&#x2F;sbin:$&lt;&#x2F;span&gt;&lt;span&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This line defines a few directories inside my home directory where I can place executable
files which can be run without their full path. The problem this causes is when starting
a terminal from an existing terminal session (launching &lt;code&gt;tmux&lt;&#x2F;code&gt;, or launching a graphical
terminal from an X11 session started with &lt;code&gt;startx&lt;&#x2F;code&gt;), I end up with an unfortunate-looking &lt;code&gt;PATH&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;sbin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;sbin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;steve&#x2F;.local&#x2F;sbin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin&lt;&#x2F;p&gt;
&lt;p&gt;That was from a tmux session that had been launched from a graphical terminal emulator launched by dmenu running
in an X11 session that I started by running &lt;code&gt;startx&lt;&#x2F;code&gt; from a tty. Each time bash started, it would prepend &lt;code&gt;$HOME&#x2F;bin&#x2F;:...&lt;&#x2F;code&gt;
to the &lt;code&gt;PATH&lt;&#x2F;code&gt; variable, causing it to build up to the monstrosity above.&lt;&#x2F;p&gt;
&lt;p&gt;The solution: login shells and .profile.&lt;&#x2F;p&gt;
&lt;p&gt;Shells like bash can be run as “login shells”, which causes them to behave a little differently to usual.
Of note, the .bashrc file is not sourced when bash is run as a login shell (other shells behave similarly with their respective rc files).
In lieu of .bashrc, the shell will source .profile (or .bash_profile).&lt;&#x2F;p&gt;
&lt;p&gt;The first shell you encounter when beginning a session will typically be a login shell.
When logging in to a tty, or ssh-ing into a machine, you’ll find yourself in a login shell.
Subsequently started shells will generally not be login shells unless this is explicitly specified.
Thus the .profile file is the place for all per-session configuration, such as setting &lt;code&gt;PATH&lt;&#x2F;code&gt; and other environment variables.
All the per &lt;em&gt;shell&lt;&#x2F;em&gt; configurations, such as aliases, functions, or the prompt, belong in .bashrc.
This is because unlike environment variables, these objects aren’t inherited by nested shells; they must be defined again
in each new shell.&lt;&#x2F;p&gt;
&lt;p&gt;Since login shells are still shells, they should behave the same way as a regular shell from the user’s point of
view. This means all the settings from .bashrc should still be applied. This it is typical to place the following the
start of .profile:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;-n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;BASH_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;.bashrc&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span&gt;~&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Why you need a .bashrc and .profile</title>
        <published>2020-11-02T00:00:00+00:00</published>
        <updated>2020-11-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/why-you-need-a-.bashrc-and-.profile/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/why-you-need-a-.bashrc-and-.profile/</id>
        
        <summary type="html">&lt;p&gt;I’ve been doing this wrong my whole life.&lt;&#x2F;p&gt;
&lt;p&gt;For as long as I can remember I’ve included some version of the following line in my .bashrc:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;bin:$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;.bin:$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;.local&#x2F;bin:$&lt;&#x2F;span&gt;&lt;span&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&#x2F;.local&#x2F;sbin:$&lt;&#x2F;span&gt;&lt;span&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Updating Library Dependencies</title>
        <published>2020-11-01T00:00:00+00:00</published>
        <updated>2020-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/updating-library-dependencies/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/updating-library-dependencies/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/updating-library-dependencies/">&lt;p&gt;Every so often I update the deps of my rust libraries.  This is so that crates
depending on my libraries and also my libraries’ dependencies don’t end up
depending on multiple different versions of the same thing. Doing so wouldn’t
cause any problems in practice; cargo can handle this situation perfectly fine,
but it adds to build&#x2F;download times and binary sizes.&lt;&#x2F;p&gt;
&lt;p&gt;Today I updated the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;wfc&quot;&gt;wfc&lt;&#x2F;a&gt;. The only change
required by the core &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;wfc&quot;&gt;wfc&lt;&#x2F;a&gt; crate was bumping
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;hashbrown&quot;&gt;hashbrown&lt;&#x2F;a&gt; from 0.7 to 0.9.
I also updated the examples &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;wfc_image&quot;&gt;wfc_image&lt;&#x2F;a&gt; crate
to render animations with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;pixels&quot;&gt;pixels&lt;&#x2F;a&gt; instead
of &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;pixel_grid&quot;&gt;pixel_grid&lt;&#x2F;a&gt;, and to parse arguments with
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;meap&quot;&gt;meap&lt;&#x2F;a&gt; instead of &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;simon&quot;&gt;simon&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How I spent 2020-10-31</title>
        <published>2020-10-31T00:00:00+00:00</published>
        <updated>2020-10-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/how-i-spent-2020-10-31/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/how-i-spent-2020-10-31/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/how-i-spent-2020-10-31/">&lt;p&gt;I’m going to start occasionally posting lists of non-technical things I did on particular days
to save time on days when I have nothing technical or insightful to share here.&lt;&#x2F;p&gt;
&lt;p&gt;Today I:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ate brunch at a cafe in Surry Hills&lt;&#x2F;li&gt;
&lt;li&gt;walked to Centennial Park to look at birds&lt;&#x2F;li&gt;
&lt;li&gt;got caught in a thunderstorm&lt;&#x2F;li&gt;
&lt;li&gt;watch a Halloween screening of a movie at a cinema in Newtown&lt;&#x2F;li&gt;
&lt;li&gt;played a one-shot table-top RPG created by a friend, that they were running for the first time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>FreeBSD 12.2 intel graphics bug</title>
        <published>2020-10-30T00:00:00+00:00</published>
        <updated>2020-10-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/freebsd-12-2-intel-graphics-bug/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/freebsd-12-2-intel-graphics-bug/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/freebsd-12-2-intel-graphics-bug/">&lt;p&gt;I updated my laptop to FreeBSD 12.2 and could no longer start X.
My laptop is a Lenovo Thinkpad T470 with intel graphics.&lt;&#x2F;p&gt;
&lt;p&gt;The quick and dirty workaround was to configure X to use the vesa driver
rather than the intel graphics driver.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# &#x2F;usr&#x2F;local&#x2F;etc&#x2F;X11&#x2F;xorg.conf.d&#x2F;driver-intel.conf
&lt;&#x2F;span&gt;&lt;span&gt;Section &amp;quot;Device&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    Identifier &amp;quot;Card0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    Driver     &amp;quot;vesa&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    # Driver     &amp;quot;intel&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    # Option     &amp;quot;DRI&amp;quot; &amp;quot;3&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;EndSection
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After this change I could start X, but the vesa driver is slow.&lt;&#x2F;p&gt;
&lt;p&gt;I found the fix in &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;vermaden&#x2F;status&#x2F;1321375859429773312&quot;&gt;a tweet&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The problematic package is drm-kmod. The fix is to rebuild it from the ports tree.&lt;&#x2F;p&gt;
&lt;p&gt;Instructions copied from tweet:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# svnlite release
&lt;&#x2F;span&gt;&lt;span&gt;# portsnap auto
&lt;&#x2F;span&gt;&lt;span&gt;# make -C &#x2F;usr&#x2F;ports&#x2F;graphics&#x2F;drm-fbsd12.0-kmod build deinstall install clean
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Switch the X config to use the intel driver again, and reboot, and X will be working again
with the intel driver.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the contents of my &#x2F;usr&#x2F;local&#x2F;etc&#x2F;svnup.conf:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# $FreeBSD$
&lt;&#x2F;span&gt;&lt;span&gt;#
&lt;&#x2F;span&gt;&lt;span&gt;# Default configuration options for svnup.conf.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[defaults]
&lt;&#x2F;span&gt;&lt;span&gt;work_directory=&#x2F;var&#x2F;tmp&#x2F;svnup
&lt;&#x2F;span&gt;&lt;span&gt;host=svn.freebsd.org
&lt;&#x2F;span&gt;&lt;span&gt;#host=svn0.us-west.freebsd.org
&lt;&#x2F;span&gt;&lt;span&gt;#host=svn0.us-east.freebsd.org
&lt;&#x2F;span&gt;&lt;span&gt;#host=svn0.eu.freebsd.org
&lt;&#x2F;span&gt;&lt;span&gt;protocol=https
&lt;&#x2F;span&gt;&lt;span&gt;verbosity=1
&lt;&#x2F;span&gt;&lt;span&gt;trim_tree=0
&lt;&#x2F;span&gt;&lt;span&gt;extra_files=0
&lt;&#x2F;span&gt;&lt;span&gt;#repository_base=
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[release]
&lt;&#x2F;span&gt;&lt;span&gt;branch=base&#x2F;releng&#x2F;12.2
&lt;&#x2F;span&gt;&lt;span&gt;target=&#x2F;usr&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[ports]
&lt;&#x2F;span&gt;&lt;span&gt;branch=ports&#x2F;head
&lt;&#x2F;span&gt;&lt;span&gt;target=&#x2F;usr&#x2F;ports
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[stable]
&lt;&#x2F;span&gt;&lt;span&gt;branch=base&#x2F;stable&#x2F;12
&lt;&#x2F;span&gt;&lt;span&gt;target=&#x2F;usr&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[current]
&lt;&#x2F;span&gt;&lt;span&gt;branch=base&#x2F;head
&lt;&#x2F;span&gt;&lt;span&gt;target=&#x2F;usr&#x2F;src
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Vanilla Javascript and Under Engineering</title>
        <published>2020-10-29T00:00:00+00:00</published>
        <updated>2020-10-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/vanilla-javascript-and-under-engineering/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/vanilla-javascript-and-under-engineering/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/vanilla-javascript-and-under-engineering/">&lt;p&gt;I enjoy the safety of typescript, and the ease with which one can
think about a UI made with react. Webpack lets me organize my source
and compiled code, and transpile the former into the latter, frontend
and backend, however I see fit.&lt;&#x2F;p&gt;
&lt;p&gt;But sometimes I just want to make something.&lt;&#x2F;p&gt;
&lt;p&gt;Earlier this week I spent a few hours over a couple of days making
a &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;small-wolf&quot;&gt;3D renderer in the style of Wolfenstein 3D&lt;&#x2F;a&gt;.
It runs in the browser. The website has 2 files: an &lt;code&gt;index.html&lt;&#x2F;code&gt; referencing a file &lt;code&gt;wolf.js&lt;&#x2F;code&gt;.
You run the site with &lt;code&gt;python -m http.server&lt;&#x2F;code&gt; or whatever other static file webserver you like.
The code itself is written with the aim of writing it quickly and not overthinking anything.
Most of the state is in global mutable variables. No effort is made to abstract anything;
the world is an array of integers set to 0 for floor or 1 for wall and in lieu of a coordinate
class I just do the few 2D vector operations I need inline.&lt;&#x2F;p&gt;
&lt;p&gt;It’s certainly not the nicest code I’ve ever written, and this approach would be maddening on
a large project, but damn it was fun to make!&lt;&#x2F;p&gt;
&lt;p&gt;Here’s another screenshot:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;vanilla-javascript-and-under-engineering&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Simple Wolfenstein-3D-esque renderer</title>
        <published>2020-10-28T00:00:00+00:00</published>
        <updated>2020-10-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/simple-wolfenstein-3d-esque-renderer/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/simple-wolfenstein-3d-esque-renderer/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/simple-wolfenstein-3d-esque-renderer/">&lt;p&gt;Just for fun I implemented a simple 3D renderer using the technique employed in Wolfenstein 3D.
The world is procedurally generated using the technique described
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;cellular-automata-cave-generation&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.
The renderer works by finding the depth of walls for each row of pixels on the screen, and
drawing a vertically-centered vertical wall-coloured strip whose length is inversely proportional
to the wall depth at that point. Wall colour has brightness inversely proportional to the
square of the straight-line distance from the eye to the wall in the direction of the pixel row.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;simple-wolfenstein-3d-esque-renderer&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Code: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;small-wolf&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;small-wolf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;small-wolf&quot;&gt;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;small-wolf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Simple Wolfenstein-3D-esque renderer</title>
        <published>2020-10-28T00:00:00+00:00</published>
        <updated>2020-10-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/simple-wolfenstein-3D-esque-renderer/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/simple-wolfenstein-3D-esque-renderer/</id>
        
        <summary type="html">&lt;p&gt;Just for fun I implemented a simple 3D renderer using the technique employed in Wolfenstein 3D.
The world is procedurally generated using the technique described
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;cellular-automata-cave-generation&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.
The renderer works by finding the depth of walls for each row of pixels on the screen, and
drawing a vertically-centered vertical wall-coloured strip whose length is inversely proportional
to the wall depth at that point. Wall colour has brightness inversely proportional to the
square of the straight-line distance from the eye to the wall in the direction of the pixel row.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;simple-wolfenstein-3D-esque-renderer&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Parsing and Generating GUIDs in GPT Header Fields</title>
        <published>2020-10-27T00:00:00+00:00</published>
        <updated>2020-10-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-and-generating-guids-in-gpt-header-fields/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-and-generating-guids-in-gpt-header-fields/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-and-generating-guids-in-gpt-header-fields/">&lt;p&gt;A while back I wrote about
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;formatting-guids-in-gpt-header-fields&#x2F;&quot;&gt;the binary format of GUIDs in GPT headers&lt;&#x2F;a&gt;.
Based on some examples I reverse-engineered conversion between a 128-bit integer on disk, and a UUID’s
fields.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve likely duplicated some logic from &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;winapi&quot;&gt;winapi&lt;&#x2F;a&gt;.
In the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;uuid&quot;&gt;uuid&lt;&#x2F;a&gt; crate, a feature can be enabled to include code
for converting UUIDs into GUIDs (defined in winapi), but it only works when the target
is windows (a requirement of winapi).&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cellular automata drawing prompt generator</title>
        <published>2020-10-26T00:00:00+00:00</published>
        <updated>2020-10-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/cellular-automata-drawing-prompt-generator/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/cellular-automata-drawing-prompt-generator/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/cellular-automata-drawing-prompt-generator/">&lt;p&gt;While working on a totally unrelated project, I accidentally implemented a procedural
drawing prompt generator. The technique used to generate the images is a simple modification
to Conway’s game of life. I’ve used this algorithm to generate caves for roguelikes in the
past. Here’s an old post that explains how it works: &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;cellular-automata-cave-generation&#x2F;&quot;&gt;Cellular Automata Cave Generation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a link to the drawing prompt generator: &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;drawing-prompt&#x2F;&quot;&gt;gridbugs.github.io&#x2F;drawing-prompt&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Repository of new words</title>
        <published>2020-10-25T00:00:00+00:00</published>
        <updated>2020-10-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/repository-of-new-words/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/repository-of-new-words/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/repository-of-new-words/">&lt;p&gt;I’ve started a git repo where I write down the definition of words that I encounter for the first time.
Almost every cryptic crossword I’ve solved (or attempted to solve!) has included a word which I’d not heard before,
and I’ve surely forgotten most of the new words I’ve discovered.
This will be an experiment to see if it helps me retain the words I learn from crosswords.
Repo is here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;words&quot;&gt;github.com&#x2F;gridbugs&#x2F;words&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Boss fights in traditional roguelikes</title>
        <published>2020-10-24T00:00:00+00:00</published>
        <updated>2020-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/boss-fights-in-traditional-roguelikes/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/boss-fights-in-traditional-roguelikes/</id>
        
        <summary type="html">&lt;p&gt;Today I completed my first successful run of &lt;a href=&quot;https:&#x2F;&#x2F;jupiterhell.com&#x2F;&quot;&gt;Jupiter Hell&lt;&#x2F;a&gt; -
a traditional roguelike which is the spiritual successor to &lt;a href=&quot;https:&#x2F;&#x2F;drl.chaosforge.org&#x2F;&quot;&gt;DOOM the Roguelike&lt;&#x2F;a&gt;.
As a traditional roguelike, gameplay is turn-based, and levels are abstracted as 2D square grids of tiles.&lt;&#x2F;p&gt;
&lt;p&gt;Another property that tends to be true of roguelikes is that most turns are uninteresting - walking down a corridor,
or attacking a single standard enemy. There are meaningful &lt;em&gt;strategic&lt;&#x2F;em&gt; decisions to be made from time to time,
such as choosing whether to discard an item from your inventory to make room for a new item or deciding on a skill
to upgrade. Meaningful &lt;em&gt;tactical&lt;&#x2F;em&gt; decisions come about when a situation rapidly becomes dire (Do you stand your ground or flee
when surprised by a difficult enemy?) or the combination of enemies and terrain presents an opportunity (Which enemy do you
attack first? Is there time to run to cover? Should you use a rare&#x2F;expensive grenade? Should you trigger an explosive barrel?).&lt;&#x2F;p&gt;
&lt;p&gt;Jupiter Hell culminates with a boss fight fairly typical of DOOM-inspired games.
You fight a large enemy that periodically spawns normal enemies and then teleports away.
After a few such iterations my dual-pistol toting marine made short work of it.
As with the boss fight at the end of Doom the Roguelike, I found it to be an anti-climactic
conclusion to an otherwise solid game.&lt;&#x2F;p&gt;
&lt;p&gt;Upon further reflection, I’m not convinced that the roguelike genre supports boss fights at all.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Boss fights in traditional roguelikes</title>
        <published>2020-10-24T00:00:00+00:00</published>
        <updated>2020-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/boss-fights-in-traditional-roguelikes/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/boss-fights-in-traditional-roguelikes/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/boss-fights-in-traditional-roguelikes/">&lt;p&gt;Today I completed my first successful run of &lt;a href=&quot;https:&#x2F;&#x2F;jupiterhell.com&#x2F;&quot;&gt;Jupiter Hell&lt;&#x2F;a&gt; -
a traditional roguelike which is the spiritual successor to &lt;a href=&quot;https:&#x2F;&#x2F;drl.chaosforge.org&#x2F;&quot;&gt;DOOM the Roguelike&lt;&#x2F;a&gt;.
As a traditional roguelike, gameplay is turn-based, and levels are abstracted as 2D square grids of tiles.&lt;&#x2F;p&gt;
&lt;p&gt;Another property that tends to be true of roguelikes is that most turns are uninteresting - walking down a corridor,
or attacking a single standard enemy. There are meaningful &lt;em&gt;strategic&lt;&#x2F;em&gt; decisions to be made from time to time,
such as choosing whether to discard an item from your inventory to make room for a new item or deciding on a skill
to upgrade. Meaningful &lt;em&gt;tactical&lt;&#x2F;em&gt; decisions come about when a situation rapidly becomes dire (Do you stand your ground or flee
when surprised by a difficult enemy?) or the combination of enemies and terrain presents an opportunity (Which enemy do you
attack first? Is there time to run to cover? Should you use a rare&#x2F;expensive grenade? Should you trigger an explosive barrel?).&lt;&#x2F;p&gt;
&lt;p&gt;Jupiter Hell culminates with a boss fight fairly typical of DOOM-inspired games.
You fight a large enemy that periodically spawns normal enemies and then teleports away.
After a few such iterations my dual-pistol toting marine made short work of it.
As with the boss fight at the end of Doom the Roguelike, I found it to be an anti-climactic
conclusion to an otherwise solid game.&lt;&#x2F;p&gt;
&lt;p&gt;Upon further reflection, I’m not convinced that the roguelike genre supports boss fights at all.&lt;&#x2F;p&gt;
&lt;p&gt;In real-time games, or some non-roguelike turn-based games, a typical boss fight
involves the player fighting a single tougher-than-usual enemy in a closed-off arena.
Gameplay during a boss fight should resemble standard gameplay that has been enhanced, or purified in some way.
The boss fight becomes a way for players to prove to the games that they have mastered some aspects of its mechanics.&lt;&#x2F;p&gt;
&lt;p&gt;To defeat Smough and Ornstein
in Dark Souls you must demonstrate your ability to patiently wait for the right time to strike,
and time attacks, dodges, and blocks perfectly, which is what melee combat in Dark Souls is all about.
The Icon of Sin at the end of Doom II (or Doom Eternal) forces you to manage an endless horde of
hell spawn while also shooting the boss itself until it’s dead, which is the main mechanic of the
game, only more-so.
In Darkest Dungeon - a turned based game with some roguelike properties, the combat system is entirely based on
abilities, with enough variety and (anti)synergy with one another; unlike traditional roguelikes, &lt;em&gt;every&lt;&#x2F;em&gt; turn
feels like a meaningful decision.
Because of the richness of combat, all 10 or so boss fights feel fresh (except for the part where they re-use
the same boss 3 times for each area - but that’s a different issue!).&lt;&#x2F;p&gt;
&lt;p&gt;Which brings us back to traditional roguelikes. The richness of combat in the genre comes from the interactions
between groups of enemies, the terrain, and the player. In a boss arena, where there is only a single enemy (plus
its summons, perhaps), the number of interesting interactions is low, compared to normal, non-boss gameplay.
Boss fights feel repetitive and boring when you win, and an unfair skill-check when you loose.
Rarely does a decision made by the player during a boss fight meaningfully affect its outcome.
Gameplay during a boss fight is not just an amplified version of standard play, but instead a detraction from it.&lt;&#x2F;p&gt;
&lt;p&gt;So how do you conclude your roguelike? Originally, (in Rogue, say) the hero would reach the bottom of the dungeon, and retrieve
an item (traditionally an amulet), and then make it back to the surface, possibly pursued by the item’s
guardians. In their flight, the player may still need to fight remnant (or perhaps newly-spawned) enemies on
floors as they ascend, but now they might be under time pressure due to their pursuers, or item pressure as
the floors were already looted by the player on their way down. The game’s culmination is the same experience
as normal gameplay, only enhanced in some way.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The latest rust release broke backtraces on FreeBSD</title>
        <published>2020-10-23T00:00:00+00:00</published>
        <updated>2020-10-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/the-latest-rust-release-broke-backtraces-on-freebsd/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/the-latest-rust-release-broke-backtraces-on-freebsd/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/the-latest-rust-release-broke-backtraces-on-freebsd/">&lt;p&gt;Rust 1.47 broke backtraces on FreeBSD. Backtraces are now handled by &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;gimli&quot;&gt;gimli&lt;&#x2F;a&gt;
which does not support meaningful backtraces on FreeBSD at the time of writing. Backtraces now look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;stack backtrace:
&lt;&#x2F;span&gt;&lt;span&gt;   0:          0x11298b1 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   1:          0x1141d60 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   2:          0x11277df - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   3:          0x112b59d - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   4:          0x112b24c - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   5:          0x112bc45 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   6:          0x112b80d - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   7:          0x1129d70 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   8:          0x112b7cc - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   9:          0x1141040 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  10:          0x11437f7 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  11:          0x10a0864 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  12:          0x1096c59 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  13:          0x1096095 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  14:          0x108351d - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  15:          0x1073e66 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  16:          0x108af2e - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  17:          0x107bad1 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  18:          0x106a3c4 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  19:          0x112c0ae - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  20:          0x106a3a2 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  21:          0x1073f0b - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  22:          0x106a10b - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On rust 1.46, they looked like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;stack backtrace:
&lt;&#x2F;span&gt;&lt;span&gt;   0: backtrace::backtrace::libunwind::trace
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;cargo&#x2F;registry&#x2F;src&#x2F;github.com-1ecc6299db9ec823&#x2F;backtrace-0.3.46&#x2F;src&#x2F;backtrace&#x2F;libunwind.rs:86
&lt;&#x2F;span&gt;&lt;span&gt;   1: backtrace::backtrace::trace_unsynchronized
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;cargo&#x2F;registry&#x2F;src&#x2F;github.com-1ecc6299db9ec823&#x2F;backtrace-0.3.46&#x2F;src&#x2F;backtrace&#x2F;mod.rs:66
&lt;&#x2F;span&gt;&lt;span&gt;   2: std::sys_common::backtrace::_print_fmt
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;sys_common&#x2F;backtrace.rs:78
&lt;&#x2F;span&gt;&lt;span&gt;   3: &amp;lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;sys_common&#x2F;backtrace.rs:59
&lt;&#x2F;span&gt;&lt;span&gt;   4: core::fmt::write
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libcore&#x2F;fmt&#x2F;mod.rs:1076
&lt;&#x2F;span&gt;&lt;span&gt;   5: std::io::Write::write_fmt
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;io&#x2F;mod.rs:1537
&lt;&#x2F;span&gt;&lt;span&gt;   6: std::sys_common::backtrace::_print
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;sys_common&#x2F;backtrace.rs:62
&lt;&#x2F;span&gt;&lt;span&gt;   7: std::sys_common::backtrace::print
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;sys_common&#x2F;backtrace.rs:49
&lt;&#x2F;span&gt;&lt;span&gt;   8: std::panicking::default_hook::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;panicking.rs:198
&lt;&#x2F;span&gt;&lt;span&gt;   9: std::panicking::default_hook
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;panicking.rs:217
&lt;&#x2F;span&gt;&lt;span&gt;  10: std::panicking::rust_panic_with_hook
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;panicking.rs:526
&lt;&#x2F;span&gt;&lt;span&gt;  11: rust_begin_unwind
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;panicking.rs:437
&lt;&#x2F;span&gt;&lt;span&gt;  12: core::panicking::panic_fmt
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libcore&#x2F;panicking.rs:85
&lt;&#x2F;span&gt;&lt;span&gt;  13: core::slice::&amp;lt;impl [T]&amp;gt;::copy_from_slice
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;04488afe34512aa4c33566eb16d8c912a3ae04f9&#x2F;src&#x2F;libcore&#x2F;macros&#x2F;mod.rs:16
&lt;&#x2F;span&gt;&lt;span&gt;  14: mini_gpt::GptHeader::crc32_from_logical_block
&lt;&#x2F;span&gt;&lt;span&gt;             at mini-gpt&#x2F;src&#x2F;lib.rs:166
&lt;&#x2F;span&gt;&lt;span&gt;  15: mini_gpt::GptHeader::parse
&lt;&#x2F;span&gt;&lt;span&gt;             at mini-gpt&#x2F;src&#x2F;lib.rs:124
&lt;&#x2F;span&gt;&lt;span&gt;  16: mini_gpt::write_header
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;mini-gpt&#x2F;src&#x2F;lib.rs:614
&lt;&#x2F;span&gt;&lt;span&gt;  17: gpt_fat_disk_image_create::main
&lt;&#x2F;span&gt;&lt;span&gt;             at tools&#x2F;src&#x2F;create.rs:55
&lt;&#x2F;span&gt;&lt;span&gt;  18: std::rt::lang_start::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;04488afe34512aa4c33566eb16d8c912a3ae04f9&#x2F;src&#x2F;libstd&#x2F;rt.rs:67
&lt;&#x2F;span&gt;&lt;span&gt;  19: std::rt::lang_start_internal::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;rt.rs:52
&lt;&#x2F;span&gt;&lt;span&gt;  20: std::panicking::try::do_call
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;panicking.rs:348
&lt;&#x2F;span&gt;&lt;span&gt;  21: std::panicking::try
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;panicking.rs:325
&lt;&#x2F;span&gt;&lt;span&gt;  22: std::panic::catch_unwind
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;panic.rs:394
&lt;&#x2F;span&gt;&lt;span&gt;  23: std::rt::lang_start_internal
&lt;&#x2F;span&gt;&lt;span&gt;             at src&#x2F;libstd&#x2F;rt.rs:51
&lt;&#x2F;span&gt;&lt;span&gt;  24: std::rt::lang_start
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;04488afe34512aa4c33566eb16d8c912a3ae04f9&#x2F;src&#x2F;libstd&#x2F;rt.rs:67
&lt;&#x2F;span&gt;&lt;span&gt;  25: main
&lt;&#x2F;span&gt;&lt;span&gt;  26: _start
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;usr&#x2F;src&#x2F;lib&#x2F;csu&#x2F;amd64&#x2F;crt1.c:76
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was a regression in the rust compiler and not a problem with FreeBSD as I
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;rust-stacktraces-are-unknown-on-freebsd&#x2F;&quot;&gt;previously thought&lt;&#x2F;a&gt;,
which is a relief. FreeBSD is a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;rustc&#x2F;platform-support.html#tier-2&quot;&gt;tier 2&lt;&#x2F;a&gt;
rust platform, so tests don’t necessarily run, and breakages like this one aren’t
the end of the world, though this is the first real problem I’ve run into using rust
on FreeBSD.&lt;&#x2F;p&gt;
&lt;p&gt;The temporary solution is to switch back to rust 1.46. This meant changing back some parts
of my GPT FAT disk tools that were taking advantage of the
&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;10&#x2F;08&#x2F;Rust-1.47.html#traits-on-larger-arrays&quot;&gt;const generic teaser&lt;&#x2F;a&gt;
included in 1.47.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Raidz setup</title>
        <published>2020-10-22T00:00:00+00:00</published>
        <updated>2020-10-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/raidz-setup/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/raidz-setup/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/raidz-setup/">&lt;p&gt;Tonight I set up a raidz zpool on 3 4TB external hard drives.
This is exactly the &lt;a href=&quot;https:&#x2F;&#x2F;www.freebsd.org&#x2F;doc&#x2F;handbook&#x2F;zfs-quickstart.html&quot;&gt;ZFS example in the FreeBSD handbook&lt;&#x2F;a&gt;,
with the minor variation that one of the disks is &lt;em&gt;slightly&lt;&#x2F;em&gt; smaller
than the other 2, so &lt;code&gt;-f&lt;&#x2F;code&gt; must be specified when creating the zpool.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool create storage raidz da1 da2 da3
&lt;&#x2F;span&gt;&lt;span&gt;invalid vdev specification
&lt;&#x2F;span&gt;&lt;span&gt;use &amp;#39;-f&amp;#39; to override the following errors:
&lt;&#x2F;span&gt;&lt;span&gt;raidz contains devices of different sizes
&lt;&#x2F;span&gt;&lt;span&gt;# zpool create -f storage raidz da1 da2 da3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will be used in a media center. Create a new filesystem for storing media:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zfs create storage&#x2F;media
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m trying out the compression feature of ZFS. I doubt it will do much in this case as
all the files I’ll be storing in this filesystem will be already compressed, but I’m
interested to see how much of a difference it makes anyway.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zfs set compression=on storage&#x2F;media
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The 7TB below (instead of 8TB) is due to the unusual way hard drive sizes are specified.
4TB is more like 3.5TB. One disk size worth of storage is taken up with redundancy, which
is why the total size of the pool is twice that of a single disk (rather than 3 times).
Were one of the disks to fail, no data would be lost and the pool would continue to function
as normal.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# df -h storage&#x2F;media
&lt;&#x2F;span&gt;&lt;span&gt;Filesystem       Size    Used   Avail Capacity  Mounted on
&lt;&#x2F;span&gt;&lt;span&gt;storage&#x2F;media    7.0T     92G    6.9T     1%    &#x2F;storage&#x2F;media
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The zpool hierarchy showing the 3 disks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool status storage
&lt;&#x2F;span&gt;&lt;span&gt;  pool: storage
&lt;&#x2F;span&gt;&lt;span&gt; state: ONLINE
&lt;&#x2F;span&gt;&lt;span&gt;  scan: none requested
&lt;&#x2F;span&gt;&lt;span&gt;config:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NAME        STATE     READ WRITE CKSUM
&lt;&#x2F;span&gt;&lt;span&gt;        storage     ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;          raidz1-0  ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            da1     ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            da2     ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            da3     ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;errors: No known data errors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust stacktraces are &lt;unknown&gt; on FreeBSD</title>
        <published>2020-10-21T00:00:00+00:00</published>
        <updated>2020-10-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/rust-stacktraces-are-unknown-on-freebsd/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/rust-stacktraces-are-unknown-on-freebsd/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/rust-stacktraces-are-unknown-on-freebsd/">&lt;p&gt;Tonight I ran into an issue where when a rust program panics on my FreeBSD
laptop, the stacktrace doesn’t contain code locations, and instead shows
&lt;code&gt;&amp;lt;unknown&amp;gt;&lt;&#x2F;code&gt; on every line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ RUST_BACKTRACE=full cargo run --bin gpt-fat-disk-image-create -- -l README.md -d &#x2F;foo&#x2F;bar&#x2F;baz.md -o &#x2F;tmp&#x2F;a
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.06s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;gpt-fat-disk-image-create -l README.md -d &#x2F;foo&#x2F;bar&#x2F;baz.md -o &#x2F;tmp&#x2F;a`
&lt;&#x2F;span&gt;&lt;span&gt;thread &amp;#39;main&amp;#39; panicked at &amp;#39;source slice length (92) does not match destination slice length (512)&amp;#39;, &#x2F;rustc&#x2F;31530e5d132ebcc3654baf2e5460599681520af0&#x2F;library&#x2F;core&#x2F;src&#x2F;slice&#x2F;mod.rs:2673:13
&lt;&#x2F;span&gt;&lt;span&gt;stack backtrace:
&lt;&#x2F;span&gt;&lt;span&gt;   0:          0x11298b1 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   1:          0x1141d60 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   2:          0x11277df - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   3:          0x112b59d - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   4:          0x112b24c - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   5:          0x112bc45 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   6:          0x112b80d - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   7:          0x1129d70 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   8:          0x112b7cc - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   9:          0x1141040 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  10:          0x11437f7 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  11:          0x10a0864 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  12:          0x1096c59 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  13:          0x1096095 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  14:          0x108351d - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  15:          0x1073e66 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  16:          0x108af2e - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  17:          0x107bad1 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  18:          0x106a3c4 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  19:          0x112c0ae - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  20:          0x106a3a2 - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  21:          0x1073f0b - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  22:          0x106a10b - &amp;lt;unknown&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sounds at least related to a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;54434&quot;&gt;known issue&lt;&#x2F;a&gt;, but that issue is already
closed and not necessarily the same problem so I raised a new one.
It’s not clear whether the problem lies with rust or FreeBSD (or elsewhere).&lt;&#x2F;p&gt;
&lt;p&gt;But this is a major hindrance to my productivity!
Rust development is the main thing I use this computer for.
There are a couple of Linux distros I’ve been meaning to check out, namely &lt;a href=&quot;https:&#x2F;&#x2F;voidlinux.org&#x2F;&quot;&gt;void&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;crux.nu&quot;&gt;crux&lt;&#x2F;a&gt;, and I can always go crawling back to archlinux if they don’t work out.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Train Game</title>
        <published>2020-10-20T00:00:00+00:00</published>
        <updated>2020-10-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/train-game/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/train-game/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/train-game/">&lt;p&gt;Digging through an old hard drive I found a game I forgot I made.
This was in a time before every whimsical idea I had went into a
repo on github, and instead I would store repositories on a private
server. That server is gone now, and all that remains is the local
checkouts of projects on an almost forgotten hard disk.&lt;&#x2F;p&gt;
&lt;p&gt;So I salvaged what I could find, moving all the private repos onto
github, and added the &lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;train&quot;&gt;train game&lt;&#x2F;a&gt;
to games.gridbugs.org. It was my entry into the 2015 JS1K competition,
but it looks like I had to simplify the graphic of the train to get
the game (including graphics) to fit in under 1K.&lt;&#x2F;p&gt;
&lt;p&gt;JS1K page for the train game: &lt;a href=&quot;https:&#x2F;&#x2F;js1k.com&#x2F;2015-hypetrain&#x2F;details&#x2F;2309&quot;&gt;https:&#x2F;&#x2F;js1k.com&#x2F;2015-hypetrain&#x2F;details&#x2F;2309&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fixing zpool after FreeBSD fresh install on ZFS mirror</title>
        <published>2020-10-19T00:00:00+00:00</published>
        <updated>2020-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/fixing-zpool-after-freebsd-fresh-install-on-zfs-mirror/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/fixing-zpool-after-freebsd-fresh-install-on-zfs-mirror/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/fixing-zpool-after-freebsd-fresh-install-on-zfs-mirror/">&lt;p&gt;I bought some new SSDs to install FreeBSD on a media server I’m setting up.
During install, I elected to install the OS on a ZFS mirror, using a pair
of SSDs. Upon booting up, I checked the zpool status:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool status
&lt;&#x2F;span&gt;&lt;span&gt;  pool: zroot
&lt;&#x2F;span&gt;&lt;span&gt; state: ONLINE
&lt;&#x2F;span&gt;&lt;span&gt;status: One or more devices could not be used because the label is missing or
&lt;&#x2F;span&gt;&lt;span&gt;        invalid.  Sufficient replicas exist for the pool to continue
&lt;&#x2F;span&gt;&lt;span&gt;        functioning in a degraded state.
&lt;&#x2F;span&gt;&lt;span&gt;action: Replace the device using &amp;#39;zpool replace&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;   see: http:&#x2F;&#x2F;illumos.org&#x2F;msg&#x2F;ZFS-8000-4J
&lt;&#x2F;span&gt;&lt;span&gt;  scan: scrub repaired 0 in 0 days 00:00:09 with 0 errors on Mon Oct 19 20:13:49 2020
&lt;&#x2F;span&gt;&lt;span&gt;config:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NAME                    STATE     READ WRITE CKSUM
&lt;&#x2F;span&gt;&lt;span&gt;        zroot                   ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;          mirror-0              ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            ada0p4              ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            213823451083858949  UNAVAIL      0     0     0  was &#x2F;dev&#x2F;ada1p4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;errors: No known data errors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Strange. Stranger still:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool list
&lt;&#x2F;span&gt;&lt;span&gt;NAME    SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT
&lt;&#x2F;span&gt;&lt;span&gt;zroot   230G  2.60G   227G        -         -     0%     1%  1.00x  ONLINE  -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ignoring that apparent inconsistency…&lt;&#x2F;p&gt;
&lt;p&gt;First I tried taking the disk offline, then bringing it back oniline:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool offline zroot ada1p4
&lt;&#x2F;span&gt;&lt;span&gt;# zpool online zroot ada1p4
&lt;&#x2F;span&gt;&lt;span&gt;warning: device &amp;#39;ada1p4&amp;#39; onlined, but remains in faulted state
&lt;&#x2F;span&gt;&lt;span&gt;use &amp;#39;zpool replace&amp;#39; to replace devices that are no longer present
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then according to the instruction, I tried &lt;code&gt;replace&lt;&#x2F;code&gt;-ing the drive:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool replace zroot 213823451083858949 &#x2F;dev&#x2F;ada1p4
&lt;&#x2F;span&gt;&lt;span&gt;invalid vdev specification
&lt;&#x2F;span&gt;&lt;span&gt;use &amp;#39;-f&amp;#39; to override the following errors:
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;ada1p4 is part of active pool &amp;#39;zroot&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This didn’t help clarify the situation. Next I tried detaching and re-attaching the disk from the pool:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool detach zroot 213823451083858949
&lt;&#x2F;span&gt;&lt;span&gt;# zpool status
&lt;&#x2F;span&gt;&lt;span&gt;  pool: zroot
&lt;&#x2F;span&gt;&lt;span&gt; state: ONLINE
&lt;&#x2F;span&gt;&lt;span&gt;  scan: scrub repaired 0 in 0 days 00:00:11 with 0 errors on Mon Oct 19 21:06:06 2020
&lt;&#x2F;span&gt;&lt;span&gt;config:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NAME        STATE     READ WRITE CKSUM
&lt;&#x2F;span&gt;&lt;span&gt;        zroot       ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;          ada0p4    ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;errors: No known data errors
&lt;&#x2F;span&gt;&lt;span&gt;# zpool attach zroot ada0p4 &#x2F;dev&#x2F;ada1
&lt;&#x2F;span&gt;&lt;span&gt;cannot attach &#x2F;dev&#x2F;ada1 to ada0p4: no such pool or dataset
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I wish that last error message clarified which out of &lt;code&gt;zroot&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;dev&#x2F;ada1&lt;&#x2F;code&gt; and &lt;code&gt;ada0p4&lt;&#x2F;code&gt; it was referring
to by &lt;code&gt;no such pool or dataset&lt;&#x2F;code&gt;. Changing either argument to an obviously garbage value produced a
different error message.&lt;&#x2F;p&gt;
&lt;p&gt;Eventually I found a &lt;a href=&quot;https:&#x2F;&#x2F;dan.langille.org&#x2F;2019&#x2F;10&#x2F;15&#x2F;creating-a-mirror-from-your-zroot&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt;
by someone trying to do something similar to me, and a &lt;a href=&quot;https:&#x2F;&#x2F;forums.freebsd.org&#x2F;threads&#x2F;zpool-attach-no-such-pool-or-dataset.68292&#x2F;#post-407102&quot;&gt;forum post&lt;&#x2F;a&gt;
that suggested “using the full path (&#x2F;dev&#x2F;gpt&#x2F;&amp;lt;label&amp;gt;)” which worked:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool attach zroot ada0p4 &#x2F;dev&#x2F;gpt&#x2F;zfs1
&lt;&#x2F;span&gt;&lt;span&gt;Make sure to wait until resilver is done before rebooting.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;If you boot from pool &amp;#39;zroot&amp;#39;, you may need to update
&lt;&#x2F;span&gt;&lt;span&gt;boot code on newly attached disk &amp;#39;&#x2F;dev&#x2F;gpt&#x2F;zfs1&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Assuming you use GPT partitioning and &amp;#39;da0&amp;#39; is your new boot disk
&lt;&#x2F;span&gt;&lt;span&gt;you may use the following command:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        gpart bootcode -b &#x2F;boot&#x2F;pmbr -p &#x2F;boot&#x2F;gptzfsboot -i 1 da0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And for good measure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# gpart bootcode -b &#x2F;boot&#x2F;pmbr -p &#x2F;boot&#x2F;gptzfsboot -i 1 ada1
&lt;&#x2F;span&gt;&lt;span&gt;partcode written to ada1p1
&lt;&#x2F;span&gt;&lt;span&gt;bootcode written to ada1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now things look ok:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# zpool status
&lt;&#x2F;span&gt;&lt;span&gt;  pool: zroot
&lt;&#x2F;span&gt;&lt;span&gt; state: ONLINE
&lt;&#x2F;span&gt;&lt;span&gt;  scan: resilvered 2.60G in 0 days 00:00:12 with 0 errors on Mon Oct 19 21:28:10 2020
&lt;&#x2F;span&gt;&lt;span&gt;config:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NAME          STATE     READ WRITE CKSUM
&lt;&#x2F;span&gt;&lt;span&gt;        zroot         ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;          mirror-0    ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            ada0p4    ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            gpt&#x2F;zfs1  ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;errors: No known data errors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>New URL and title formats for daily posts</title>
        <published>2020-10-18T00:00:00+00:00</published>
        <updated>2020-10-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/new-url-and-title-formats-for-daily-posts/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/new-url-and-title-formats-for-daily-posts/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/new-url-and-title-formats-for-daily-posts/">&lt;p&gt;Today I updated the permalinks for these daily posts to be based on title of the post rather than the date.
The purpose is to make the URLs more meaningful.
When I write a post, I populate a new field which determines the permalink URL, and if
I forget it defaults to the date of the post.&lt;&#x2F;p&gt;
&lt;p&gt;I also removed the date from the heading and title of the pages that display the posts, displaying it under
the heading as I do for regular posts.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Time to start using language managers?</title>
        <published>2020-10-17T00:00:00+00:00</published>
        <updated>2020-10-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/time-to-start-using-language-managers/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/time-to-start-using-language-managers/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/time-to-start-using-language-managers/">&lt;p&gt;A few months ago I &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;time-to-stop-using-language-managers&#x2F;&quot;&gt;swore off the nodejs and ruby version managers&lt;&#x2F;a&gt;,
claiming that the language ports should suffice. This was spurred by a bad experience trying to
build nodejs from source on openbsd, when I spent an evening hacking the nodejs source to get it
to build before it dawned on me that I was repeating the work of the port maintainers.&lt;&#x2F;p&gt;
&lt;p&gt;Tonight I installed the ruby version manager again because the only version of ruby and gem I could
find in the FreeBSD ports collection was 2.6. Ports for later versions of the ruby interpreter exist,
but not the corresponding version of the gem package manager.&lt;&#x2F;p&gt;
&lt;p&gt;Several months ago when I renounced my use of version managers, I was suspicious of RVM in
particular because it was using &lt;code&gt;sudo&lt;&#x2F;code&gt; to install dependencies as root by default when installing
rubies. This specific realization lead to me uninstalling &lt;code&gt;sudo&lt;&#x2F;code&gt; outright. Frustratingly, there
doesn’t seem to be a way to get a list of the dependencies I need so I can install them manually.
No by default I get a fairly unhelpful error when trying to install ruby:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rvm install ruby-3 --disable-binary
&lt;&#x2F;span&gt;&lt;span&gt;Checking requirements for qR.
&lt;&#x2F;span&gt;&lt;span&gt;Requirements support for qR is not implemented yet,
&lt;&#x2F;span&gt;&lt;span&gt;report a bug here =&amp;gt; https:&#x2F;&#x2F;github.com&#x2F;rvm&#x2F;rvm&#x2F;issues
&lt;&#x2F;span&gt;&lt;span&gt;Requirements installation failed with status: 1.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(&lt;code&gt;--disable-binary&lt;&#x2F;code&gt; forces it to build ruby from source, which is necessary as there are no
binary distributions for FreeBSD.)&lt;&#x2F;p&gt;
&lt;p&gt;Pass &lt;code&gt;--debug&lt;&#x2F;code&gt; for extra verbosity:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rvm install ruby-3 --disable-binary --debug
&lt;&#x2F;span&gt;&lt;span&gt;Warning: No &amp;#39;sudo&amp;#39; found.
&lt;&#x2F;span&gt;&lt;span&gt;Warning: No &amp;#39;sudo&amp;#39; found.
&lt;&#x2F;span&gt;&lt;span&gt;ruby-3.0.0-preview1 - install
&lt;&#x2F;span&gt;&lt;span&gt;ruby-3.0.0-preview1 - #already removed src&#x2F;ruby-3.0.0-preview1
&lt;&#x2F;span&gt;&lt;span&gt;ruby-3.0.0-preview1 - #already removed rubies&#x2F;ruby-3.0.0-preview1
&lt;&#x2F;span&gt;&lt;span&gt;Free disk space 194019MB, required 440MB.
&lt;&#x2F;span&gt;&lt;span&gt;__rvm_setup_compile_environment_setup ruby-3.0.0-preview1
&lt;&#x2F;span&gt;&lt;span&gt;rvm_autolibs_flag=fail
&lt;&#x2F;span&gt;&lt;span&gt;__rvm_setup_compile_environment_movable_early ruby-3.0.0-preview1
&lt;&#x2F;span&gt;&lt;span&gt;__rvm_setup_compile_environment_system_early ruby-3.0.0-preview1
&lt;&#x2F;span&gt;&lt;span&gt;__rvm_setup_compile_environment_requirements ruby-3.0.0-preview1
&lt;&#x2F;span&gt;&lt;span&gt;Checking requirements for qR.
&lt;&#x2F;span&gt;&lt;span&gt;Requirements support for qR is not implemented yet,
&lt;&#x2F;span&gt;&lt;span&gt;report a bug here =&amp;gt; https:&#x2F;&#x2F;github.com&#x2F;rvm&#x2F;rvm&#x2F;issues
&lt;&#x2F;span&gt;&lt;span&gt;Requirements installation failed with status: 1.
&lt;&#x2F;span&gt;&lt;span&gt;__rvm_rm_rf already gone: &#x2F;home&#x2F;steve&#x2F;.rvm&#x2F;tmp&#x2F;55505*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The lack of &lt;code&gt;sudo&lt;&#x2F;code&gt; is mentioned so it may be related to the failure.&lt;&#x2F;p&gt;
&lt;p&gt;Consulting the log message mentioned in the error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Downloading bundled gem files...
&lt;&#x2F;span&gt;&lt;span&gt;executable host ruby is required. use --with-baseruby option.
&lt;&#x2F;span&gt;&lt;span&gt;*** Error code 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we need a native ruby in order to install ruby through RVM.&lt;&#x2F;p&gt;
&lt;p&gt;As root, I ran:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# pkg install ruby
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then to toll RVM to stop trying to install dependencies, run&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rvm autolibs disable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now run this command again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rvm install ruby-3 --disable-binary
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…and ruby should now be installed!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unsafely removing disks in a ZFS pool</title>
        <published>2020-10-16T00:00:00+00:00</published>
        <updated>2020-10-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/unsafely-removing-disks-in-a-zfs-pool/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/unsafely-removing-disks-in-a-zfs-pool/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/unsafely-removing-disks-in-a-zfs-pool/">&lt;p&gt;Here’s a little experiment I did to familiarise myself with ZFS on FreeBSD 12.1.
Start with a mirror (“foo”) made up of 2 disks (some spare external hard drives I had lying around):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+root@fontaine ~ # zpool status foo
&lt;&#x2F;span&gt;&lt;span&gt;  pool: foo
&lt;&#x2F;span&gt;&lt;span&gt; state: ONLINE
&lt;&#x2F;span&gt;&lt;span&gt;  scan: resilvered 80K in 0 days 00:00:01 with 0 errors on Sat Oct 17 00:34:15 2020
&lt;&#x2F;span&gt;&lt;span&gt;config:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NAME        STATE     READ WRITE CKSUM
&lt;&#x2F;span&gt;&lt;span&gt;        foo         ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;          mirror-0  ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            da1     ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            da2     ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;errors: No known data errors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now yank out the cable attaching &lt;code&gt;da1&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+root@fontaine ~ # zpool status foo
&lt;&#x2F;span&gt;&lt;span&gt;  pool: foo
&lt;&#x2F;span&gt;&lt;span&gt; state: DEGRADED
&lt;&#x2F;span&gt;&lt;span&gt;status: One or more devices has been removed by the administrator.
&lt;&#x2F;span&gt;&lt;span&gt;        Sufficient replicas exist for the pool to continue functioning in a
&lt;&#x2F;span&gt;&lt;span&gt;        degraded state.
&lt;&#x2F;span&gt;&lt;span&gt;action: Online the device using &amp;#39;zpool online&amp;#39; or replace the device with
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;#39;zpool replace&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;  scan: resilvered 80K in 0 days 00:00:01 with 0 errors on Sat Oct 17 00:34:15 2020
&lt;&#x2F;span&gt;&lt;span&gt;config:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NAME                      STATE     READ WRITE CKSUM
&lt;&#x2F;span&gt;&lt;span&gt;        foo                       DEGRADED     0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;          mirror-0                DEGRADED     0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            10400537847491037026  REMOVED      0     0     0  was &#x2F;dev&#x2F;da1
&lt;&#x2F;span&gt;&lt;span&gt;            da2                   ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;errors: No known data errors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The data on all datasets of the zpool “foo” is still accessible. You can continue using
the pool in this state, and any changes made to its contents will be applied to the
unplugged disk when we re-attach it.&lt;&#x2F;p&gt;
&lt;p&gt;The point of unplugging the disk was to simulate a disk failure, but when we plug the
disk back in, ZFS is smart enough to notice that it belongs in the “foo” pool. Try as
I might, I couldn’t convince ZFS to &lt;code&gt;replace&lt;&#x2F;code&gt; the disk with itself. Nor could I wipe
the disk (with &lt;code&gt;gpart&lt;&#x2F;code&gt;, say), because something (I presume ZFS) starts using the disk
the second I plug it back in. That kind of messed up my experiment, but I suppose it’s
a convenient feature.&lt;&#x2F;p&gt;
&lt;p&gt;So to complete this scenario, before plugging the disk back in, run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+root@fontaine ~ # zpool offline foo da1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This step isn’t necessary for this scenario. When we eventually plug the disk back in,
running &lt;code&gt;zpool online foo da1&lt;&#x2F;code&gt; will take the disk straight from &lt;code&gt;REMOVED&lt;&#x2F;code&gt; to &lt;code&gt;ONLINE&lt;&#x2F;code&gt;.
Leaving this step here as in a more realistic disk failure it might be necessary.&lt;&#x2F;p&gt;
&lt;p&gt;Status will now be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+root@fontaine ~ # zpool status foo
&lt;&#x2F;span&gt;&lt;span&gt;  pool: foo
&lt;&#x2F;span&gt;&lt;span&gt; state: DEGRADED
&lt;&#x2F;span&gt;&lt;span&gt;status: One or more devices has been taken offline by the administrator.
&lt;&#x2F;span&gt;&lt;span&gt;        Sufficient replicas exist for the pool to continue functioning in a
&lt;&#x2F;span&gt;&lt;span&gt;        degraded state.
&lt;&#x2F;span&gt;&lt;span&gt;action: Online the device using &amp;#39;zpool online&amp;#39; or replace the device with
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;#39;zpool replace&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;  scan: resilvered 80K in 0 days 00:00:01 with 0 errors on Sat Oct 17 00:34:15 2020
&lt;&#x2F;span&gt;&lt;span&gt;config:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NAME                      STATE     READ WRITE CKSUM
&lt;&#x2F;span&gt;&lt;span&gt;        foo                       DEGRADED     0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;          mirror-0                DEGRADED     0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            10400537847491037026  OFFLINE      0     0     0  was &#x2F;dev&#x2F;da1
&lt;&#x2F;span&gt;&lt;span&gt;            da2                   ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;errors: No known data errors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the &lt;code&gt;da1&lt;&#x2F;code&gt; line has changed &lt;code&gt;STATE&lt;&#x2F;code&gt; from &lt;code&gt;REMOVED&lt;&#x2F;code&gt; to &lt;code&gt;OFFLINE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Plug the disk back in, and run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+root@fontaine ~ # zpool online foo da1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And all is well:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;+root@fontaine ~ # zpool status foo
&lt;&#x2F;span&gt;&lt;span&gt;  pool: foo
&lt;&#x2F;span&gt;&lt;span&gt; state: ONLINE
&lt;&#x2F;span&gt;&lt;span&gt;  scan: resilvered 48K in 0 days 00:00:01 with 0 errors on Sat Oct 17 00:49:16 2020
&lt;&#x2F;span&gt;&lt;span&gt;config:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        NAME        STATE     READ WRITE CKSUM
&lt;&#x2F;span&gt;&lt;span&gt;        foo         ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;          mirror-0  ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            da1     ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;            da2     ONLINE       0     0     0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;errors: No known data errors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Yes WWW</title>
        <published>2020-10-15T00:00:00+00:00</published>
        <updated>2020-10-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/yes-www/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/yes-www/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/yes-www/">&lt;p&gt;Recently I changed the server config for this site such that
upon navigating to “gridbugs.org”, you are forwarded to
“www.gridbugs.org”. This was in response to reading
&lt;a href=&quot;https:&#x2F;&#x2F;www.yes-www.org&#x2F;why-use-www&#x2F;&quot;&gt;www.yes-www.org&lt;&#x2F;a&gt;
which explains the technical (and societal!) benefits to serving web content
from a subdomain (such as “www” but it can of course, be anything),
rather than a naked domain (such as “gridbugs.org”).&lt;&#x2F;p&gt;
&lt;p&gt;In the past I’ve used naked domains for my main sites, and
subdomains for spin-offs (such as my browser games at
&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&quot;&gt;games.gridbugs.org&lt;&#x2F;a&gt;.
I considered my reason for this and concluded that “it’s because short URLs are sexy”
and upon realising this, promptly halted the practice.&lt;&#x2F;p&gt;
&lt;p&gt;Well sort of. It &lt;em&gt;is&lt;&#x2F;em&gt; true that short URLs are sexy, but as long as web traffic
reaching the naked domain gets forwarded to the “www” (or whatever) subdomain,
you can still impress your friends with short URLs. They likely won’t even notice
the sneaky “www.” prepended to the domain name when they reach your site.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What if all your boot disks suddenly got wiped?</title>
        <published>2020-10-14T00:00:00+00:00</published>
        <updated>2020-10-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/what-if-all-your-boot-disks-suddenly-got-wiped/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/what-if-all-your-boot-disks-suddenly-got-wiped/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/what-if-all-your-boot-disks-suddenly-got-wiped/">&lt;p&gt;The other night, by a string of coincidences, I had an experience where
every hard drive I tried to use would fail. I’ve since recovered most of
them, but it got me thinking about how I would recover if all the unix
boot disks in my house were mysteriously wiped.&lt;&#x2F;p&gt;
&lt;p&gt;In at least the last 5 years, I’ve barely spared a thought for CDs, let alone use
one to install an operating system. Thus all my recent unix installs have involved &lt;code&gt;dd&lt;&#x2F;code&gt;-ing
a disk image file onto a USB stick, booting off it, and installing from there.
But &lt;code&gt;dd&lt;&#x2F;code&gt; is a unix program, so unix needs to be bootstrapped from something else.&lt;&#x2F;p&gt;
&lt;p&gt;My first ever unix install was in 2009 and it
involved using PowerISO running on Windows 7 to burn a Ubuntu (Karmic Koala I think)
install CD. At some point shortly after this, I started using Linux as a daily driver,
and a few years later optical disks faded into irrelevance. From that point onwards,
there’s an unbroken chain of using an existing unix installation to &lt;code&gt;dd&lt;&#x2F;code&gt; an install
environment for my next unix installation, though I suppose it’s
possible this chain was interrupted
by a mac with pre-installed MacOS at some point.&lt;&#x2F;p&gt;
&lt;p&gt;In practice, at some point, probably around 2013, I stopped distro-hopping and
settled on archlinux. I &lt;code&gt;dd&lt;&#x2F;code&gt;-ed myself an arch install thumb drive which I’ve
carried on my keyring ever since, and I used it for all subsequent installs.
If everything were wiped, and a situation were contrived that prevented me from
using a computer at work, or a friend’s computer to download and &lt;code&gt;dd&lt;&#x2F;code&gt; an install image?
Well I think I have an old DVD drive lying around, and a case of old CDs which I
think includes a Ubuntu Karmic Koala boot disk.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I broke some things</title>
        <published>2020-10-13T00:00:00+00:00</published>
        <updated>2020-10-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/i-broke-some-things/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/i-broke-some-things/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/i-broke-some-things/">&lt;p&gt;Last night I tried to set up a media server and managed to break just about
everything I touched. To start with the obvious, I got some hard drives mixed
up and accidentally wiped out the start of the disk where I store all my media.
That’s recoverable - I have some stuff backed up and it can all be downloaded
again with little time and effort.&lt;&#x2F;p&gt;
&lt;p&gt;Next up, I tried installing an old hard drive I had lying around, in the old
PC that I was attempting to set up as a media server. After plugging in the drive,
and getting half-way through the FreeBSD installation, the drive appeared to fail.
I went to restart, and the PC wouldn’t power on at all.
I tried all the obvious things and nothing worked. About an hour later it appeared
to recover on its own.&lt;&#x2F;p&gt;
&lt;p&gt;Finally I managed to get FreeBSD installed on an external hard drive. I booted it
up and started installing the packages I need for my media server. I attached a
brand new disk that I intended to fill with media, but my attempt to create and
format a partition failed, and then the disk stopped showing up at all in subsequent
reboots or in the Windows dual-boot that I maintain (on a separate disk).&lt;&#x2F;p&gt;
&lt;p&gt;Shortly afterwards the external hard drive I was running FreeBSD off stopped showing
up as a boot option. I haven’t dug too deeply into this yet.&lt;&#x2F;p&gt;
&lt;p&gt;The most worrying thing about this whole experience is the hour when the machine
didn’t turn on at all, and the fact that it recovered on its own. I suspect its
power supply is on the way out - it is about 8 years old, and the advise is to
replace power supplies after about 5 years.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;349&#x2F;&quot;&gt;Gratuitous xkcd:&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;i-broke-some-things&#x2F;success.png&quot; alt=&quot;success.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Formatting GUIDs in GPT header fields</title>
        <published>2020-10-12T00:00:00+00:00</published>
        <updated>2020-10-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/formatting-guids-in-gpt-header-fields/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/formatting-guids-in-gpt-header-fields/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/formatting-guids-in-gpt-header-fields/">&lt;p&gt;“GPT” stands for “GUID Partition Table”, and “GUID” stands for “Globally-Unique IDentifier”.
A GUID is a number generated according to the GUID specification, which is a method for
generating numbers such that it is very unlikely that any two thus generated numbers will
be the same.&lt;&#x2F;p&gt;
&lt;p&gt;GPT uses GUIDs to identify disks, partitions, and partition &lt;em&gt;types&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One normally writes a GUID as several dash-separated hexidecimal numbers.
An example GUID is &lt;code&gt;C12A7328-F81F-11D2-BA4B-00A0C93EC93B&lt;&#x2F;code&gt;. This particular
GUID is special, in that it indicates an “EFI System Partition” partition type.
This is the partition type that my tool will create, as it’s aimed at generating
UEFI-bootable disk images.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at an example UEFI-bootable disk, the &lt;em&gt;numeric&lt;&#x2F;em&gt; value for its partition type
is &lt;code&gt;0x3bc93ec9a0004bba11d2f81fc12a7328&lt;&#x2F;code&gt;. Looking closely at this number and the EFI GUID
&lt;code&gt;C12A7328-F81F-11D2-BA4B-00A0C93EC93B&lt;&#x2F;code&gt;, every byte (pair of hex digits) is present. The
order of fields is reversed, and the order of bytes within &lt;em&gt;some&lt;&#x2F;em&gt; fields is reversed.
I need to do some more digging to find out the general rule for encoding GUIDs in GPT
headers, though I suspect the pattern observable from this one example will suffice.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Encoding disk headers into disk images</title>
        <published>2020-10-11T00:00:00+00:00</published>
        <updated>2020-10-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/encoding-disk-headers-into-disk-images/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/encoding-disk-headers-into-disk-images/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/encoding-disk-headers-into-disk-images/">&lt;p&gt;My first attempt at implementing disk image creation feels messy.
Each type of header has a corresponding &lt;code&gt;struct&lt;&#x2F;code&gt; in the code base.
When reading headers from a disk, populating a &lt;code&gt;struct&lt;&#x2F;code&gt; with their
fields is an easy way to debug (in rust one can just &lt;code&gt;[derive(Debug)]&lt;&#x2F;code&gt;
on the &lt;code&gt;struct&lt;&#x2F;code&gt; and print each field name&#x2F;value pair).
For generating headers for new disk images however, populating the
header &lt;code&gt;struct&lt;&#x2F;code&gt; first then encoding it into a disk image file feels
like redundant work. In particular, when some of the header fields
are meant to contain a checksum of th remaining fields (as is the case
in GPT headers), these fields can only be populated once the header
is encoded as a byte array anyway. In such cases, I suspect I’ll have
an easier time generating the byte array directly rather than going
via a header &lt;code&gt;struct&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Gradually implementing a tool to create GPT FAT disk images</title>
        <published>2020-10-10T00:00:00+00:00</published>
        <updated>2020-10-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/gradually-implementing-a-tool-to-create-gpt-fat-disk-images/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/gradually-implementing-a-tool-to-create-gpt-fat-disk-images/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/gradually-implementing-a-tool-to-create-gpt-fat-disk-images/">&lt;p&gt;I’m slowly getting there. Today I added the ability to write the “Protective MBR”
to a file - the first 512 bytes of any GPT disk image. The only information it
contains is the size of the disk. Next up will be writing the GPT header, and
partition entry array.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>All game links on this site now point to itch.io</title>
        <published>2020-10-09T00:00:00+00:00</published>
        <updated>2020-10-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/all-game-links-on-this-site-now-point-to-itch-io/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/all-game-links-on-this-site-now-point-to-itch-io/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/all-game-links-on-this-site-now-point-to-itch-io/">&lt;p&gt;I updated all the posts on this site that previously linked to files.gridbugs.org or games.gridbugs.org
to point to &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;&quot;&gt;my itch.io page&lt;&#x2F;a&gt; instead. Some exceptions are works in progress,
and abandoned projects that I never plan to release, such as my &lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;abandoned-game-big&#x2F;&quot;&gt;top down side-scrolling engine&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>More of my 7DRLs are playable on itch.io</title>
        <published>2020-10-08T00:00:00+00:00</published>
        <updated>2020-10-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/more-of-my-7drls-are-playable-on-itch-io/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/more-of-my-7drls-are-playable-on-itch-io/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/more-of-my-7drls-are-playable-on-itch-io/">&lt;p&gt;Four of the five games I’ve made in the 7DRL game jam can be played in a browser,
and all are available for download on &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;&quot;&gt;my itch.io page&lt;&#x2F;a&gt;,
but in most cases I’d neglected to take advantage of the feature of itch that lets
browser version of the game be hosted in itch itself. When releasing games on itch
in the past, I’d uploaded downloadable versions of games, but elected to host the
browser versions on my own website and just include a link on the itch page for the game.&lt;&#x2F;p&gt;
&lt;p&gt;Tonight I uploaded in-browser-playable versions of all my 7DRLs (except for “Apocalypse Post” which can’t
be played in a browser), and set up itch so that the main page for each game has a button that starts an
itch-hosted in-browser version of the game.
I continue to host my games on &lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&quot;&gt;games.gridbugs.org&lt;&#x2F;a&gt;
(which now points to my new nearlyfreespeech site instead of AWS!), but I’m planning
to update all the links on this site an in the games’ git repos to refer itch instead.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Migrated browser games to nearlyfreespeech</title>
        <published>2020-10-07T00:00:00+00:00</published>
        <updated>2020-10-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/migrated-browser-games-to-nearlyfreespeech/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/migrated-browser-games-to-nearlyfreespeech/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/migrated-browser-games-to-nearlyfreespeech/">&lt;p&gt;After &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;i-accidentally-let-some-of-my-tls-certs-expire&#x2F;&quot;&gt;I accidentally let all my AWS TLS certs expire&lt;&#x2F;a&gt;, attempting to
play any games on games.gridbugs.org (such as &lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;skeleton-crew&quot;&gt;Skeleton Crew&lt;&#x2F;a&gt;)
results in a scary warning about security risks ahead. I took this opportunity to move more of my
stuff off amazon and onto my new favourite web hosting provider: &lt;a href=&quot;https:&#x2F;&#x2F;www.nearlyfreespeech.net&#x2F;&quot;&gt;nearlyfreespeech&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Currently all my browser games are playable on &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs-games.nfshost.com&#x2F;&quot;&gt;gridbugs-games.nfshost.com&lt;&#x2F;a&gt;.
I’ll update the DNS records for games.gridbugs.org in the coming days.
As an added bonus, there is now an index page (just the default apache index) which lists all the games!
This wasn’t possible when I was hosting with AWS because S3 has no concept of listing the files in a directory
when a directory lacks an index file.&lt;&#x2F;p&gt;
&lt;p&gt;I removed a work-in-progress game (“RIP”), renamed “meters” to “meters-below-the-ground”, and compressed the bump
and light map in the “top-down-side-scrolling-engine”, which I’ve also renamed to “abandoned-game-big”.
There are some references to these projects in various git repos and pages on this site, which I still need to
update.&lt;&#x2F;p&gt;
&lt;p&gt;I’m not going to migrate downloadable files for the games that are distributed as standalone binaries.
Instead, I’ll update all their download links to point to &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;&quot;&gt;my itch.io page&lt;&#x2F;a&gt; where
they can be downloaded (for an optional fee!), and where I don’t have to pay for the bandwidth!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>FAT32 FSInfo and its backup don&#x27;t always match</title>
        <published>2020-10-06T00:00:00+00:00</published>
        <updated>2020-10-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/fat32-fsinfo-and-its-backup-don-t-always-match/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/fat32-fsinfo-and-its-backup-don-t-always-match/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/fat32-fsinfo-and-its-backup-don-t-always-match/">&lt;p&gt;FAT32 defines a section named FSInfo at the start of the partition where the number of free
clusters, and the index of the next free clusters, are stored.
The spec stresses that this section is meant as a hint only, and implementations
must not rely on this information being accurate.
A second section contains a backup of FSInfo.&lt;&#x2F;p&gt;
&lt;p&gt;To learn more about FAT32, I formatted a partition on a USB stick on Linux using &lt;code&gt;mkfs.vfat&lt;&#x2F;code&gt;
and then &lt;code&gt;dd&lt;&#x2F;code&gt;’d the disk into a file. I did the same thing with another USB stick on FreeBSD
using &lt;code&gt;newfs_msdos&lt;&#x2F;code&gt;, and the FSInfo and backup FSInfo sections contain different values.
They are otherwise valid FSInfo sections; all the signatures are valid. But the data fields
differ.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve updated my disk image parsing tool to not care if the FSInfo sections don’t match.
I’m hoping this doesn’t mean that I’ve overlooked an important detail in the FAT32 spec.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>In praise of rEFInd</title>
        <published>2020-10-05T00:00:00+00:00</published>
        <updated>2020-10-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/in-praise-of-refind/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/in-praise-of-refind/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/in-praise-of-refind/">&lt;p&gt;In a recent update, Windows saw fit to mess with my EFI (boot) partition in such a way
that my Windows&#x2F;Linux dual-boot setup no longer functioned. When I turned on my PC, it
booted straight to Windows, rather than showing the GRUB menu first.
Poking around in my motherboard’s UEFI BIOS tool, and it appears “Secure Boot” has been
enabled, and some keys installed. I’m 90% sure that I didn’t set it up that way when I
built my PC about 5 years ago. The “default” boot image on my EFI partition also appeared
to have been updated in the last few days. Suspicious.&lt;&#x2F;p&gt;
&lt;p&gt;I tried setting the “default” boot image (“\EFI\bootx64.efi”) back to the grub image,
but this had no effect. Not too surprising - not all implementations follow this convention.
I then disabled secure boot. The only way to do this using my motherboard’s UEFI tool is to
delete the secure boot keys that Windows update seems to have installed. This made me a little
nervous, but if I had to pick between having a broken Windows install and a broken Linux install,
I’d forego Windows - all I use it for is playing games anyway.&lt;&#x2F;p&gt;
&lt;p&gt;I totally planned on breaking out an Archlinux live USB at this point and re-configuring UEFI,
but before going down this potential rabbit hole, I tried setting up the &lt;a href=&quot;http:&#x2F;&#x2F;www.rodsbooks.com&#x2F;refind&#x2F;&quot;&gt;rEFInd&lt;&#x2F;a&gt;
bootloader. It’s a tool that locates all the bootable images on in your EFI partition, and displays
a graphical menu to choose which one to boot. The &lt;a href=&quot;http:&#x2F;&#x2F;www.rodsbooks.com&#x2F;refind&#x2F;installing.html#windows&quot;&gt;Windows Installation Instructions&lt;&#x2F;a&gt;
worked perfectly, though the first time I rebooted after installing rEFInd it took me straight to Windows,
and the second time I forced it to run rEFInd via my motherboard’s UEFI tool. Now it runs rEFInd first.&lt;&#x2F;p&gt;
&lt;p&gt;A small quality of life feature I’m appreciative of is rEFInd remembers your last choice and selects it upon
subsequent boots. GRUB may have this setting but I never thought to look for it. This will mean that when Windows
decides to update and restart next time, it won’t reboot into Linux (the default selection in my GRUB menu), but
instead boot back into Windows to continue the update.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Getting back into bouldering</title>
        <published>2020-10-04T00:00:00+00:00</published>
        <updated>2020-10-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/getting-back-into-bouldering/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/getting-back-into-bouldering/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/getting-back-into-bouldering/">&lt;p&gt;During the peak of covid in NSW I stopped bouldering.
Yesterday I climbed for the first time in about 3 months.
My muscle memory still remembers how to climb, but my muscles themselves,
unsurprisingly, are struggling, especially my forearms.
I also seem to tire much more quickly than before.
This will pass. I’m going to start climbing weekly.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I accidentally let some of my TLS certs expire</title>
        <published>2020-10-03T00:00:00+00:00</published>
        <updated>2020-10-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/i-accidentally-let-some-of-my-tls-certs-expire/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/i-accidentally-let-some-of-my-tls-certs-expire/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/i-accidentally-let-some-of-my-tls-certs-expire/">&lt;p&gt;A few months ago I switched this site’s web hosting from AWS to nearlyfreespeech.
I set up new TLS certificates for gridbugs.org and www.gridbugs.org, which the site
now uses instead of the AWS certificates it used to use. So when I received warnings
from Amazon informing me that my TLS certificates were about to expire, I promptly
ignored them. I forgot that some additional domains - games.gridbugs.org and
files.gridbugs.org - are still hosted on AWS and still use the (now expired)
AWS certificates. Oops!&lt;&#x2F;p&gt;
&lt;p&gt;I use those domains to host games I’ve made, both downloadable and playable in-browser.
Rather than migrating all the games to nearlyfreespeech, I’ll set up redirects to
my &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;&quot;&gt;itch.io&lt;&#x2F;a&gt; page for all the games which I’ve released on
itch. The games which I never released, but which can only be played in a browser (mostly simple demos),
I’ll migrate to nearlyfreespeech. Small game demos that run natively, I’ll migrate as well.
All the new game projects I work on, I’ll make available exclusively through itch.
This is mostly because as I add music to newer games I make, their size can be large, and I don’t
want to use a ton of bandwidth should any of my games become wildly successful.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>KID___PER? (2,4,3,3,6)</title>
        <published>2020-10-02T00:00:00+00:00</published>
        <updated>2020-10-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/kid-per-24336/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/kid-per-24336/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/kid-per-24336/">&lt;p&gt;I look forward to the non-standard clues in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;David_Astle&quot;&gt;DA&lt;&#x2F;a&gt;’s
cryptic crossword in the SMH on Fridays.
I was delighted to see this clue today, simply because it shuns the conventional format for
clues (hence the “?” - there’s no distinction between the “straight part” ahd “cryptic part” of the clue).&lt;&#x2F;p&gt;
&lt;p&gt;The solution appears to be “NO REST FOR THE WICKED”, as the word “NAP” (“REST”) is removed from the
work “KIDNAPPER” in the clue, and witches, who are wicked, steal children (at least in Hansel and Gretel).
This required more “leaps” than most clues which I think is why I got such a rush of endorphins
upon solving it.&lt;&#x2F;p&gt;
&lt;p&gt;Reflecting on this, it feels like an example of &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;is-it-a-good-idea-or-are-you-just-proud-to-understand-it&#x2F;&quot;&gt;lending value to something just because it’s hard&lt;&#x2F;a&gt;.
It was satisfying to work out the answer to this clue, but rationally speaking, is it a “good clue”?
Does it even make sense to talk about “good clues” outside of the fact that solving them makes me happy?
Should I add it to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;cryptic-clues&quot;&gt;my list&lt;&#x2F;a&gt;?
“Good” or not, I think I’ll add it as an example of how unusual clues marked with a question mark can be.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Determining the size of a FAT32 partition</title>
        <published>2020-10-01T00:00:00+00:00</published>
        <updated>2020-10-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/determining-the-size-of-a-fat32-partition/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/determining-the-size-of-a-fat32-partition/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/determining-the-size-of-a-fat32-partition/">&lt;p&gt;I’m making a program that takes a list of files as an argument and creates a GPT&#x2F;FAT32 disk
image that contains them. The first step is determining how big the disk image needs to be.
This depends on the size of the files that will occupy it. I take all the files, determine
their size padded to the size of a FAT32 allocation unit (called a “cluster”). For each file,
the user of my program can specify a path within the disk image where the file will be placed.
I determine the number of entries in each directory implied by the path to each file, and how
many clusters each directory will occupy on disk. Then I calculate the size of the FAT table
and partition headers.&lt;&#x2F;p&gt;
&lt;p&gt;Now that I can find out the amount of storage required for the partition, the next steps will be
writing the GPT header and footer on either side of a zeroed-out partition-sized region.
Then I’ll write the FAT headers, FAT table, and copy the data for each file into the disk image.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I no longer feel like an imposter</title>
        <published>2020-09-30T00:00:00+00:00</published>
        <updated>2020-09-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/i-no-longer-feel-like-an-imposter/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/i-no-longer-feel-like-an-imposter/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/i-no-longer-feel-like-an-imposter/">&lt;p&gt;I realised several months ago that I don’t feel imposter syndrome at my current job.&lt;&#x2F;p&gt;
&lt;p&gt;A couple of years ago I found myself writing ocaml for a certain trading firm which prides
itself on only hiring the smartest people. I often felt like I
somehow fluked their notoriously difficult interviews, and that I was somehow not
“smart enough” to work there.&lt;&#x2F;p&gt;
&lt;p&gt;I’m trying to understand why this feeling has stopped at my current job. It’s not like I’m not still surrounded
by smart people. When talking about recruiting, management still loves to say how we only hire the best.&lt;&#x2F;p&gt;
&lt;p&gt;Being a startup, I feel like I’ve had a much more direct influence on the
success of this company that anywhere I’ve worked before, so there’s more immediate evidence
that I’m doing something right. If I had doubts about whether I was good enough at my job,
they’ve promptly been quelled.&lt;&#x2F;p&gt;
&lt;p&gt;I also find that I’ve started to reject the notion of “smart
enough”. Since we have so many problems to solve, often it’s more important to write dumb,
unsurprising, maintainable code &lt;em&gt;quickly&lt;&#x2F;em&gt; than it is to implement a perfect solution.
Doing things the “smart way” often means writing code that takes longer to implement, and
is harder for others to understand, often for little practical benefit.&lt;&#x2F;p&gt;
&lt;p&gt;A symptom of imposter syndrome is asking fewer questions for fear of appearing to not know something.
This was debilitating! It’s liberating to no longer get self-conscious about whether my co-workers think
I know something. I’m asking far more questions than I used to and learning a ton. Even outside of work,
I find that when friend says a word I don’t know, nowadays I just ask them what it means.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>FAT32 FSInfo</title>
        <published>2020-09-29T00:00:00+00:00</published>
        <updated>2020-09-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/fat32-fsinfo/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/fat32-fsinfo/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/fat32-fsinfo/">&lt;p&gt;The “FSInfo” sector is the second sector of a FAT32-formatted partition.
It contains a count of the number of free clusters in the partition, and
the index of the next free cluster. I added a FSInfo parser to my disk
image tools, and a new tool &lt;code&gt;info&lt;&#x2F;code&gt; for printing metadata about the disk
and partition to help me understand the header contents of the disk images
I’m analysing.&lt;&#x2F;p&gt;
&lt;p&gt;The next step is to start generating disk images with files inside them.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cryptic Clues Repository</title>
        <published>2020-09-28T00:00:00+00:00</published>
        <updated>2020-09-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/cryptic-clues-repository/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/cryptic-clues-repository/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/cryptic-clues-repository/">&lt;p&gt;I’ve started a git repository for storing my favourite cryptic crossword clues.
I try to solve at least one cryptic crossword per week, and I’d like to gradually
build up a list of the clues I find most entertaining, and instructions of how
to solve them. For now I’m storing clues and their solutions in a markdown file,
but I’ll likely change this to a structured format like yaml or toml so I can
write simple queries later on. The repo is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;cryptic-clues&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I saw an eel in Moore Park</title>
        <published>2020-09-27T00:00:00+00:00</published>
        <updated>2020-09-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/i-saw-an-eel-in-moore-park/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/i-saw-an-eel-in-moore-park/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/i-saw-an-eel-in-moore-park/">&lt;p&gt;A few weeks ago I saw an eel in the Moore Park pond, floating partially
out of the water. I wasn’t sure it was alive so I tapped it with a stick
and it swam away and alarmed a nearby swan. I haven’t seen the eel since.
I hope it’s ok.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Have I been using vi keys wrong my whole life?</title>
        <published>2020-09-26T00:00:00+00:00</published>
        <updated>2020-09-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/have-i-been-using-vi-keys-wrong-my-whole-life/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/have-i-been-using-vi-keys-wrong-my-whole-life/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/have-i-been-using-vi-keys-wrong-my-whole-life/">&lt;p&gt;Or at least the 10 years since I started using Vim?&lt;&#x2F;p&gt;
&lt;p&gt;Back in my dvorak days (read: until about a month ago), I would rebind
“HTNS” (the “JKL;” keys) to the vi navigation keys (typically “HJKL”).
Since switching to qwerty, I adopted the habit of moving my right hand
over the “HJKL” keys when in normal mode, and moving it back to “JKL;”
when switching to insert mode.&lt;&#x2F;p&gt;
&lt;p&gt;Today it was pointed out to me that I could try leaving my hand on the
“JKL;” keys in normal mode, and reach my index finger over to press the
“H” key when I want to navigate to the left. My right index finger now
presses both the “J” and “H” keys when navigating, which is the same as
when typing, and seems obvious in hindsight.&lt;&#x2F;p&gt;
&lt;p&gt;In general I find this change has made it easier to use Vim. The biggest
benefit I’ve noticed is pressing “I” to enter insert mode requires the
same hand movement than pressing “I” to type the letter “I”, as my hand
is in the same place in normal and insert mode.&lt;&#x2F;p&gt;
&lt;p&gt;Hooray for more muscle memory to unlearn and relearn. The fact that I
must now stop and think for a moment before using vi keys will hopefully
mean I use them in fewer circumstances where other forms of navigation would
be more appropriate.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Crunch</title>
        <published>2020-09-25T00:00:00+00:00</published>
        <updated>2020-09-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/crunch/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/crunch/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/crunch/">&lt;p&gt;My last few posts have been general because I haven’t had time to make any
meaningful progress on personal projects due to spending almost
every waking hour at work. I work at a smallish autonomous vehicle startup
with a biggish board meeting next week and everyone is working frantically
to put together some cool demos.&lt;&#x2F;p&gt;
&lt;p&gt;Six months in at my first real startup, the most important lesson I’ve learnt
and put into practice is to not over engineer. I remember a time not so long
ago when I would take pride in building complex things. This job has taught
me the value of simplicity - of building the most basic, stupid version of
the thing you need, and only when it’s absolutely necessary (spoiler: it won’t be)
do you do the extra 80% of the work to squeeze out that last 20% of functionality.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What exactly is a &quot;Functional Programming Language&quot;</title>
        <published>2020-09-24T00:00:00+00:00</published>
        <updated>2020-09-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/what-exactly-is-a-functional-programming-language/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/what-exactly-is-a-functional-programming-language/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/what-exactly-is-a-functional-programming-language/">&lt;p&gt;I don’t believe the term “functional” is a meaningful description of a programming language.
It’s hard to come up with a definition of the term that includes all the languages that
brand themselves as “functional” that wouldn’t include &lt;em&gt;all&lt;&#x2F;em&gt; modern programming languages.&lt;&#x2F;p&gt;
&lt;p&gt;In a so called functional language, you’ll certainly find closures and first class functions,
but name a general purpose language from the last 30 years that doesn’t have these features.
It’s likely you be &lt;em&gt;encouraged&lt;&#x2F;em&gt; to avoid mutable state, but rare are the languages that
&lt;em&gt;prevent&lt;&#x2F;em&gt; mutation (and these are the &lt;em&gt;purely&lt;&#x2F;em&gt; functional languages - a term which is well-defined)
The standard library will probably come with a collection of persistent, immutable
data structures, but any language can have such a library.&lt;&#x2F;p&gt;
&lt;p&gt;Recursion will likely be the
&lt;em&gt;preferred&lt;&#x2F;em&gt; (or perhaps only) form of iteration, and if you’re lucky the language implementation
(or even the language &lt;em&gt;spec&lt;&#x2F;em&gt; if you’re extra lucky) will employ tail-call optimisation so
you don’t (necessarily!) blow up your stack when calling functions recursively.&lt;&#x2F;p&gt;
&lt;p&gt;Algebraic data types, pattern matching, and expressive type systems all frequently make appearances
in functional languages. Lisp is a notable exception which has none of these.
It doesn’t seem prudent to conflate these terms with functional programming though.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps “functional” is a useful word for describing a design space attractor. In practice, it
may turn out that all the features listed here go well together. Maybe the term was more meaningful
back in a time when the programming language ecosystem was less diverse, and the functional&#x2F;imperative dichotomy
was stronger. Has the success of functional languages of the past, and their subsequent influence
on the design of new languages, ultimately led to the term losing all meaning?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Is it a good idea, or are you just proud to understand it?</title>
        <published>2020-09-23T00:00:00+00:00</published>
        <updated>2020-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/is-it-a-good-idea-or-are-you-just-proud-to-understand-it/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/is-it-a-good-idea-or-are-you-just-proud-to-understand-it/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/is-it-a-good-idea-or-are-you-just-proud-to-understand-it/">&lt;p&gt;I think among engineers there is a tendency to overvalue those ideas
whose complexity can serve as a kind of proof of intellect.
It’s tempting to forgo a simple, easy-to-understand solution,
in place of a terse solution requiring more understanding, or even a more
flowery, perhaps more general solution. It may feel good at first to
show off your knowledge of programming to your fellow engineers who
review your code. Maybe teach them a thing or two. But I claim it’s
rarely merited. Just give a tech talk instead!&lt;&#x2F;p&gt;
&lt;p&gt;I first noticed myself doing this when I came to realize that in scala,
“for loops” behave as syntactic sugar for &lt;code&gt;.map&lt;&#x2F;code&gt;, &lt;code&gt;.flatMap&lt;&#x2F;code&gt;, and &lt;code&gt;.foreach&lt;&#x2F;code&gt;.
For a brief period after this, I over-used them.
It felt “cute” to write a loop over an iterator which just built up a
new iterator (effectively mapping a function over the iterator).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;newIter &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{ i &amp;lt;- someIterator } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; do something with i
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This made me feel clever because understanding that code depended on
understanding that this loop is effectively:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;newIter &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; someIterator.map(i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;* do something with i *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…and that the operation on &lt;code&gt;i&lt;&#x2F;code&gt; will be deferred until &lt;code&gt;newIter&lt;&#x2F;code&gt; is actually
iterated (if ever). This was especially confusing because in pretty much
every other language, for loops run immediately in all cases rather than
having behaviour that varies based on the type of the value on the right-hand-side
of the &lt;code&gt;&amp;lt;-&lt;&#x2F;code&gt; symbol (the more I use scala, the more I detest it).&lt;&#x2F;p&gt;
&lt;p&gt;It felt good to write the &lt;code&gt;for&lt;&#x2F;code&gt; version of the code above because I got
to exercise some newfound knowledge. But the requirement of knowledge that
made this code so satisfying to write makes it difficult to read.&lt;&#x2F;p&gt;
&lt;p&gt;So now I’m conscious of this pathology and aspire to write code that’s only
as complicated as it needs to be to solve the problem on hand, rather than
demanding needless cognitive load for cognitive load’s own sake.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Checking backup regions in gpt fat disk image tools</title>
        <published>2020-09-22T00:00:00+00:00</published>
        <updated>2020-09-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/checking-backup-regions-in-gpt-fat-disk-image-tools/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/checking-backup-regions-in-gpt-fat-disk-image-tools/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/checking-backup-regions-in-gpt-fat-disk-image-tools/">&lt;p&gt;The FAT filesystem and GPT partition table both set aside part of the partition and disk for storing a backup
of header information. At the start of the disk, and the start of FAT partitions, there are header data structures
that contain metadata about the data stored in the remainder of the disk&#x2F;partition. The start of a partition&#x2F;disk
is more likely to be accidentally overwritten than the end, so to help recover from such accidents, FAT and GPT
both store copies of their headers at the end of the partition&#x2F;disk as well.&lt;&#x2F;p&gt;
&lt;p&gt;When I first started working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;gpt-fat-disk-image&quot;&gt;tools for reading FAT partitions from GPT disk images&lt;&#x2F;a&gt;
I added support for reading backup structures, as I was focusing
on completeness. At some point, in the interest of building the simplest thing that would do the job, I removed all
the code for dealing with these regions. Now I’m working on writing disk images rather than just reading them, and I need
to generate backup regions of my own.&lt;&#x2F;p&gt;
&lt;p&gt;To test my understanding of backup regions, I’ll start by adding support for checking the validity of backup regions back to my
tools that read files from FAT&#x2F;GPT disk images.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Separable Convolution Kernels</title>
        <published>2020-09-21T00:00:00+00:00</published>
        <updated>2020-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/separable-convolution-kernels/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/separable-convolution-kernels/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/separable-convolution-kernels/">&lt;p&gt;In the field of image processing, &lt;em&gt;convolution&lt;&#x2F;em&gt; refers to an operation which takes an image (a 2d array of pixels)
and computes a new image of the same dimensions by considering each pixel of the input image, and a relatively
small number of nearby pixels, and computing a weighted sum of their values, independently for each channel.
The pixel channel values in the resulting image are these weight sums.
Some typical applications of convolution are blurring and edge sharpening.&lt;&#x2F;p&gt;
&lt;p&gt;The choices of which nearby pixels to consider, and what weights to use in the weighted sum, are dictated by
a &lt;em&gt;convolution kernel&lt;&#x2F;em&gt;, which takes the form of a 2d array of real numbers.
To compute the result of a convolution of a single pixel channel value, centre the kernel on that pixel,
with the “cells” of the kernel aligned to the pixels of the image,
and for each cell of the kernel, multiply the value in the cell with the value in the pixel underneath.
Add up the results.
Convolving an entire image now looks like sliding the kernel over every pixel in the image and computing
all weighted sums. If the kernel is partially off the edge, it’s common to imagine the final row&#x2F;column
of the image continuing forever in all directions (there are alternatives, but they’re out of scope here).&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;em&gt;separable convolution kernel&lt;&#x2F;em&gt; can be expressed as a 1d array. The convolution process now looks a little
different. Rather than sliding a rectangular kernel (a 2d array) around an image, instead, slide a
horizontal strip (a 1d array), and calculate all weighted sums as before. This gives you an intermediate
image of the same size as the input image. Now repeat the process taking the intermediate image as input,
only this time treat the 1d kernel as a &lt;em&gt;vertical&lt;&#x2F;em&gt; strip.&lt;&#x2F;p&gt;
&lt;p&gt;Gaussian blurring is an example of a separable kernel. There is a NxN 2d array that can be convolved with
an image to apply a Gaussian blur effect, however there is also a N-length 1d array that can be convolved
twice as above. The benefit of using the 1d array is that the convolution can be done in &lt;code&gt;2*N*K*C&lt;&#x2F;code&gt; multiplications
for an image with &lt;code&gt;K&lt;&#x2F;code&gt; pixels and &lt;code&gt;C&lt;&#x2F;code&gt; channels, instead of &lt;code&gt;N*N*K*C&lt;&#x2F;code&gt; multiplications as would be required for
the 2d convolution.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Move semantics and argument parsing</title>
        <published>2020-09-20T00:00:00+00:00</published>
        <updated>2020-09-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/move-semantics-and-argument-parsing/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/move-semantics-and-argument-parsing/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/move-semantics-and-argument-parsing/">&lt;p&gt;In my initial design for &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;meap&quot;&gt;meap&lt;&#x2F;a&gt;, the &lt;code&gt;Parser&lt;&#x2F;code&gt; trait contained this
method which extracts typed values from an untyped low-level parser output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;parse_low_level&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    self,
&lt;&#x2F;span&gt;&lt;span&gt;    ll: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;low_level::LowLevelParserOutput,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn error::Error&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the parser is consumed by this method; After calling this method on a parser, the parser
is destroyed. This allows the parser to contain values which move into its parsed output.
Two examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a parser wrapping another parser, giving it a default value. The default value stored in the parser can
be moved into the result in the case where it’s needed, preventing the need to copy the data from the
parser into its output.&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;Map&lt;&#x2F;code&gt; combinator, which wraps a parser, and calls a function on its output. I want to make the function
a &lt;code&gt;FnOnce&lt;&#x2F;code&gt; - the most permissive of rust’s function traits - but calling a &lt;code&gt;FnOnce&lt;&#x2F;code&gt; consumes it. If the
mapped function was in a field of the &lt;code&gt;Map&lt;&#x2F;code&gt; combinator, the entire combinator would need to be consumed
in order to call the &lt;code&gt;FnOnce&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This worked perfectly fine up until I added help messages. If the argument parser finds that its input is
invalid, it stops parsing and prints a help message, including details on arguments that it accepts.
E.g.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;Usage: sand [OPTIONS] PERIOD
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Args:
&lt;&#x2F;span&gt;&lt;span&gt;    PERIOD     how long to wait
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Options:
&lt;&#x2F;span&gt;&lt;span&gt;    [-i, --interval DURATION]     how frequently to update the display (Default: 1s)
&lt;&#x2F;span&gt;&lt;span&gt;    [-h, --help]                  print help message
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem is that if we’re part-way through parsing, and encounter an error, part of the
parser has already been consumed by the parsing process, and so can’t be re-traversed to
generate a help message.&lt;&#x2F;p&gt;
&lt;p&gt;This requirement led to me changing the type of the method above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;parse_low_level&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;    ll: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;low_level::LowLevelParserOutput,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn error::Error&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the parser is mutably borrowed, so it remains in scope after parsing.
This is slightly unfortunate as now some errors that were previously caught at compile-time
are now caught at runtime. In particular, for parsers that contain some value that is moved
out during parsing, running the parser twice will panic as the necessary values are gone.
Previously it was not possible to run the parser twice, as it was destroyed by running.&lt;&#x2F;p&gt;
&lt;p&gt;Note that running the parser twice is a mistake, but now it’s possible (though still not easy!)
to make this mistake.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Map&lt;&#x2F;code&gt; combinator is now defined as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Map&amp;lt;T, U, F: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;FnOnce&lt;&#x2F;span&gt;&lt;span&gt;(T) -&amp;gt; U, PT: Parser&amp;lt;Item = T&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    parser_t: PT,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Its implementation of &lt;code&gt;parse_low_level&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;parse_low_level&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;    ll: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;low_level::LowLevelParserOutput,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;((self.f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;function has already been called&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))(
&lt;&#x2F;span&gt;&lt;span&gt;        self.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;parser_t&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;parse_low_level&lt;&#x2F;span&gt;&lt;span&gt;(ll)&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A similar technique is employed for default combinators.
Put the “moving out” data inside an &lt;code&gt;Option&lt;&#x2F;code&gt;, and move the data out of the &lt;code&gt;Option&lt;&#x2F;code&gt;
when needed, setting the &lt;code&gt;Option&lt;&#x2F;code&gt; to &lt;code&gt;None&lt;&#x2F;code&gt; in the process, and crashing if it was
already &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Parsing command-line arguments with meap in real programs</title>
        <published>2020-09-19T00:00:00+00:00</published>
        <updated>2020-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-command-line-arguments-with-meap-in-real-programs/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-command-line-arguments-with-meap-in-real-programs/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-command-line-arguments-with-meap-in-real-programs/">&lt;p&gt;Now that &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;meap&quot;&gt;meap&lt;&#x2F;a&gt; is feature complete, I’ve started
adding it to some personal projects as a replacement for my previous command-line
argument parser - &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;simon&quot;&gt;simon&lt;&#x2F;a&gt;.
Meap is intentionally more conservative in its features than simon, so switching
was not always straightforward.&lt;&#x2F;p&gt;
&lt;p&gt;The first program I adapted was &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;sand&quot;&gt;sand&lt;&#x2F;a&gt;, which is a
replacement for &lt;code&gt;sleep&lt;&#x2F;code&gt; that waits for a given amount of time, but gives you a running
update of the amount of time left. It doesn’t have very complicated arguments, so
this was not super interesting.&lt;&#x2F;p&gt;
&lt;p&gt;The second program I changed was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;slime99&quot;&gt;slime99&lt;&#x2F;a&gt;, which
is a game I made for the “7 Day Roguelike” gamejam earlier this year.
This was a little more involved. In particular, it revealed a use case I hadn’t planned for:
choosing at most one of a set of possibilities. When run in a terminal, slime99 accepts an
argument telling what colour space to run in (24-bit rgb, 256 colours, greyscale).
This seemed like a common enough use case, so I added some combinators and a macro to
make this simpler. The code in slime99 that parses this argument now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;ColEncodeChoice {
&lt;&#x2F;span&gt;&lt;span&gt;    TrueColour,
&lt;&#x2F;span&gt;&lt;span&gt;    Rgb,
&lt;&#x2F;span&gt;&lt;span&gt;    Greyscale,
&lt;&#x2F;span&gt;&lt;span&gt;    Ansi,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ColEncodeChoice {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;parser&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl meap::Parser&amp;lt;Item = &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;meap::Parser;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;ColEncodeChoice::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        meap::choose_at_most_one&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;true-colour&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;some_if&lt;&#x2F;span&gt;&lt;span&gt;(TrueColour),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;rgb&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;some_if&lt;&#x2F;span&gt;&lt;span&gt;(Rgb),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;greyscale&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;some_if&lt;&#x2F;span&gt;&lt;span&gt;(Greyscale),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;ansi&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;some_if&lt;&#x2F;span&gt;&lt;span&gt;(Ansi),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_default_general&lt;&#x2F;span&gt;&lt;span&gt;(TrueColour)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Problems, not Solutions, Part 2</title>
        <published>2020-09-18T00:00:00+00:00</published>
        <updated>2020-09-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/problems-not-solutions-part-2/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/problems-not-solutions-part-2/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/problems-not-solutions-part-2/">&lt;p&gt;In a conversation with some coworkers a few days ago I said something that sounded clever. I’m writing it down
so I don’t forget it.&lt;&#x2F;p&gt;
&lt;p&gt;“If you’re a manager and you want your team to solve a &lt;em&gt;problem&lt;&#x2F;em&gt;, but you prescribe a &lt;em&gt;solution&lt;&#x2F;em&gt;, chances are
your team will implement the solution without actually solving the problem.”&lt;&#x2F;p&gt;
&lt;p&gt;I’ve only ever encountered this pathology from the point of view of an engineer, and recently I’ve noticed myself
getting much better at pushing back when a particular solution is forced upon me. Obedience is a curse that we
all need to unlearn. Whenever anyone on my team blindly goes and does something just because their boss (or &lt;em&gt;their&lt;&#x2F;em&gt; boss)
told them so, we all pay the price of needing to maintain more code that usually only half solves the problem.
The project gets slowed down because people are spending time focussing on satisfying specific requests rather than
just solving the problem in the most appropriate way.&lt;&#x2F;p&gt;
&lt;p&gt;I only hope I remember this advice if I ever find myself in a management position.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;problems-not-solutions&#x2F;&quot;&gt;Link to Part 1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Meap Help Messages</title>
        <published>2020-09-17T00:00:00+00:00</published>
        <updated>2020-09-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/meap-help-messages/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/meap-help-messages/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/meap-help-messages/">&lt;p&gt;My command-line parsing library - &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;meap&quot;&gt;meap&lt;&#x2F;a&gt; -
can now generate help messages such as this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run --example macro -- -h
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;examples&#x2F;macro -h`
&lt;&#x2F;span&gt;&lt;span&gt;Usage: target&#x2F;debug&#x2F;examples&#x2F;macro [OPTIONS] STRING [DURATION ...]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Args:
&lt;&#x2F;span&gt;&lt;span&gt;    STRING           a string
&lt;&#x2F;span&gt;&lt;span&gt;    [DURATION ...]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Options:
&lt;&#x2F;span&gt;&lt;span&gt;    [-i INT]
&lt;&#x2F;span&gt;&lt;span&gt;    [-f, --flag-with-a-really-long-name]
&lt;&#x2F;span&gt;&lt;span&gt;                flag with a really long name
&lt;&#x2F;span&gt;&lt;span&gt;    [-c ...]
&lt;&#x2F;span&gt;&lt;span&gt;    [-h, --help]                     print help message
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This completes the minimal viable set of features for this library, so I did
an &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;meap&quot;&gt;initial release&lt;&#x2F;a&gt; on crates.io.
Feature-wise, I still need to add default values for optional arguments.
I also want to spend some time writing documentation and tests.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>roglkpl</title>
        <published>2020-09-16T00:00:00+00:00</published>
        <updated>2020-09-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/roglkpl/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/roglkpl/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/roglkpl/">&lt;p&gt;Muscle memory is weird.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;roglkpl!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;{:?}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, args), &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; rustc: cannot find macro `roglkpl` in this scope
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;roglkpl&lt;&#x2F;code&gt; is what you get if you try to type &lt;code&gt;println&lt;&#x2F;code&gt; when someone changes your
keymap from dvorak to qwerty without you realising. Since starting to teach my
hands to type in qwerty about two weeks ago, I occasionally find myself lapsing
back into my old way of typing, and sometimes get a few words in before realising
that what I’m typing makes no sense. It still requires constant conscious effort
to type in qwerty, and a brief lapse in concentration can lead to…&lt;code&gt;roglkpl&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>New phone, and an arduous journey bootstrapping LineageOS</title>
        <published>2020-09-15T00:00:00+00:00</published>
        <updated>2020-09-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/new-phone-and-an-arduous-journey-bootstrapping-lineageos/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/new-phone-and-an-arduous-journey-bootstrapping-lineageos/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/new-phone-and-an-arduous-journey-bootstrapping-lineageos/">&lt;p&gt;After 5 years of gradually degrading service (as expected of any phone, sadly), my
LG Nexus 5 succumbed to a stuck power button, as has been the fate of the Nexus 5 of
everyone I know who owned one. I replaced it with a OnePlus 6 (from 2018, refurbished I think),
and naturally I spent the evening installing LineageOS - a custom android ROM.&lt;&#x2F;p&gt;
&lt;p&gt;The install could have gone smoother. Typically, you use &lt;code&gt;fastboot&lt;&#x2F;code&gt; to flash a custom “recovery image”,
boot into recovery mode, and then install the main OS and Google Play (and possibly other Google apps).
Lineage’s recovery image didn’t boot for me - possibly because my firmware was out of date.
I briefly thought I bricked my phone, but then found that powering on with volume-up pressed
takes you directly to fastboot from which you can re-flash the recovery image and try again. I ended up installing
TWRP - an alternative to Lineage’s recovery image - and installing Lineage through that. For whatever reason,
the Google Play installer thought the installed version of android was incorrect (8 instead of 10).
I ended up booting LineageOS without Google Play (which can’t be installed after the OS has booted
the first time for some reason). This incidentally replaced TWRP with Lineage’s recovery image,
and this time I was then able to boot into that, and &lt;em&gt;reinstall&lt;&#x2F;em&gt; LineageOS &lt;em&gt;and&lt;&#x2F;em&gt; Google Play successfully.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Renamed &quot;args_af&quot; to &quot;meap&quot;</title>
        <published>2020-09-14T00:00:00+00:00</published>
        <updated>2020-09-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/renamed-args-af-to-meap/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/renamed-args-af-to-meap/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/renamed-args-af-to-meap/">&lt;p&gt;I renamed my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;meap&quot;&gt;work-in-progress command-line argument parsing library&lt;&#x2F;a&gt;
from “args_af” to “meap”. Meap stands for &lt;strong&gt;M&lt;&#x2F;strong&gt;inimal &lt;strong&gt;E&lt;&#x2F;strong&gt;xtensible &lt;strong&gt;A&lt;&#x2F;strong&gt;rgument &lt;strong&gt;P&lt;&#x2F;strong&gt;arser.
It’s minimal in the sense that it has no external dependencies and CLOCs in at a little over
1000 lines of rust. It’s extensible in the sense that the &lt;code&gt;Parser&lt;&#x2F;code&gt; trait defined in the library
can be implemented by types from 3rd party code to create custom combinators.
A second trait, &lt;code&gt;SingleArgParser&lt;&#x2F;code&gt;, can be used to implement custom basic arguments.&lt;&#x2F;p&gt;
&lt;p&gt;The main reason for the rename is the “AF” in “args_af” stood for “Applicative Functor”, which
is a term often found in “functional programming” literature to describe types which a function
of multiple arguments may be (essentially) mapped. An argument parser is an applicative functor because it’s
possible to take a pair of separate parsers and combine them into a single parser which yields
a pair of values (&lt;code&gt;both&lt;&#x2F;code&gt;), AND it’s possible to take a parser yielding values of some type, and a
function from that type to some other type, and combine them into a new parser which yields
values of the new type (&lt;code&gt;map&lt;&#x2F;code&gt;). To technically qualify as an applicative functor there would need
to be a way to take a value and build from it a parser that yields that value (&lt;code&gt;pure&lt;&#x2F;code&gt; in the literature),
but there doesn’t seem to be any point in actually including this function in meap.
The &lt;code&gt;apply&lt;&#x2F;code&gt; function that’s normally used to define applicative functors is left out as it can
be implement in terms of &lt;code&gt;pure&lt;&#x2F;code&gt;, &lt;code&gt;map&lt;&#x2F;code&gt;, and &lt;code&gt;both&lt;&#x2F;code&gt;, and is frankly less useful in this domain.&lt;&#x2F;p&gt;
&lt;p&gt;While the fact that an argument parser is an applicative functor is an interesting observation,
it’s of little practical use to anyone who just wants to parse arguments.
I expect may programmers have never encountered the term before, and
&lt;em&gt;I’d&lt;&#x2F;em&gt; sure feel uncomfortable using a library with an unfamiliar acronym in its name.&lt;&#x2F;p&gt;
&lt;p&gt;I also initially found it hilarious to say that my library was “Args AF!”, but it got old
pretty fast and some potential users may find it off-putting.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Quality of life in command-line argument parsing</title>
        <published>2020-09-13T00:00:00+00:00</published>
        <updated>2020-09-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/quality-of-life-in-command-line-argument-parsing/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/quality-of-life-in-command-line-argument-parsing/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/quality-of-life-in-command-line-argument-parsing/">&lt;p&gt;I added a quality-of-life macro to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;args-af&quot;&gt;args_af&lt;&#x2F;a&gt;
to make it easier to specify arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Args {
&lt;&#x2F;span&gt;&lt;span&gt;    optional_int: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    string: String,
&lt;&#x2F;span&gt;&lt;span&gt;    flag: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Args {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        (args_af::args_map&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                optional_int &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;opt_opt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;i&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                string &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pos_req&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;STRING&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                flag &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;f&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    optional_int,
&lt;&#x2F;span&gt;&lt;span&gt;                    string,
&lt;&#x2F;span&gt;&lt;span&gt;                    flag,
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;parse_env&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…which generates code like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Args {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;opt_opt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;i&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;both&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pos_req&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;STRING&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;both&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;f&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|((optional_int, string), flag)&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                optional_int,
&lt;&#x2F;span&gt;&lt;span&gt;                string,
&lt;&#x2F;span&gt;&lt;span&gt;                flag,
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;parse_env&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the chained calls to &lt;code&gt;both&lt;&#x2F;code&gt;, and the destructured nested pairs in the argument list
to the mapped function. The benefit of the &lt;code&gt;args_map&lt;&#x2F;code&gt; macro is it lets you associate the
specification of each argument with the variable it will be assigned to. Also it removes
the need to explicitly unpack the nested tuple created by repeated calls to &lt;code&gt;both&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Parsing my first command-line arguments</title>
        <published>2020-09-12T00:00:00+00:00</published>
        <updated>2020-09-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-my-first-command-line-arguments/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-my-first-command-line-arguments/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/parsing-my-first-command-line-arguments/">&lt;p&gt;Today I got &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;args-af&quot;&gt;args_af&lt;&#x2F;a&gt; to the point that it can parse
command line arguments.
Here’s a simple program that parses arguments with my library:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;args_af::prelude::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(foo, verbosity): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;opt_req&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;both&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flag_multi&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;short&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;v&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;verbose&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;parse_env&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, foo, verbosity);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here’s how it looks in action:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run --example basic -- --foo=bar -vvvv --verbose
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;examples&#x2F;basic --foo=bar -vvvv --verbose`
&lt;&#x2F;span&gt;&lt;span&gt;bar 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next step is getting the library to generate help messages.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I was briefly wrong about list&#x27;s behaviour as an applicative</title>
        <published>2020-09-11T00:00:00+00:00</published>
        <updated>2020-09-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/i-was-briefly-wrong-about-list-s-behaviour-as-an-applicative/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/i-was-briefly-wrong-about-list-s-behaviour-as-an-applicative/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/i-was-briefly-wrong-about-list-s-behaviour-as-an-applicative/">&lt;p&gt;For today’s post I originally set out writing an explanation of the concept of &lt;em&gt;Applicative Functors&lt;&#x2F;em&gt;.
Partway through writing it, I was making an example involving lists, and it occurred to me that
contrary to my intuition up until that point, you cannot use &lt;code&gt;apply&lt;&#x2F;code&gt; to effectively &lt;code&gt;map&lt;&#x2F;code&gt; a function
of two arguments over a pair of lists, as one would typically do with &lt;code&gt;zipWith&lt;&#x2F;code&gt;.
If you try, your code will typecheck, but you’ll end up calling the function on all combinations of
values from the two lists, rather than just corresponding pairs. What’s weird is that for as long
as I’ve known that “lists are monads” I’ve internalised the fact that &lt;code&gt;bind&lt;&#x2F;code&gt;-ing on lists
enumerates all combinations of values, and it would be weird for &lt;code&gt;apply&lt;&#x2F;code&gt; and &lt;code&gt;bind&lt;&#x2F;code&gt; to behave differently.
And in hindsight it’s painfully obvious that an operation
as abstract as &lt;code&gt;apply&lt;&#x2F;code&gt; doesn’t care about such paltry details as the &lt;em&gt;length&lt;&#x2F;em&gt; of lists, as &lt;code&gt;zipWith&lt;&#x2F;code&gt;
does.&lt;&#x2F;p&gt;
&lt;p&gt;What gave it away was that I realised I expected &lt;code&gt;(pure (1+)) &amp;lt;*&amp;gt; [1, 2, 3]&lt;&#x2F;code&gt; to add 1 to each number in the RHS
(which it does) but I also expected &lt;code&gt;(pure (+)) &amp;lt;*&amp;gt; [1, 2, 3] &amp;lt;*&amp;gt; [4, 5, 6]&lt;&#x2F;code&gt; to be &lt;code&gt;[5, 7, 9]&lt;&#x2F;code&gt;.
I wrote down as much, and this set off all sorts of internal consistency checks in my head because
these two things can’t be true at the same time. That’s the whole point of doing these daily posts.
It seems like it’s easier to be wrong in your head than on paper.&lt;&#x2F;p&gt;
&lt;p&gt;And if anyone is reading this and wondering about the results of the expressions above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Prelude&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; (pure (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Prelude&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; (pure &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;(+)&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now go read &lt;a href=&quot;http:&#x2F;&#x2F;learnyouahaskell.com&#x2F;functors-applicative-functors-and-monoids#applicative-functors&quot;&gt;learnyouahaskell&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Low-Level and High-Level Command-Line Argument Parsing</title>
        <published>2020-09-10T00:00:00+00:00</published>
        <updated>2020-09-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/low-level-and-high-level-command-line-argument-parsing/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/low-level-and-high-level-command-line-argument-parsing/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/low-level-and-high-level-command-line-argument-parsing/">&lt;p&gt;A natural way to approach the problem of command-line argument parsing is to split it into two parts.&lt;&#x2F;p&gt;
&lt;p&gt;Start with a simple parser that takes the raw sequence of strings given to a
program when it starts (its arguments), along with a description of what which arguments to look
for, and produces a structure which can answer queries of the form “How many times was the flag &lt;code&gt;-v&lt;&#x2F;code&gt;
passed to the program?”, or “List all the strings that immediately succeed the flag &lt;code&gt;--input&lt;&#x2F;code&gt;”.
If you want your command-line argument parser to treat certain patterns specially, such as interpreting
&lt;code&gt;-abc&lt;&#x2F;code&gt; as &lt;code&gt;-a -b -c&lt;&#x2F;code&gt;, or treat everything after the first &lt;code&gt;--&lt;&#x2F;code&gt; as literal arguments (not flags), now
is the time to implement that behaviour. At this level the only types are strings, and no arity
rules are considered (e.g optional vs required vs variadic arguments).&lt;&#x2F;p&gt;
&lt;p&gt;The low level parser faces the raw argument list, and the high level parser faces the humans who use
and program the application whose arguments are being parsed. A programmer should be able to specify
the program’s arguments declaratively, including arity and descriptions,
and treat arguments as if they have types besides string.
Users should be able to print a message describing the arguments to the program (e.g. when running
the program with &lt;code&gt;--help&lt;&#x2F;code&gt;). This help text should be generated automatically from the declarative
command-line argument spec.&lt;&#x2F;p&gt;
&lt;p&gt;When the parser runs, the high level parser will configure a low level parser to look for particular
arguments in the raw argument list. The low level parser then runs, and produces a queriable structure.
The high level parser then queries this structure to bring into being the arguments described in
the declarative spec.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>New argument parsing library</title>
        <published>2020-09-09T00:00:00+00:00</published>
        <updated>2020-09-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/new-argument-parsing-library/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/new-argument-parsing-library/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/new-argument-parsing-library/">&lt;p&gt;A few years ago I made &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;simon&quot;&gt;simon&lt;&#x2F;a&gt; - a rust library
for parsing command-line arguments. Looking at it with fresh eyes, I’ve decided
that it’s over-engineered, and places too much emphasis on generality and
theoretical niceness rather than being useful.&lt;&#x2F;p&gt;
&lt;p&gt;Today I started working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;args-af&quot;&gt;args_af&lt;&#x2F;a&gt;
which is my attempt at making a minimal, pragmatic command-line parser.
The biggest difference from simon is combinators only work on specific
parsers, rather than generalising to all parsers. It’s done this way to
simplify generating help messages. Like simon, it uses the idea of
“Applicative Functors” (hence the “af”), but it’s less in-your-face
about it, and only really uses them to combine a collection of parsers
into a single parser of a collection of values.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Re-added MBR parsing to my GPT disk image library</title>
        <published>2020-09-08T00:00:00+00:00</published>
        <updated>2020-09-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/re-added-mbr-parsing-to-my-gpt-disk-image-library/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/re-added-mbr-parsing-to-my-gpt-disk-image-library/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/re-added-mbr-parsing-to-my-gpt-disk-image-library/">&lt;p&gt;When I first started working on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mini_gpt&quot;&gt;mini_gpt&lt;&#x2F;a&gt;,
the first thing I made was a parser for the disk image’s Master Boot Record (MBR).
This felt natural, as the MBR is the first piece of data stored on a hard drive,
regardless of whether it has a GPT partition table. But decoding the MBR isn’t
necessary to determine the byte range of the first partition on a GPT disk, which
at the time of writing is the only function exposed by mini_gpt.
Thus, in the interest of aggressive minimalism, I removed MBR parsing from the
library.&lt;&#x2F;p&gt;
&lt;p&gt;That is until today, when I added it back. The next piece of functionality I’ll
be adding to the library will be generating disk images, and generated disk
images must include an MBR. It will also be useful to check the validity of
disk images by reading their MBR and asserting it is sane.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>First thoughts after playing Epistory</title>
        <published>2020-09-07T00:00:00+00:00</published>
        <updated>2020-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/first-thoughts-after-playing-epistory/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/first-thoughts-after-playing-epistory/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/first-thoughts-after-playing-epistory/">&lt;p&gt;Last weekend I played the first chapter of &lt;a href=&quot;http:&#x2F;&#x2F;www.epistorygame.com&#x2F;&quot;&gt;Epistory - Typing Chronicles&lt;&#x2F;a&gt;.
It’s light RPG where the primary form of interaction is typing words.
For example to open a chest you type several randomly chosen words which appear above it.
I started playing to improve my qwerty typing, but I’ll continue playing because I find the
premise far more engaging than I expected.&lt;&#x2F;p&gt;
&lt;p&gt;I never payed much attention to typing games. When first learning to type I played some educational
games which featured typing mechanics as a way to teach you to type.
Epistory is not educational, and instead uses typing mechanics to enhance gameplay and narrative.&lt;&#x2F;p&gt;
&lt;p&gt;In order to survive a combat encounter, you must rapidly type a specified sequence of words
for each of the numerous enemies charging toward the player character.
The player must accurately and quickly perform a task requiring manual dexterity (ie. typing
on a keyboard) in order for their avatar to perform dexterity-based
combat maneuvers, thus aligning the experience of player and character.&lt;&#x2F;p&gt;
&lt;p&gt;The “literal” narrative of Epistory (from what I’ve seen so far) is about restoring
life to a corrupted woods, which is a fairly standard RPG plot. This is just
a medium for the actual plot, told sparingly in tidbits of flavour text
and the occasional voice over. The words you type to interact with the world are
randomly chosen, and don’t comprise meaningful sentences, but the pool from which the words
are chosen varies throughout the game, and depending on the situation, often serving
to reinforce the tone of the narrative.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Word navigation in Vim</title>
        <published>2020-09-06T00:00:00+00:00</published>
        <updated>2020-09-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/word-navigation-in-vim/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/word-navigation-in-vim/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/word-navigation-in-vim/">&lt;p&gt;Since I’m retraining my hands to type in qwerty rather than dvorak, I figure I’ll
use this as a chance to kick some bad habits in Vim - my text editor of choice.
Today’s lesson is “word navigation”.&lt;&#x2F;p&gt;
&lt;p&gt;Vim gives you several different ways to move the cursor.
Word navigation lets you skip to the start and ends of words.
The relevant keys (in normal mode):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;w&lt;&#x2F;code&gt; moves the cursor to the start of the next word after the cursor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;e&lt;&#x2F;code&gt; moves the cursor to the next word-end after the cursor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;b&lt;&#x2F;code&gt; moves the cursor to the previous word-start before the cursor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The capital-letter versions of these commands do the same thing, except treat
whitespace as the only word separator rather than all punctuation.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Reading and listing files with my disk image tools</title>
        <published>2020-09-05T00:00:00+00:00</published>
        <updated>2020-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/reading-and-listing-files-with-my-disk-image-tools/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/reading-and-listing-files-with-my-disk-image-tools/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/reading-and-listing-files-with-my-disk-image-tools/">&lt;p&gt;Today I completed the tools for reading and listing files from a gpt&#x2F;fat disk image.
The souce code is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;gpt-fat-disk-image&quot;&gt;here&lt;&#x2F;a&gt;.
Next I need to make a tool that generates gpt&#x2F;fat disk images containing a specified
collection of files.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Qwerty Quirks</title>
        <published>2020-09-04T00:00:00+00:00</published>
        <updated>2020-09-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/qwerty-quirks/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/qwerty-quirks/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/qwerty-quirks/">&lt;p&gt;Here are two complications of switching to qwerty that I’m dealing with.&lt;&#x2F;p&gt;
&lt;p&gt;In vim, and many other tools, the HJKL keys are used for navigation in lieu of (or as well as) arrow keys.
To use vim with dvorak, these keys must be remapped. When setting this up, I elected to use the JKL; keys
instead, as this are where your right hand normally rests while typing. In qwerty I want to use the default
navigation keys again, which are one space to the left of where I’m used to placing my hands.
Navigation keys work in “normal” mode, and the “I” key is used to enter “insert” mode. Since “I” is above
HJKL, I use my right hand to press “I” as well as HJKL. After entering insert mode, I move my hand back
to the JKL; keys. Relative to the placement of my right hand, the “I” key is in a different place depending
on whether I’m in insert or normal mode.&lt;&#x2F;p&gt;
&lt;p&gt;The second problem is in tmux. I used to use ctrl-u as the prefix, which in dvorak means I was pressing
the physical f key. I can’t change the prefix to ctrl-f as I use ctrl-f to search files in vim.
The default prefix is ctrl-b, but “B” is so far from the control key that I have to press “B” with my
right hand (and control with my left). I’ve changed the prefix to ctrl-x instead, as that has no use
to me in other terminal-bound programs. Since the tmux prefix is something I use all the time, I frequently
find myself pressing ctrl-f instead.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Relearning Qwerty</title>
        <published>2020-09-03T00:00:00+00:00</published>
        <updated>2020-09-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/relearning-qwerty/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/relearning-qwerty/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/relearning-qwerty/">&lt;p&gt;For the past 10 years I’ve used a dvorak keyboard, but I’m currently trying to switch
back to qwerty. I switched to dvorak on a whim. I’m switching back to simplify my
software configuration, in particular, to remove the need to rebind vi-keys in all applications that
support them. It’s not clear which keymap is superior. I have a sense that typing
on dvorak felt “smoother”, but it’s hard to be scientific about such evaluations.&lt;&#x2F;p&gt;
&lt;p&gt;One day in to using qwerty again, and thus far the experience has been humbling and
extremely frustrating!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Disk image tool no longer reads entire image</title>
        <published>2020-09-02T00:00:00+00:00</published>
        <updated>2020-09-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-no-longer-reads-entire-image/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-no-longer-reads-entire-image/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-no-longer-reads-entire-image/">&lt;p&gt;In the original version of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;gpt-fat-disk-image&quot;&gt;my disk image tool&lt;&#x2F;a&gt;
I read the entire image file into memory once before processing the image. This was convenient
but for large files it requires a lot of memory and took several seconds. Now I dynamically
seeks the image file and only reads what it needs to. I also deleted a bunch of code in an
attempt to keep things as simple as possible. Currently the tool just lists the files in the
root directory. Next step is to list the files at a specified directory.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Disk image tool progress</title>
        <published>2020-09-01T00:00:00+00:00</published>
        <updated>2020-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/disk-image-tool-progress/">&lt;p&gt;I’m making steady progress on my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;gpt-fat-disk-image&quot;&gt;gpt fat disk image tools&lt;&#x2F;a&gt; project.
As of tonight I can list the “long names” of files in the root directory of the first partition on the disk image.
The first milestone will be when I have a tool that can list the files under a given path rather than just the root.
The next step will be removing the need to load the entire image into a huge buffer before processing it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating and mounting a FAT32 partition in a GPT disk on FreeBSD</title>
        <published>2020-08-31T00:00:00+00:00</published>
        <updated>2020-08-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/creating-and-mounting-a-fat32-partition-in-a-gpt-disk-on-freebsd/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/creating-and-mounting-a-fat32-partition-in-a-gpt-disk-on-freebsd/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/creating-and-mounting-a-fat32-partition-in-a-gpt-disk-on-freebsd/">&lt;p&gt;To test my disk image tool, I set up a spare USB stick with a GPT partition
table and FAT32 partition. Doing this on FreeBSD meant learning about a couple of
new tools. All the necessary tools are part of the base system, so no installation
is necessary. This was written based on FreeBSD 12.1.&lt;&#x2F;p&gt;
&lt;p&gt;Plug in a USB hard drive, and watch the output of &lt;code&gt;dmesg&lt;&#x2F;code&gt; to determine its name.
In my case the drive was named &lt;code&gt;&#x2F;dev&#x2F;da1&lt;&#x2F;code&gt;. The following commands will destroy anything
previously on that drive. Double check that the file passed to these commands is
corresponds to the disk you plugged in!&lt;&#x2F;p&gt;
&lt;p&gt;These commands require root.&lt;&#x2F;p&gt;
&lt;p&gt;Clear any existing partition table.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# gpart destroy -F &#x2F;dev&#x2F;da1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make a new GPT partition table.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;gpart create -s GPT &#x2F;dev&#x2F;da1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make a new 200mb partition of type “efi”.
The new partition will have a device node &lt;code&gt;&#x2F;dev&#x2F;da1p1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# gpart add -s 200M -t efi &#x2F;dev&#x2F;da1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Format the new partition with the FAT32 filesystem.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# newfs_msdos -F 32 -c 1 &#x2F;dev&#x2F;da1p1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Mount the partition, at &lt;code&gt;&#x2F;mnt&lt;&#x2F;code&gt; allowing user 1001 (me) access.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# mount_msdosfs -u 1001 &#x2F;dev&#x2F;da1p1 &#x2F;mnt&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then as myself (uid 1001), create a file on the disk.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ echo &amp;quot;Hello, World!&amp;quot; &amp;gt; &#x2F;mnt&#x2F;hello.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, to make a disk image for the purpose of testing the tool, run (as root):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# dd if=&#x2F;dev&#x2F;da1 of=&#x2F;tmp&#x2F;test.img bs=1m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Beware that the resulting file (&lt;code&gt;&#x2F;tmp&#x2F;test.img&lt;&#x2F;code&gt;) will be the size of the hard drive!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Image Creation Tool - First Steps</title>
        <published>2020-08-30T00:00:00+00:00</published>
        <updated>2020-08-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/image-creation-tool-first-steps/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/image-creation-tool-first-steps/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/image-creation-tool-first-steps/">&lt;p&gt;I’ve started working on a new personal project: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;gpt-fat-disk-image&quot;&gt;GPT FAT Disk Image Tools&lt;&#x2F;a&gt;.
That’s a boring name for a boring (in a good way!) piece of software.
It’s going to be a modest collection of simple tools for working with images of hard drives
containing &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GUID_Partition_Table&quot;&gt;GPT Partition Tables&lt;&#x2F;a&gt;
where the first partition is formatted with a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File_Allocation_Table&quot;&gt;FAT Filesystem&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The problem it solves is the following. When doing x86 OS development, I frequently want to run my code in
an emulator&#x2F;VM such as qemu. In order to boot an operating system on an emulator, one must present a
disk image for the emulator to boot from.
Modern PCs use a firmware interface named &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unified_Extensible_Firmware_Interface&quot;&gt;UEFI&lt;&#x2F;a&gt;.
Compared to its predecessor &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;BIOS&quot;&gt;BIOS&lt;&#x2F;a&gt;, it presents a higher-level of abstraction
to boot code, and rather than loading and executing code from the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Master_boot_record&quot;&gt;Master Boot Record&lt;&#x2F;a&gt;
of your hard drive, it loads a file from one of a handful of pre-defined locations (such as &lt;code&gt;&#x2F;EFI&#x2F;BOOT&#x2F;BOOTX64.EFI&lt;&#x2F;code&gt;)
from the first partition of the hard drive. The hard drive must have a GPT partition table, and its first partition
must be formatted with a FAT filesystem (there appears to be some flexibility as to &lt;em&gt;which&lt;&#x2F;em&gt; FAT is used).&lt;&#x2F;p&gt;
&lt;p&gt;The process of creating a disk image containing a GPT partition table with a FAT-formatted partition
is harder than it needs to be.
The &lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;UEFI&quot;&gt;osdev wiki page on UEFI&lt;&#x2F;a&gt;
gives a list of ways to create a UEFI-compatible disk image,
organized by OS and whether or not they require root.
I want my hobby OS to have a &lt;code&gt;Makefile&lt;&#x2F;code&gt; rule than builds a bootable disk image,
and running build tools as root is dangerous,
and there’s no reason creating or formatting a disk image should require root.
I frequently bounce between linux and freebsd, so I need a platform-independent solution.&lt;&#x2F;p&gt;
&lt;p&gt;GPT and FAT are both fairly simple and well-documented standards.
So far I can decode GPT and FAT headers, and list the files in the root directory of of FAT12 and FAT16 partitions.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>My keyboard backlight works!</title>
        <published>2020-08-29T00:00:00+00:00</published>
        <updated>2020-08-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/my-keyboard-backlight-works/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/my-keyboard-backlight-works/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/my-keyboard-backlight-works/">&lt;p&gt;About a month ago I switch to FreeBSD on my laptop - a Lenovo Thinkpad T470.
After an evening of messing around, I managed to get all the hardware working
with the exception of the keyboard backlight. I resigned myself to live without
this feature if necessary, and figured I could always add support for it myself.
It works fine on linux, so the driver is likely open source and I can use it
as a reference.&lt;&#x2F;p&gt;
&lt;p&gt;Well it turns out that won’t be necessary. A quick search for “freebsd thinkpad keyboard backlight”
yielded &lt;a href=&quot;https:&#x2F;&#x2F;support.lenovo.com&#x2F;au&#x2F;en&#x2F;solutions&#x2F;ht104451&quot;&gt;this lenovo support page&lt;&#x2F;a&gt;
as the first result, which has nothing to do with FreeBSD, but did solve my problem.
Fn+space toggles the keyboard backlight on thinkpads, and it seems to be supported out of the box
(or possibly due to enabling the &lt;code&gt;acpi_ibm&lt;&#x2F;code&gt; module).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;my-keyboard-backlight-works&#x2F;key.jpg&quot; alt=&quot;key.jpg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So &lt;em&gt;that’s&lt;&#x2F;em&gt; what that symbol means.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Planning to make a simple disk image creator</title>
        <published>2020-08-28T00:00:00+00:00</published>
        <updated>2020-08-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/planning-to-make-a-simple-disk-image-creator/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/planning-to-make-a-simple-disk-image-creator/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/planning-to-make-a-simple-disk-image-creator/">&lt;p&gt;Several times in the past few weeks I’ve been frustrated by the lack of a tool
for generating a disk image containing a partition with a filesystem containing
a set of given files. Such a tool would be very useful in OS development.
Bootboot’s &lt;code&gt;mkbootimg&lt;&#x2F;code&gt; tool, and grubs &lt;code&gt;grub-mkrescue&lt;&#x2F;code&gt; do something similar to
what I want, but both with some pretty major caveats, and  there doesn’t seem to be a
standard, general purpose, platform independent way of doing this.
I want to spend some time this weekend working out whether it would be feasible
to make this tool myself, targeting GPT partition tables, and the FAT32 filesystem,
as that’s what’s required to make a disk image that’s bootable by a UEFI system,
which is the use case I have in mind.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Should I make my own bootloader?</title>
        <published>2020-08-27T00:00:00+00:00</published>
        <updated>2020-08-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/should-i-make-my-own-bootloader/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/should-i-make-my-own-bootloader/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/should-i-make-my-own-bootloader/">&lt;p&gt;On the road to setting up basic memory-management for my hobby OS, I found that
the bootloader I’ve elected to use (&lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;bztsrc&#x2F;bootboot&quot;&gt;bootboot&lt;&#x2F;a&gt;)
doesn’t tell the booting kernel about all the available physical memory. In particular
it omits the memory regions which it uses to store the initial paging hierarchy which
it sets up before starting the kernel. Looking at its source code, this appears to
be by design, though I don’t understand why it’s necessary.&lt;&#x2F;p&gt;
&lt;p&gt;I want my project to be easy to build on at least linux and freebsd. With the
exception of the &lt;code&gt;mkbootimg&lt;&#x2F;code&gt; tool packaged with bootboot (for generating bootable disk images), the only packages required
to build the OS are GNU binutils, the netwide assembler (though I’m planning on switching
to GNU assembler), and qemu (if you want to run the OS in an emulator&#x2F;VM).&lt;&#x2F;p&gt;
&lt;p&gt;Dropping bootboot would mean losing &lt;code&gt;mkbootimg&lt;&#x2F;code&gt; (unless I implemented a bootboot-compliant bootloader
(bootboot is a &lt;em&gt;protocol&lt;&#x2F;em&gt; as well as a reference implementation)). The specific problem which &lt;code&gt;mkbootimg&lt;&#x2F;code&gt;
solves is taking a binary file containing a compiled kernel (an ELF file) as input, and producing as output
a hard disk image with a GPT partition table, whose first partition is FAT32 formatted,
and inside that partition resides a bootloader UEFI file (understood by the system’s UEFI firmware),
and the kernel ELF. Every alternative tool I’ve found for doing this is specific to linux.
The &lt;code&gt;grub&lt;&#x2F;code&gt; bootloader comes with a tool &lt;code&gt;grub-mkrescue&lt;&#x2F;code&gt; which is a popular way to make bootable disk images
for hobby OS projects, but the grub no longer exists in freebsd. You can also make bootable disk image by
&lt;code&gt;fdisk&lt;&#x2F;code&gt;-ing a regular file, &lt;code&gt;mkvs.vfat&lt;&#x2F;code&gt;-ing a partition onto it, and mounting the partition to copy
the relevant files to it, but this again is different between linux and bsd, and worse - it requires running
commands as root (mounting&#x2F;unmounting the partition from the disk image). A sorry state of affairs indeed!&lt;&#x2F;p&gt;
&lt;p&gt;Finally, the whole point of this project was for me to learn more about systems programming,
and a lot of the messy details of booting on x86 are taken care of by bootboot.&lt;&#x2F;p&gt;
&lt;p&gt;So I’m probably going to make a minimal x86 UEFI bootloader and disk image creator,
using bootboot and &lt;code&gt;mkbootimg&lt;&#x2F;code&gt; as a reference.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fixing bugs in sample code</title>
        <published>2020-08-26T00:00:00+00:00</published>
        <updated>2020-08-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/fixing-bugs-in-sample-code/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/fixing-bugs-in-sample-code/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/fixing-bugs-in-sample-code/">&lt;p&gt;In the last day I’ve found bugs in two different kernel code samples I’ve been using
as a reference for my own hobby OS. I’ve done by best to correct them.&lt;&#x2F;p&gt;
&lt;p&gt;The first was in &lt;a href=&quot;https:&#x2F;&#x2F;blog.llandsmeer.com&#x2F;tech&#x2F;2019&#x2F;07&#x2F;21&#x2F;uefi-x64-userland.html&quot;&gt;this blog post&lt;&#x2F;a&gt;
which contains (among other things) an example of how to set up a Global Descriptor Table (GDT)
and Task State Segment (TSS), but it mixed up the code and data segments when installing the GDT,
and forgot to set the most-significant 16 bits of the TSS address in its GDT descriptor.
I’ve emailed the author with details.&lt;&#x2F;p&gt;
&lt;p&gt;Second issue was in &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;bztsrc&#x2F;bootboot&quot;&gt;bootboot&lt;&#x2F;a&gt; which is the bootloader
I’m using to boot my hobby OS. It includes a sample “hello world” c kernel which declares a
&lt;code&gt;extern char* environment&lt;&#x2F;code&gt; pointing to a string containing kernel arguments, whose &lt;em&gt;address&lt;&#x2F;em&gt; is specified
in a linker script, but treats &lt;code&gt;environment&lt;&#x2F;code&gt; as if its &lt;em&gt;value&lt;&#x2F;em&gt; was the address of the argument string
(it should have been a &lt;code&gt;char&lt;&#x2F;code&gt; array). I made a pull request to address this.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Quick&#x27;n&#x27;dirty user-level switching</title>
        <published>2020-08-25T00:00:00+00:00</published>
        <updated>2020-08-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/quick-n-dirty-user-level-switching/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/quick-n-dirty-user-level-switching/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/quick-n-dirty-user-level-switching/">&lt;p&gt;My goal for the last couple of days has been getting my hobby OS project to the point where
it can switch into user-mode. I was technically at that point yesterday, but with an
unsatisfying caveat: the instant the processor entered user-mode (by means of the &lt;code&gt;sysret&lt;&#x2F;code&gt; instruction)
it would page fault, and for a reasons I still don’t understand, my interrupt handler wasn’t invoked.&lt;&#x2F;p&gt;
&lt;p&gt;Today I managed to get user-level to (deliberately) infinitely loop. I can use a debugger to verify
that the processor is in-fact in user-mode. To prevent the fault upon entering user-mode, I adjusted
some access flags in the paging hierarchy to permit the processor to access the memory containing
the user program and stack, while the processor is in user-mode.&lt;&#x2F;p&gt;
&lt;p&gt;I was wrong about the bootloader’s ELF-loading. I incorrectly assumed that it would set up paging
to match the virtual addresses specified in an ELF-file, but it only loads code&#x2F;data into a specific
region of virtual memory, and sets up paging for that region. This means in order to have the user
program be loaded at its expected virtual address, I need to identify unused physical memory
and map some of it at this address.&lt;&#x2F;p&gt;
&lt;p&gt;In the interest of just getting something simple working, I’m currently setting access bits
such that user-mode has access to some code from the kernel, and the kernel’s stack.
That way I can just write a &lt;code&gt;while(1);&lt;&#x2F;code&gt; function in the kernel code, and run the &lt;code&gt;sysret&lt;&#x2F;code&gt; instruction
such that it “returns” to user-mode at the beginning of this function.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>x86 Basic Interrupt Handling Kind of Working</title>
        <published>2020-08-24T00:00:00+00:00</published>
        <updated>2020-08-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/x86-basic-interrupt-handling-kind-of-working/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/x86-basic-interrupt-handling-kind-of-working/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/x86-basic-interrupt-handling-kind-of-working/">&lt;p&gt;My hobby OS adventure has led to the need to handle interrupts.
In x86, you set up a data structure called an “Interrupt Descriptor Table” (IDT)
which tells the hardware which function to call in response to different interrupts.
My setup kind of works; I can trigger an interrupt with the &lt;code&gt;int&lt;&#x2F;code&gt; instruction, or
cause a page fault in kernel mode by accessing unmapped memory, and see that my interrupt handler is invoked.
For some reason immediately after switching to user mode a page fault is generated (unsurprising as nothing is mapped user-accessible yet),
but my handler is &lt;em&gt;not&lt;&#x2F;em&gt; invoked. No idea why this could be!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Global Descriptor Table</title>
        <published>2020-08-23T00:00:00+00:00</published>
        <updated>2020-08-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/global-descriptor-table/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/global-descriptor-table/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/global-descriptor-table/">&lt;p&gt;In x86 processors, the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Global_Descriptor_Table&quot;&gt;Global Descriptor Table&lt;&#x2F;a&gt;
is a data structure that stores characteristics of regions of memory known as “segments”.
Example characteristics are the start address of the segment, the size of the segment, and access flags,
such as whether the segment is writable or executable.
Back in the days of 16-bit addresses, the ability to dynamically switch the current segment
allowed programmers to effectively address more 64k.&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays, in 64-bit mode, a Global Descriptor Table must still be set up, largely for legacy reasons it seems.
Certain instructions, notably those which move control between distant virtual address (such as returning
from a system call), take a segment index as an argument, and change the current &lt;em&gt;segment&lt;&#x2F;em&gt; in addition
to the current &lt;em&gt;instruction pointer&lt;&#x2F;em&gt; address.&lt;&#x2F;p&gt;
&lt;p&gt;Typically the GDT has at least 2 entries (in addition to the
mandatory null entry at index 0) - one for code, and a second for data. I’m not sure whether it’s necessary
to have one such pair for the kernel, and a second pair of segments for user-mode. My current goal is to get
the kernel-to-user-mode switch to happen &lt;em&gt;at all&lt;&#x2F;em&gt;, then go over everything I’m doing and make sure I’m doing
it “right”. Once I have a basic user-mode “thread” running, I’ll do a longer write-up explaining how to get
from zero to this point.&lt;&#x2F;p&gt;
&lt;p&gt;A page that turned out to be of great practical use:
&lt;a href=&quot;https:&#x2F;&#x2F;blog.llandsmeer.com&#x2F;tech&#x2F;2019&#x2F;07&#x2F;21&#x2F;uefi-x64-userland.html&quot;&gt;Builing a UEFI x64 kernel from scratch: A long trip to userspace&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Trampolining</title>
        <published>2020-08-22T00:00:00+00:00</published>
        <updated>2020-08-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/trampolining/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/trampolining/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/trampolining/">&lt;p&gt;Today I solved an os-dev problem I’d been stuck on for a few days.
In my hobby OS project, I want the bootable image to contain both the kernel code, and the code of the
initial user-level application, packed into a single ELF file, which the bootloader loads before
starting the kernel. In order for the kernel to (eventually) hand control over to the user program,
it needs to know the user program’s entry point. I have linker script that describes the (virtual)
address space layout of the user and kernel memory, which the bootloader instantiates.
My original plan was to use the linker to make a symbol available in the kernel code which refers
to the entry point of the user program (ie. it’s &lt;code&gt;_start&lt;&#x2F;code&gt; function’s address), but since user and
kernel virtual addresses are conventionally very far apart, this turned out to be non-trivial.&lt;&#x2F;p&gt;
&lt;p&gt;I think I have a solution, though I’m yet to fully test it out (some other things have got in the way).
The plan is the following: Add a new section to the ELF with a tiny bit of code at the start that just
jumps to the user program’s entry point. Something like&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;; the user &amp;quot;_start&amp;quot; function is renamed to &amp;quot;__user__start&amp;quot; to avoid name conflicts with kernel code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;__user__start
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;bits 64
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;section &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;.user.trampoline
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;jmp &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;__user__start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This solves the problem because unlike the user’s &lt;code&gt;_start&lt;&#x2F;code&gt; function, which could be located anywhere
within the user program’s &lt;code&gt;.text&lt;&#x2F;code&gt; section, we can tell the linker to put the above code at the beginning
of a brand new section dedicated just for it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span&gt;. = user_base;
&lt;&#x2F;span&gt;&lt;span&gt;.user.trampoline : &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0x1000&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    *(.user.trampoline)
&lt;&#x2F;span&gt;&lt;span&gt;} :user
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This introduces a &lt;code&gt;user_base&lt;&#x2F;code&gt; symbol which can be &lt;code&gt;extern&lt;&#x2F;code&gt;-ed in kernel code, so when the kernel is
ready, it can switch to user mode and move execution to the address referred to by the symbol &lt;code&gt;user_base&lt;&#x2F;code&gt;.
Execution will then &lt;em&gt;bounce&lt;&#x2F;em&gt; to the actual user entry point by means of the &lt;code&gt;jmp __user__start&lt;&#x2F;code&gt; instruction.&lt;&#x2F;p&gt;
&lt;p&gt;This technique is known as “trampolining”.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>More fun with linking</title>
        <published>2020-08-21T00:00:00+00:00</published>
        <updated>2020-08-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/more-fun-with-linking/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/more-fun-with-linking/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/more-fun-with-linking/">&lt;p&gt;I managed to resolve my problem from &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;i-need-to-go-learn-more-about-elf-and-static-linking&#x2F;&quot;&gt;yesterday&lt;&#x2F;a&gt;, though I’m still not
satisfied that I understand why it &lt;em&gt;now&lt;&#x2F;em&gt; works, so it’s possible that it just works by accident.
Evidently there’s still a lot I need to learn about linking.&lt;&#x2F;p&gt;
&lt;p&gt;A new problem I ran into is working out the entry point of the user program from the kernel linked
into the same ELF (binary).
This is necessary for the kernel to start a user-level thread, whose initial program counter will
be this entry point.
My original plan was to use the &lt;code&gt;_start&lt;&#x2F;code&gt; symbol from the user program
(renamed using objcopy), which after relocation will contain the address I want.
This doesn’t appear to “just work” the way I expected, so there’s clearly even more I still need
to learn about linking!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I need to go learn more about ELF and static linking</title>
        <published>2020-08-20T00:00:00+00:00</published>
        <updated>2020-08-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/i-need-to-go-learn-more-about-elf-and-static-linking/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/i-need-to-go-learn-more-about-elf-and-static-linking/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/i-need-to-go-learn-more-about-elf-and-static-linking/">&lt;p&gt;I’m working out the shortest path from a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;hello-kernel&quot;&gt;kernel-mode program that prints “Hello, World!”&lt;&#x2F;a&gt;
and something that could conceivably by called an OS kernel.
The next step is to launch a user-mode program that makes a &lt;em&gt;system call&lt;&#x2F;em&gt; that prints
“Hello, World!” inside the kernel.&lt;&#x2F;p&gt;
&lt;p&gt;The current problem I’m facing is getting a second program (in addition to the kernel)
loaded into memory during boot. I don’t want to load it from disk, as that would
require disk drivers and a filesystem. I don’t want to load an ELF image from memory,
as that would require an ELF loader.
The bootloader I’m using (&lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;BOOTBOOT&quot;&gt;bootboot&lt;&#x2F;a&gt;)
sets up an initial address space for the kernel based on an ELF file, so I’ll add a user-level
program directly to the kernel address space, and have the kernel start executing it
in user-mode once the system is brought up.&lt;&#x2F;p&gt;
&lt;p&gt;I can take the kernel code, and the code for a second, user-level program, and combine them into
a single ELF file using a linker script to position the two programs at sensible locations in
memory. When bootboot attempts to make a bootable disk image out of this ELF, it gets confused
and appears to treat the user-level program’s entry point as the kernel’s entry point.
This is understandable, since the single ELF actually contains two complete programs,
and I’ve done nothing to specify which one should be started when the ELF is executed.&lt;&#x2F;p&gt;
&lt;p&gt;I need to go learn more about ELF and static linking.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>In Homogeneous Coordinates Addition is Multiplication</title>
        <published>2020-08-19T00:00:00+00:00</published>
        <updated>2020-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/in-homogeneous-coordinates-addition-is-multiplication/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/in-homogeneous-coordinates-addition-is-multiplication/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/in-homogeneous-coordinates-addition-is-multiplication/">&lt;p&gt;Yesterday I wrote about &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;homogeneous-coordinates&#x2F;&quot;&gt;Homogeneous Coordinates&lt;&#x2F;a&gt;.
I used 3D perspective projection as a motivating example, but I should have used &lt;em&gt;translation&lt;&#x2F;em&gt;.
To translate a point represented by a Cartesian coordinate, one simply adds the intended
delta in each dimension to the corresponding component of the coordinate. This can be done using vector addition.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;homogeneous-coordinates&#x2F;&quot;&gt;yesterday’s post&lt;&#x2F;a&gt; I explained why it’s valuable to express as much as
possible using matrix
multiplication. Homogeneous coordinates let you express vector addition as matrix multiplication.
Convince yourself that this can’t be done using Cartesian coordinates.
Consider a 1-dimensional coordinate (just a number) &lt;code&gt;x&lt;&#x2F;code&gt;. Can you name a constant &lt;code&gt;a&lt;&#x2F;code&gt; such that for all &lt;code&gt;x&lt;&#x2F;code&gt;,
&lt;code&gt;x * a == x + 1&lt;&#x2F;code&gt;? Similarly, given a vector ‘v’ representing a point in a particular dimensional space, you can’t
construct a matrix ‘M’ such that &lt;code&gt;M * v == C + v&lt;&#x2F;code&gt; for some constant vector &lt;code&gt;C&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using homogeneous coordinates it’s possible to add vectors through matrix multiplication.
The matrix that adds the vector &lt;code&gt;[a, b, c]&lt;&#x2F;code&gt; to all vectors &lt;code&gt;[x, y, z]&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;|-       -| |- -|   |-     -|
&lt;&#x2F;span&gt;&lt;span&gt;| 1 0 0 a | | x |   | x + a |
&lt;&#x2F;span&gt;&lt;span&gt;| 0 1 0 b | | y | = | y + b |
&lt;&#x2F;span&gt;&lt;span&gt;| 0 0 1 c | | z |   | z + c |
&lt;&#x2F;span&gt;&lt;span&gt;| 0 0 0 1 | | 1 |   |   1   |
&lt;&#x2F;span&gt;&lt;span&gt;|-       -| |- -|   |-     -|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We added a 4th element to the vector. Above its value is &lt;code&gt;1&lt;&#x2F;code&gt;, but in general it’s treated as a scale factor &lt;code&gt;w&lt;&#x2F;code&gt;.
We might end up wanting to translate a vector with a scale factor of (say) 2. Observe that in the matrix
multiplication above, the scale factor would be multiplied by &lt;code&gt;a&lt;&#x2F;code&gt;, &lt;code&gt;b&lt;&#x2F;code&gt;, and &lt;code&gt;c&lt;&#x2F;code&gt;, and the scale factor of
the result will be the scale factor of the vector we’re translating. When converting back to Cartesian coordinates,
divide everything by the scale factor, then remove it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Homogeneous Coordinates</title>
        <published>2020-08-18T00:00:00+00:00</published>
        <updated>2020-08-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/homogeneous-coordinates/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/homogeneous-coordinates/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/homogeneous-coordinates/">&lt;p&gt;Matrix multiplication is awesome. If you want to do a sequence of operations on
a bunch of vertices, by expressing each operation as a matrix multiplication,
you can use the fact that matrix multiplication is associative to “compile”
all the matrices into a single matrix, by multiplying them together.
Then, just multiply the result by each vertex.
Your code will be more efficient because the per-vertex operations are replaced
with a single matrix multiplication.
You may find your code becomes easier to read too, as a sequence of custom
vector operations are replaced by a single matrix multiplication per vector.&lt;&#x2F;p&gt;
&lt;p&gt;To get the full benefit of this, everything you do with vectors should be replaced
by a single sequential chain of matrix multiplications.&lt;&#x2F;p&gt;
&lt;p&gt;Homogeneous coordinates let you express more operations as matrix multiplications.
In a homogeneous coordinate system, each vector gets an additional element. E.g.
a 3D point is now made up of 4 numbers, rather than 3, as would be the case in
a Cartesian coordinate system. When converting from Cartesian to homogeneous
coordinates, choose 1 as the additional element. When converting back, divide
each element by the value of the extra element, then remove the extra element.&lt;&#x2F;p&gt;
&lt;p&gt;For a motivating example, consider perspective projection. That’s the process of
taking a point in 3D space relative to a camera, and determining the coordinate
of the pixel in the image that the camera sees. It’s commonly used in video games
to convert 3D points in the world of the game into pixel coordinates that get
drawn to the screen. To convert camera relative point &lt;code&gt;[x, y, z]&lt;&#x2F;code&gt; into a pixel
coordinate &lt;code&gt;[u, v]&lt;&#x2F;code&gt;, where x+ is right, y+ is upwards, z+ is away from the camera,
and u+ is to the right on you screen, and v+ is upwards on your screen, and the
point &lt;code&gt;[0, 0]&lt;&#x2F;code&gt; is the centre of your screen:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;u = x * cotan(fov_x &#x2F; 2) &#x2F; z
&lt;&#x2F;span&gt;&lt;span&gt;v = y * cotan(fov_y &#x2F; 2) &#x2F; z
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;fov_x&lt;&#x2F;code&gt; and &lt;code&gt;fov_y&lt;&#x2F;code&gt; are the horizontal and vertical field of view of the
imaginary camera taking the photo.
The intuition behind this is that things move towards the centre of your vision
as they move away from you due to perspective, so dividing by &lt;code&gt;z&lt;&#x2F;code&gt; moves the screen
coordinates towarsd the centre of the screen (remember &lt;code&gt;[0, 0]&lt;&#x2F;code&gt; is the centre of the screen).&lt;&#x2F;p&gt;
&lt;p&gt;The above logic works, but computing perspective projection is often part of a sequence
of operations a game (say) will do on each vertex (each point in the world) each frame.
To get the full benefit of chaining together matrix multiplications, it would be useful
if the above logic could be expressed as a matrix multiplication too.
A first attempt might be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;|-                                  -|  |-     -|   |-                        -|
&lt;&#x2F;span&gt;&lt;span&gt;| cotan(fov_x &#x2F; 2)          0        |  | x &#x2F; z | = | x * cotan(fov_x &#x2F; 2) &#x2F; z |
&lt;&#x2F;span&gt;&lt;span&gt;|         0         cotan(fov_y &#x2F; 2) |  | y &#x2F; z |   | y * cotan(fov_y &#x2F; 2) &#x2F; z |
&lt;&#x2F;span&gt;&lt;span&gt;|-                                  -|  |-     -|   |-                        -|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This would work, but requires pre-processing each point, turning &lt;code&gt;[x, y, z]&lt;&#x2F;code&gt; into &lt;code&gt;[x&#x2F;z, y&#x2F;z]&lt;&#x2F;code&gt;.
This pre-processing is not a matrix multiplication, so messes up our pipeline of matrix
multiplications.&lt;&#x2F;p&gt;
&lt;p&gt;Enter homogeneous coordinates:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;|-                                      -|  |- -|   |-                    -|
&lt;&#x2F;span&gt;&lt;span&gt;| cotan(fov_x &#x2F; 2)          0         0  |  | x |   | x * cotan(fov_x &#x2F; 2) |
&lt;&#x2F;span&gt;&lt;span&gt;|         0         cotan(fov_y &#x2F; 2)  0  |  | y | = | y * cotan(fov_y &#x2F; 2) |
&lt;&#x2F;span&gt;&lt;span&gt;|         0                 0         1  |  | z |   |          z           |
&lt;&#x2F;span&gt;&lt;span&gt;|-                                      -|  |- -|   |-                    -|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When using this operation in the context of computer graphics, it’s likely
part of a sequence of matrix multiplications that convert 3D points in the world
into 2D points on a screen. The result of the above multiplication is a 3D vector.
To compute the pixel coordinate &lt;code&gt;[u, v]&lt;&#x2F;code&gt; from the output, divide each component
by &lt;code&gt;z&lt;&#x2F;code&gt; (the extra component), and then remove the &lt;code&gt;z&lt;&#x2F;code&gt; component altogether.&lt;&#x2F;p&gt;
&lt;p&gt;A caveat to the above is that the &lt;code&gt;[x, y, z]&lt;&#x2F;code&gt; vector is not itself an homogeneous
coordinate, but we treat the result of the multiplication as an homogeneous coordinate.
In practice, it’s likely that the vector on the right-hand-side of the multiplication
will have an additional component, and the matrix on the left-hand-side will have an
additional row and column.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Printing over serial on x86</title>
        <published>2020-08-17T00:00:00+00:00</published>
        <updated>2020-08-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/printing-over-serial-on-x86/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/printing-over-serial-on-x86/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/printing-over-serial-on-x86/">&lt;p&gt;Tonight I set myself the task of printing some text over a serial port in a tiny
kernel mode program that boots with the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;BOOTBOOT&quot;&gt;BOOTBOOT&lt;&#x2F;a&gt;
bootloader. I didn’t start from scratch, but from some
&lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;bztsrc&#x2F;bootboot&#x2F;-&#x2F;tree&#x2F;master&#x2F;mykernel&quot;&gt;example code&lt;&#x2F;a&gt;
in the BOOTBOOT reference implementation.&lt;&#x2F;p&gt;
&lt;p&gt;The only reason it wasn’t trivial is that I’m targeting a UEFI machine,
and between the &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;bztsrc&#x2F;bootboot&#x2F;raw&#x2F;master&#x2F;bootboot_spec_1st_ed.pdf&quot;&gt;BOOTBOOT spec&lt;&#x2F;a&gt;
and the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;Serial_Ports&quot;&gt;osdev wiki page about serial ports&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;UEFI&quot;&gt;UEFI&lt;&#x2F;a&gt;, it’s not clear whether the “old fashioned” way
of interacting with serial ports is supported on UEFI. All the information I could find about
how to print via serial console on UEFI systems implied that I should use a library which
abstracts access to hardware via UEFI.&lt;&#x2F;p&gt;
&lt;p&gt;Instead I elected to try doing it the “old fashioned” way, based on the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seL4&#x2F;seL4&#x2F;blob&#x2F;master&#x2F;src&#x2F;plat&#x2F;pc99&#x2F;machine&#x2F;io.c#L30&quot;&gt;debug printing code from the seL4 microkernel&lt;&#x2F;a&gt;.
Here’s how it looks.&lt;&#x2F;p&gt;
&lt;p&gt;I added a small assembly file defining a &lt;code&gt;com1_putc&lt;&#x2F;code&gt; function that sends its argument to I&#x2F;O port &lt;code&gt;0x3F8&lt;&#x2F;code&gt;,
which conventionally addresses the &lt;code&gt;COM1&lt;&#x2F;code&gt; serial port.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nasm&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nasm &quot;&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;; ioports.asm
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;com1_putc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;%define &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;COM1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0x3F8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;section &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;.text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;bits 64
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;com1_putc:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span&gt;rax, rdi
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span&gt;dx, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;COM1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;out &lt;&#x2F;span&gt;&lt;span&gt;dx, al
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;ret
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assemble the new file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;make&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-make &quot;&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# Makefile
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mykernel.x86_64.elf&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;kernel.c
&lt;&#x2F;span&gt;&lt;span&gt;	nasm -f elf64 ioports.asm -o ioports.o
&lt;&#x2F;span&gt;&lt;span&gt;	... (add ioports.o to the linker arguments)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And call the new function from &lt;code&gt;_start&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; kernel.c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;com1_putc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;c);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;com1_puts&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;char* &lt;&#x2F;span&gt;&lt;span&gt;s);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;_start&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    com1_puts(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Hello, COM1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;com1_puts&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;char* &lt;&#x2F;span&gt;&lt;span&gt;s) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        com1_putc(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(s&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;s);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Despite its simplicity, I’m not convinced that this code is correct in all cases.
I rushed this because I just wanted to get something working, and now that it works
for me, I’ll slow down and understand this code as deeply as I can before moving on.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Trekking is good because it&#x27;s a problem you can solve</title>
        <published>2020-08-16T00:00:00+00:00</published>
        <updated>2020-08-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/trekking-is-good-because-it-s-a-problem-you-can-solve/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/trekking-is-good-because-it-s-a-problem-you-can-solve/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/trekking-is-good-because-it-s-a-problem-you-can-solve/">&lt;p&gt;Early this year I spent a week trekking in Nepal.
This is a brief reflection on one aspect.&lt;&#x2F;p&gt;
&lt;p&gt;I’m an engineer; I solve problems for fun and profit.
Working at a problem is most satisfying when you know for sure that
all the effort you’re putting in is valuable. Inevitably, this won’t
be true all of the time. Some work is exploratory, where the precise
nature of the solution won’t become apparent until some experimentation
takes place. Sometimes it’s not clear to everyone in a team that the agreed-upon solution
will actually solve the problem at hand. You may embark on solving a problem
without knowing for sure whether it can even be solved.&lt;&#x2F;p&gt;
&lt;p&gt;This uncertainty is a cause of stress, especially in a workplace whose culture which denies its existence.&lt;&#x2F;p&gt;
&lt;p&gt;There is no uncertainty in trekking (assuming you have a guide who knows where they’re going
and you’re physically able). If accommodation is organized, and you’re prepared in terms of
water, medication, etc, the &lt;em&gt;only&lt;&#x2F;em&gt; problem you need to solve is the fact that you aren’t at
your destination. The &lt;em&gt;only&lt;&#x2F;em&gt; way to solve this problem is by walking towards your destination,
and you know &lt;em&gt;for sure&lt;&#x2F;em&gt; that every step towards your destination is useful work.&lt;&#x2F;p&gt;
&lt;p&gt;Engineering would not be interesting if all solutions were so simple,
but it is refreshing, once in a while, to be presented with a problem
where one can make fearless incremental progress.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;trekking-is-good-because-it-s-a-problem-you-can-solve&#x2F;nepal.jpg&quot; alt=&quot;nepal.jpg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 13 - Equipment</title>
        <published>2020-08-15T19:40:00+10:00</published>
        <updated>2020-08-15T19:40:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-13/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-13/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-13/">&lt;p&gt;This is the final part of the tutorial, in which we’ll add equipment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This part is loosely based on &lt;a href=&quot;http:&#x2F;&#x2F;rogueliketutorials.com&#x2F;tutorials&#x2F;tcod&#x2F;part-13&#x2F;&quot;&gt;this part&lt;&#x2F;a&gt; of the
python tcod tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch for starting point: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-12-end&quot;&gt;part-12-end&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this post:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;#equipment-entities&quot;&gt;Equipment Entities&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;#equipable-equipment&quot;&gt;Equipable Equipment&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;#modifying-stats-with-equipment&quot;&gt;Modifying Stats with Equipment&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;#balance-item-distribution&quot;&gt;Balance Item Distribution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;#log-message-for-equipment&quot;&gt;Log Message for Equipment&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;equipment-entities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#equipment-entities&quot; aria-label=&quot;Anchor link for: equipment-entities&quot;&gt;Equipment Entities&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Add additional item types to represent equipment.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ItemType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    Sword,
&lt;&#x2F;span&gt;&lt;span&gt;    Staff,
&lt;&#x2F;span&gt;&lt;span&gt;    Armour,
&lt;&#x2F;span&gt;&lt;span&gt;    Robe,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ItemType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;self {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Sword &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;sword&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Staff &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;staff&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Armour &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;armour&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Robe &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;robe&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ItemUsage, ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; usage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::HealthPotion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemUsage::Aim,
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Sword &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Staff &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Armour &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Robe &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;todo!(),
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item_aim&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        target: Coord,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::HealthPotion
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Sword
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Staff
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Armour
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Robe &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;panic!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;invalid item for aim&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add equipment to the item probability distribution. Set the probability of each to 1000
for now so it’s highly likely that all items will be equipment. This will help us test.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;make_item_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;(level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(ItemType, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;ItemType::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    vec![
&lt;&#x2F;span&gt;&lt;span&gt;        (HealthPotion, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        (
&lt;&#x2F;span&gt;&lt;span&gt;            FireballScroll,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; level {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        (
&lt;&#x2F;span&gt;&lt;span&gt;            ConfusionScroll,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; level {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        (Sword, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        (Staff, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        (Armour, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        (Robe, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add some code for rendering the new item types.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;colours {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SWORD&lt;&#x2F;span&gt;&lt;span&gt;: Rgb24 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rgb24::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;STAFF&lt;&#x2F;span&gt;&lt;span&gt;: Rgb24 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rgb24::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ARMOUR&lt;&#x2F;span&gt;&lt;span&gt;: Rgb24 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rgb24::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ROBE&lt;&#x2F;span&gt;&lt;span&gt;: Rgb24 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rgb24::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;item_colour&lt;&#x2F;span&gt;&lt;span&gt;(item_type: ItemType) -&amp;gt; Rgb24 {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Sword &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SWORD&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Staff &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;STAFF&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Armour &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ARMOUR&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Robe &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ROBE&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;currently_visible_view_cell_of_tile&lt;&#x2F;span&gt;&lt;span&gt;(tile: Tile) -&amp;gt; ViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tile {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Item(ItemType::Sword) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_bold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SWORD&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Item(ItemType::Staff) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_bold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;STAFF&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Item(ItemType::Armour) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_bold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;]&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ARMOUR&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Item(ItemType::Robe) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_bold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ROBE&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The game will now populate levels with equipment.
Since equipment are just regular items, they can already be picked up, dropped, and viewed in
the inventory. Attempting to use a piece of equipment will panic at the moment (the &lt;code&gt;todo!()&lt;&#x2F;code&gt; macro).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;items.png&quot; alt=&quot;items.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-13.0&quot;&gt;part-13.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;equipable-equipment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#equipable-equipment&quot; aria-label=&quot;Anchor link for: equipable-equipment&quot;&gt;Equipable Equipment&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll allow equipment to be equipped in two slots. Armour and robes go in the “worn” slot,
and swords and staffs go in the “held” slot.
We’ll keep track of whit is equipped by adding two components - &lt;code&gt;equipment_worn_inventory_index&lt;&#x2F;code&gt; and
&lt;code&gt;equipment_held_inventory_index&lt;&#x2F;code&gt; - which will store the index in the player’s inventory containing the
items equipped in the respective slots.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;entity_table::declare_entity_module&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    components {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        equipment_worn_inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        equipment_held_inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace the &lt;code&gt;todo!()&lt;&#x2F;code&gt; from the previous section to allow equipment items to be used from the inventory menu,
which will cause the item to be equipped.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ItemUsage, ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; usage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::HealthPotion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemUsage::Aim,
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Sword &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Staff &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                self.components
&lt;&#x2F;span&gt;&lt;span&gt;                    .equipment_held_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(character, inventory_index);
&lt;&#x2F;span&gt;&lt;span&gt;                ItemUsage::Immediate
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Armour &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Robe &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                self.components
&lt;&#x2F;span&gt;&lt;span&gt;                    .equipment_worn_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(character, inventory_index);
&lt;&#x2F;span&gt;&lt;span&gt;                ItemUsage::Immediate
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the logic for dropping items so that equipped items are unequipped if they are dropped.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_drop_item&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .equipment_held_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(character)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(inventory_index)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            self.components
&lt;&#x2F;span&gt;&lt;span&gt;                .equipment_held_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(character);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .equipment_worn_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(character)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(inventory_index)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            self.components
&lt;&#x2F;span&gt;&lt;span&gt;                .equipment_worn_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(character);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To tell the player what they currently have equipped, we’ll update the inventory menu to display
the equipment slot occupied by equipped items. Add a type to &lt;code&gt;world.rs&lt;&#x2F;code&gt; representing the inventory
slot indices corresponding to equipped items (if any), and a method for returning the equipment
inventory slots of a given entity.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;EquippedInventoryIndices {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;worn: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;held: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;equipped_inventory_indices&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; EquippedInventoryIndices {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; held &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .equipment_held_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; worn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .equipment_worn_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        EquippedInventoryIndices { held, worn }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a method to &lt;code&gt;GameState&lt;&#x2F;code&gt; for querying the player’s &lt;code&gt;EquippedInventoryIndices&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::world::{
&lt;&#x2F;span&gt;&lt;span&gt;    EquippedInventoryIndices, HitPoints, Inventory, ItemType, ItemUsage, Location, NpcType,
&lt;&#x2F;span&gt;&lt;span&gt;    Populate, ProjectileType, Tile, World,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_equipped_inventory_indices&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; EquippedInventoryIndices {
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;equipped_inventory_indices&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the rendering logic for the inventory menu to show the equipment slots corresponding
to equipped items.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; AppData&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;InventorySlotMenuView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; AppData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; equipped_indices &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_equipped_inventory_indices&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;((i, entry, maybe_selected), &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;slot) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; data
&lt;&#x2F;span&gt;&lt;span&gt;            .inventory_slot_menu
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;menu_instance&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(player_inventory_slots.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; prefix &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;) &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, selected_prefix, entry.key);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; equipment_suffix &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= if&lt;&#x2F;span&gt;&lt;span&gt; equipped_indices.held &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(i) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; (held)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; equipped_indices.worn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(i) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; (worn)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                RichTextPart {
&lt;&#x2F;span&gt;&lt;span&gt;                    text: equipment_suffix,
&lt;&#x2F;span&gt;&lt;span&gt;                    style: name_style,
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            ];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can equip items by selecting them from the inventory. The name of their occupied equipment slot
will appear next to items in the inventory menu.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;inventory.png&quot; alt=&quot;inventory.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-13.1&quot;&gt;part-13.1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;modifying-stats-with-equipment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#modifying-stats-with-equipment&quot; aria-label=&quot;Anchor link for: modifying-stats-with-equipment&quot;&gt;Modifying Stats with Equipment&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Right now you can equip items, but equipping an item doesn’t actually change the game at all.
Let’s make each item increase combat stats by a flat amount.&lt;&#x2F;p&gt;
&lt;p&gt;Add some methods to &lt;code&gt;World&lt;&#x2F;code&gt; for computing modifiers to various combat stats based on equipment.
The effect of equipping different items will be hard-coded into these methods.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;inventory_item_type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity, index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ItemType&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.inventory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|inventory| {
&lt;&#x2F;span&gt;&lt;span&gt;            inventory
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(index)
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|held_entity| self.components.item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(held_entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;damage_modifier&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.components
&lt;&#x2F;span&gt;&lt;span&gt;            .equipment_held_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;held_index| {
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;inventory_item_type&lt;&#x2F;span&gt;&lt;span&gt;(entity, held_index)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|item_type| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;                        ItemType::Sword &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    })
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;defense_modifier&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.components
&lt;&#x2F;span&gt;&lt;span&gt;            .equipment_worn_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;held_index| {
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;inventory_item_type&lt;&#x2F;span&gt;&lt;span&gt;(entity, held_index)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|item_type| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;                        ItemType::Armour &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    })
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;magic_modifier&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; held &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .equipment_held_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;held_index| {
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;inventory_item_type&lt;&#x2F;span&gt;&lt;span&gt;(entity, held_index)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|item_type| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;                        ItemType::Staff &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    })
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; worn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .equipment_worn_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;held_index| {
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;inventory_item_type&lt;&#x2F;span&gt;&lt;span&gt;(entity, held_index)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|item_type| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;                        ItemType::Robe &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    })
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        held &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; worn
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update &lt;code&gt;World::character_bump_attack&lt;&#x2F;code&gt; to take modifiers into account.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;character_bump_attack&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        victim: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        attacker: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; BumpAttackOutcome {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;attacker_base_damage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.base_damage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(attacker).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;attacker_strength &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.strength.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(attacker).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attacker_damage_modifier &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;damage_modifier&lt;&#x2F;span&gt;&lt;span&gt;(attacker);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;victim_dexterity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.dexterity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(victim).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; victim_defense_modifier &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;defense_modifier&lt;&#x2F;span&gt;&lt;span&gt;(victim);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; gross_damage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; attacker_base_damage
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;(attacker_strength &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; attacker_damage_modifier;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; damage_reduction &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;(victim_dexterity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; victim_defense_modifier;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; net_damage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; gross_damage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;saturating_sub&lt;&#x2F;span&gt;&lt;span&gt;(damage_reduction).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as u32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a method &lt;code&gt;World::magic&lt;&#x2F;code&gt; which computes a magic score based on intelligence and the magic modifier,
and use this to determine the power of spells.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;magic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.components
&lt;&#x2F;span&gt;&lt;span&gt;            .intelligence
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;magic_modifier&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item_aim&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        target: Coord,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fireball &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType::Fireball {
&lt;&#x2F;span&gt;&lt;span&gt;                    damage: self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;magic&lt;&#x2F;span&gt;&lt;span&gt;(character).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerLaunchesProjectile(fireball));
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;spawn_projectile&lt;&#x2F;span&gt;&lt;span&gt;(character_coord, target, fireball);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; confusion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType::Confusion {
&lt;&#x2F;span&gt;&lt;span&gt;                    duration: self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;magic&lt;&#x2F;span&gt;&lt;span&gt;(character).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as u32 * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerLaunchesProjectile(confusion));
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;spawn_projectile&lt;&#x2F;span&gt;&lt;span&gt;(character_coord, target, confusion);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-13.2&quot;&gt;part-13.2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;balance-item-distribution&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#balance-item-distribution&quot; aria-label=&quot;Anchor link for: balance-item-distribution&quot;&gt;Balance Item Distribution&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Replace the debugging values in &lt;code&gt;make_item_probability_distribution&lt;&#x2F;code&gt; with smaller values.
To further reduce the odds of an item being a piece of equipment, increase the probability of
the other items too. Make the odds of finding equipment go up the deeper the player is in the dungeon.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;make_item_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;(level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(ItemType, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;ItemType::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item_chance &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; level {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    vec![
&lt;&#x2F;span&gt;&lt;span&gt;        (HealthPotion, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        (
&lt;&#x2F;span&gt;&lt;span&gt;            FireballScroll,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; level {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        (
&lt;&#x2F;span&gt;&lt;span&gt;            ConfusionScroll,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; level {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        (Sword, item_chance),
&lt;&#x2F;span&gt;&lt;span&gt;        (Staff, item_chance),
&lt;&#x2F;span&gt;&lt;span&gt;        (Armour, item_chance),
&lt;&#x2F;span&gt;&lt;span&gt;        (Robe, item_chance),
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These numbers were chosen fairly arbitrarily. Tune these based on the result of play-testing.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-13.3&quot;&gt;part-13.3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;log-message-for-equipment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#log-message-for-equipment&quot; aria-label=&quot;Anchor link for: log-message-for-equipment&quot;&gt;Log Message for Equipment&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;One final touch - adding a log message when the player equips an item.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;LogMessage {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    PlayerEquips(ItemType),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ItemUsage, ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; usage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::HealthPotion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemUsage::Aim,
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Sword &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Staff &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                self.components
&lt;&#x2F;span&gt;&lt;span&gt;                    .equipment_held_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(character, inventory_index);
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerEquips(item_type));
&lt;&#x2F;span&gt;&lt;span&gt;                ItemUsage::Immediate
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::Armour &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::Robe &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                self.components
&lt;&#x2F;span&gt;&lt;span&gt;                    .equipment_worn_inventory_index
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(character, inventory_index);
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerEquips(item_type));
&lt;&#x2F;span&gt;&lt;span&gt;                ItemUsage::Immediate
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;[LogMessage]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MessagesView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        messages: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [LogMessage],
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;format_message&lt;&#x2F;span&gt;&lt;span&gt;(buf: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; [RichTextPartOwned], message: LogMessage) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; message {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                PlayerEquips(item_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[0].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;You equip the &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[1].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, item_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].style.foreground &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(colours::item_colour(item_type));
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[2].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;message.png&quot; alt=&quot;message.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That concludes the tutorial series. There’s still a lot more work to do before this game can be considered complete.
It has no ending, and is very light on content and mechanics. Hopefully by now you have enough of a handle on
&lt;code&gt;chargrid&lt;&#x2F;code&gt; that you can extend the project we made here into the roguelike of your dreams.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-13.4&quot;&gt;part-13.4&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 12 - Increasing Difficulty</title>
        <published>2020-08-15T19:30:00+10:00</published>
        <updated>2020-08-15T19:30:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-12/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-12/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-12/">&lt;p&gt;In this part we’ll update terrain generation logic such that the game gets
more difficult the deeper you descend into the dungeon.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-12&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This part is loosely based on &lt;a href=&quot;http:&#x2F;&#x2F;rogueliketutorials.com&#x2F;tutorials&#x2F;tcod&#x2F;part-12&#x2F;&quot;&gt;this part&lt;&#x2F;a&gt; of the
python tcod tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch for starting point: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-11-end&quot;&gt;part-11-end&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We’ll start by replacing the logic for choosing which NPC and item to spawn with a generic probability distribution.
This will make it easier to increase the chance of spawning more dangerous NPCs and more powerful items, the deeper
the player descends. It will also make it easier to balance the game later, as the logic for placing NPCs and items
will be separate from the specification of how likely each NPC and item is to spawn.&lt;&#x2F;p&gt;
&lt;p&gt;Add this function to &lt;code&gt;terrain.rs&lt;&#x2F;code&gt;. It takes a probability distribution represented by a slice of pairs of values and numbers,
where the relative size of numbers determines the chance that a value is chosen.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;choose_from_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, T, R: Rng&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    probability_distribution: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [(T, u32)],
&lt;&#x2F;span&gt;&lt;span&gt;    rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sum &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; probability_distribution.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|(_, p)| p).sum::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; choice &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;sum);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(value, probability) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; probability_distribution.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(remaining_choice) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; choice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;checked_sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;probability) {
&lt;&#x2F;span&gt;&lt;span&gt;            choice &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; remaining_choice;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    unreachable!()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add functions which generate probability distributions for NPCs and items.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;make_npc_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;(level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(NpcType, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;NpcType::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    vec![(Orc, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;), (Troll, level)]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;make_item_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;(level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(ItemType, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;ItemType::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    vec![
&lt;&#x2F;span&gt;&lt;span&gt;        (HealthPotion, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        (
&lt;&#x2F;span&gt;&lt;span&gt;            FireballScroll,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; level {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        (
&lt;&#x2F;span&gt;&lt;span&gt;            ConfusionScroll,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; level {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;During play-testing, these are values that can be tweaked to adjust the difficulty of the game.&lt;&#x2F;p&gt;
&lt;p&gt;Update &lt;code&gt;Room::place_npcs&lt;&#x2F;code&gt; and &lt;code&gt;Room::place_items&lt;&#x2F;code&gt; to use generic probability distributions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Room {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Place `n` randomly chosen NPCs at random positions within the room
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;place_npcs&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        n: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        probability_distribution: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[(NpcType, u32)],
&lt;&#x2F;span&gt;&lt;span&gt;        grid: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;Grid&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TerrainTile&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coords&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;coord| grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked&lt;&#x2F;span&gt;&lt;span&gt;(coord).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;TerrainTile::Floor)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose_multiple&lt;&#x2F;span&gt;&lt;span&gt;(rng, n)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;npc_type &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose_from_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;(probability_distribution, rng);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked_mut&lt;&#x2F;span&gt;&lt;span&gt;(coord) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(TerrainTile::Npc(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Place `n` items at random positions within the room
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;place_items&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        n: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        probability_distribution: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[(ItemType, u32)],
&lt;&#x2F;span&gt;&lt;span&gt;        grid: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;Grid&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TerrainTile&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coords&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;coord| grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked&lt;&#x2F;span&gt;&lt;span&gt;(coord).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;TerrainTile::Floor)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose_multiple&lt;&#x2F;span&gt;&lt;span&gt;(rng, n)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose_from_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;(probability_distribution, rng);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked_mut&lt;&#x2F;span&gt;&lt;span&gt;(coord) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(TerrainTile::Item(item));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update &lt;code&gt;generate_dungeon&lt;&#x2F;code&gt; to create probability distributions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate_dungeon&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(size: Size, level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R) -&amp;gt; Grid&amp;lt;TerrainTile&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; npc_probability_distribution &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;make_npc_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;(level);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item_probability_distribution &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;make_item_probability_distribution&lt;&#x2F;span&gt;&lt;span&gt;(level);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Attempt to add a room a constant number of times
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;NUM_ATTEMPTS&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;NUM_ATTEMPTS &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; room.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;only_intersects_empty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;grid) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Add npcs to the room
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;num_npcs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;NPCS_PER_ROOM_DISTRIBUTION&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span&gt;(rng).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            room.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;place_npcs&lt;&#x2F;span&gt;&lt;span&gt;(num_npcs, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;npc_probability_distribution, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; grid, rng);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Add items to the room
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;num_items &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ITEMS_PER_ROOM_DISTRIBUTION&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span&gt;(rng).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            room.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;place_items&lt;&#x2F;span&gt;&lt;span&gt;(num_items, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;item_probability_distribution, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; grid, rng);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update &lt;code&gt;world.rs&lt;&#x2F;code&gt; to pass a level to &lt;code&gt;generate_dungeon&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;populate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R) -&amp;gt; Populate {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; terrain &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;terrain::generate_dungeon(self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;grid_size&lt;&#x2F;span&gt;&lt;span&gt;(), level, rng);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And update &lt;code&gt;game.rs&lt;&#x2F;code&gt; to pass the current level to &lt;code&gt;World::populate&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        screen_size: Size,
&lt;&#x2F;span&gt;&lt;span&gt;        rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        initial_visibility_algorithm: VisibilityAlgorithm,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dungeon_level &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; Populate {
&lt;&#x2F;span&gt;&lt;span&gt;            player_entity,
&lt;&#x2F;span&gt;&lt;span&gt;            ai_state,
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;populate&lt;&#x2F;span&gt;&lt;span&gt;(dungeon_level, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; rng);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_level_up_and_descend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, level_up: LevelUp) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        self.dungeon_level &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; Populate {
&lt;&#x2F;span&gt;&lt;span&gt;            player_entity,
&lt;&#x2F;span&gt;&lt;span&gt;            ai_state,
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;populate&lt;&#x2F;span&gt;&lt;span&gt;(self.dungeon_level, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.rng);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now play the game a bunch and tweak the probabilities of NPCs and items until it’s fun.
There’s one more part after this one, in which we’ll add equipment.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-12.0&quot;&gt;part-12.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-13&#x2F;&quot;&gt;Click here for the next part!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Chargrid Roguelike Tutorial 2020</title>
        <published>2020-08-15T00:00:00+00:00</published>
        <updated>2020-08-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/chargrid-roguelike-tutorial-2020/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/chargrid-roguelike-tutorial-2020/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/chargrid-roguelike-tutorial-2020/">&lt;p&gt;Today I finished writing the code and tutorial pages for the tutorial I’m making
as part of
&lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;roguelikedev&#x2F;wiki&#x2F;python_tutorial_series&quot;&gt;roguelikedev subreddit does the complete
roguelike tutorial&lt;&#x2F;a&gt;.
The tutorial pages can be read &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been working on this in my spare time for about 8 weeks. Unlike the 7drl,
for this project I started from nothing and built the entire engine and game using
a collection of rust libraries I’ve made. Also unlike the 7drl, my aim was to make a vanilla
procedurally-generated dungeon crawler, with no interesting features, to demonstrate
how my libraries can be used to implement a roguelike.&lt;&#x2F;p&gt;
&lt;p&gt;The biggest personal benefit of doing this project has been that I was forced to explain
all the concepts of my libraries to someone other than myself. This lead to various simplifications
and quality of life improvements. I also noticed a common pattern I’ve used in my most recent roguelike engines
(namely &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;rip&quot;&gt;rip&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;slime99&#x2F;&quot;&gt;slime99&lt;&#x2F;a&gt;)
which is generic and internally complex. Not wanting to explain its inner workings as part of the
tutorial, I factored it out into the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;spatial_table&quot;&gt;spatial_table&lt;&#x2F;a&gt; crate.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Problems, not Solutions</title>
        <published>2020-08-14T00:00:00+00:00</published>
        <updated>2020-08-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/problems-not-solutions/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/problems-not-solutions/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/problems-not-solutions/">&lt;p&gt;A few years ago, at a past job, I received a piece of advice from a code reviewer which I’ve treasured every since:
“describe a change in terms of the problem it addresses, rather than the solution it implements”.&lt;&#x2F;p&gt;
&lt;p&gt;Focusing on solutions is tempting! You’re a smart engineer. You worked hard on your solution,
and you’re proud of the code you wrote. When you’ve spent a few days working on implementing a new
feature, it’s easy to just describe the work you did.&lt;&#x2F;p&gt;
&lt;p&gt;The trouble with this approach is that
reviewers, and people who later find your code with (say) git blame, won’t understand
why the change was made. The change will exist as a technical artifact, and will be reviewed as
such, but stripping away the context as to why the change was made means some difficult questions
might not get asked during review. And after the code is checked in, if someone besides the author
thinks the code should be changed further, or even removed, it takes more effort if the “paper trail”
associated with a particular piece of code doesn’t include the reason it was written in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;Take this idea further. When someone tries to convince you of an idea, sell you a product, pitch you
a company, it’s common for the person with a solution to focus on the shiny solution. It’s common for the
person on the receiving end to be impressed by a shiny solution, and skip the part where they
question whether it’s a problem that needs solving (at least right now), or whether the solution is appropriate.&lt;&#x2F;p&gt;
&lt;p&gt;Beware of solutions without problems.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>BOOTBOOT</title>
        <published>2020-08-13T00:00:00+00:00</published>
        <updated>2020-08-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/bootboot/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/bootboot/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/bootboot/">&lt;p&gt;A month or so ago I started following &lt;a href=&quot;https:&#x2F;&#x2F;os.phil-opp.com&#x2F;first-edition&#x2F;&quot;&gt;the first edition of writing an OS in rust&lt;&#x2F;a&gt;
which is a tutorial for writing an OS in rust.
I tried to get it working on my FreeBSD laptop and ran into what I’ll call “yet another teething problem
for me as a new FreeBSD user”. I’d been using a tool called &lt;code&gt;grub-mkrescue&lt;&#x2F;code&gt; to build a bootable cdrom image
containing the grub bootloader and an image of the kernel we build in the tutorial.
Grub is not available on FreeBSD (though hunting for help on this issue indicates that it &lt;em&gt;used&lt;&#x2F;em&gt; to be).&lt;&#x2F;p&gt;
&lt;p&gt;There is a pure rust bootloader in a crate called &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bootloader&quot;&gt;bootloader&lt;&#x2F;a&gt;.
The &lt;em&gt;second&lt;&#x2F;em&gt; edition of the tutorial I’m following uses it (in fact it was written just for the tutorial).
I’ve avoided it thus far as I want a more general - not rust-specific - understanding of the boot process.&lt;&#x2F;p&gt;
&lt;p&gt;An alternative that I just discovered is &lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;BOOTBOOT&quot;&gt;BOOTBOOT&lt;&#x2F;a&gt; which is a
bootloader protocol and reference implementation. It does a little more setup than grub.
Kernels begin executing in long mode, and the bootloader initializes a framebuffer and serial console.
I’d honestly rather it didn’t, preferring to work out that myself, but it seems I’m out of options.
Initial setup isn’t the most interesting part of OS dev.
I’ve gone through the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;writing-an-os-in-rust&#x2F;blob&#x2F;master&#x2F;src&#x2F;boot.asm&quot;&gt;ritualistic process&lt;&#x2F;a&gt;
of transitioning from protected mode to long mode on x86. I’m glad to have done that once, and once is probably enough.&lt;&#x2F;p&gt;
&lt;p&gt;Grub is large and complicated and does far more than I need it to do. BOOTBOOT comes with a tool &lt;code&gt;mkbootimg&lt;&#x2F;code&gt;
which performs a similar function to &lt;code&gt;grub-mkrescue&lt;&#x2F;code&gt; - making a bootable disk image containing a bootloader
and a kernel. What I love about this tool is that’s &lt;em&gt;all&lt;&#x2F;em&gt; it does.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sticking with FreeBSD for now</title>
        <published>2020-08-12T00:00:00+00:00</published>
        <updated>2020-08-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/sticking-with-freebsd-for-now/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/sticking-with-freebsd-for-now/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/sticking-with-freebsd-for-now/">&lt;p&gt;I’m going to stop boiling the ocean in an attempt to run OpenBSD on my laptop
and accept that the tools that I need to be productive in my personal projects
currently don’t support OpenBSD. The one tool in question is &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt;,
which makes it &lt;em&gt;convenient&lt;&#x2F;em&gt; to manage multiple concurrent rust insallations (e.g. stable for most things
and nightly for the rest), but it’s all but &lt;em&gt;essential&lt;&#x2F;em&gt; to set up cross compilation
toolchains, which I especially need for compiling rust to web assembly.
I &lt;em&gt;could&lt;&#x2F;em&gt; continue down my current path of building the rust compiler and rustup
from source, and convincing rustup to manage toolchains even though the compiler
binaries aren’t even available for OpenBSD. After starting down this route, I’ve decided
that it’s more effort than it’s worth right now, and my setup wouldn’t be as reliable
as it would on (say) FreeBSD, as I’d be using a bunch of tools in a way which doesn’t have the
“blessing” of their maintainers, which means I should expect occasional breakages.
Not to mention that the &lt;em&gt;only&lt;&#x2F;em&gt; way to be productive on rust is to run the -current branch
of OpenBSD, (for an up-to-date rust package) which is itself subject to occasional breakages.&lt;&#x2F;p&gt;
&lt;p&gt;In the ideal world, I’d run -stable OpenBSD and use rustup to manage a rust installation.
In the meantime I will keep an eye on rust platform support, and as soon as OpenBSD gains
&lt;a href=&quot;https:&#x2F;&#x2F;forge.rust-lang.org&#x2F;release&#x2F;platform-support.html#tier-2&quot;&gt;tier 2&lt;&#x2F;a&gt; I’ll have another
go at switching to it as a daily driver.&lt;&#x2F;p&gt;
&lt;p&gt;This experiment has taught me a great deal. As a result, my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;dotfiles&quot;&gt;dotfiles repository&lt;&#x2F;a&gt;
(a collection of config files I maintain) has become more portable, and I’ve re-evaluated
my dependencies on language managers and removed most of them (all but rustup!).
OpenBSD is the only OS that I’ve installed on my laptop (a lenovo thinkpad t470) where the
“out of the box” functionality included a working trackpad, wifi, and lcd backlight (with the exception of windows
which I don’t think I ever actually booted up).&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bootstrapping Nightly Rust on OpenBSD</title>
        <published>2020-08-11T00:00:00+00:00</published>
        <updated>2020-08-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/bootstrapping-nightly-rust-on-openbsd/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/bootstrapping-nightly-rust-on-openbsd/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/bootstrapping-nightly-rust-on-openbsd/">&lt;p&gt;I underestimated my requirements of a rust compiler:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I occasionally need to use the nightly compiler rather than the stable compiler to enable experimental features&lt;&#x2F;li&gt;
&lt;li&gt;I need to be able to install the web assembly target for rust so I can compile my games to web assembly&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These two tasks are both handled by &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt;.
Frustratingly, when researching how to live without this rustup, &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;9skiyi&#x2F;wasm_without_rustup&#x2F;&quot;&gt;the response is often to just use rustup&lt;&#x2F;a&gt;.
This is a massive pet peeve of mine.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustup&#x2F;issues&#x2F;2168&quot;&gt;But there is hope!&lt;&#x2F;a&gt;
Using rustup to add targets (such as web assembly) seems like it’s still possible on OpenBSD,
even if rustup can’t be used to install the compiler itself.&lt;&#x2F;p&gt;
&lt;p&gt;One of the maintainers of the OpenBSD rust port has made
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;semarie&#x2F;build-rust&quot;&gt;this script&lt;&#x2F;a&gt; for bootstrapping the nightly toolchain
from OpenBSD’s rust package (via the beta toolchain).
A caveat is that you must be running OpenBSD -current, as &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;rust-on-openbsd&#x2F;&quot;&gt;as I discovered yesterday&lt;&#x2F;a&gt;,
the rust package on -stable is too out-of-date to build the rust compiler.
I’ve re-purposed my old gaming PC as a build server, and I’m compiling rust from source now!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust on OpenBSD</title>
        <published>2020-08-10T00:00:00+00:00</published>
        <updated>2020-08-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/rust-on-openbsd/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/rust-on-openbsd/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/rust-on-openbsd/">&lt;p&gt;Rust projects tend to start using new language features as soon as they land in the stable compiler.
The rust compiler gets an update once per month, often adding new language features.
OpenBSD releases a new version every six months, and packages do not gain feature updates outside
of this release schedule (only security updates and bug fixes).
The implication of this is that most of the time, the rust compiler from OpenBSD’s package repository
is too out-of-date to build most rust packages.&lt;&#x2F;p&gt;
&lt;p&gt;On pretty much any other system, the solution would be to just install rust with &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt;,
but rust doesn’t make binaries available for OpenBSD, so that won’t work here.
I could compile the rust compiler from source, but as the rust compiler is written in rust, and like most
rust projects, depends on recently-added language features, I’ll need a fairly up-to-date rust compiler
to bootstrap the compiler from source, and the one in the package repo is till too old.&lt;&#x2F;p&gt;
&lt;p&gt;I sought help on the OpenBSD subreddit, and the advice I got was to switch to the “-current” branch
of OpenBSD, which takes the base system and packages from developer snapshots, rather than the biannual
stable release. I ran archlinux for the better part of a decade, so I’m not phased by this!
I followed the advice and everything has worked fine so far.&lt;&#x2F;p&gt;
&lt;p&gt;This means that the only issue preventing me from running OpenBSD on my personal laptop is a
lack of support for OpenBSD’s audio system in the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cpal&quot;&gt;cpal&lt;&#x2F;a&gt; rust
library. I need this because I make games in rust, and cpal appears to be the de-facto standard
way to play audio in rust, and I used it for audio in my game engine.
Now that I have a working rust compiler, I can start working on
adding OpenBSD support to cpal myself.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 11 - Descending the Stairs</title>
        <published>2020-08-09T21:00:00+10:00</published>
        <updated>2020-08-09T21:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-11/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-11/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-11/">&lt;p&gt;In this part we’ll add stairs, and multiple dungeon levels, as well as the ability to upgrade the
player character as they descend the stairs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This part is loosely based on &lt;a href=&quot;http:&#x2F;&#x2F;rogueliketutorials.com&#x2F;tutorials&#x2F;tcod&#x2F;part-11&#x2F;&quot;&gt;this part&lt;&#x2F;a&gt; of the
python tcod tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch for starting point: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-10-end&quot;&gt;part-10-end&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this post:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;#placing-stairs&quot;&gt;Placing Stairs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;#descending-stairs&quot;&gt;Descending Stairs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;#add-combat-stats&quot;&gt;Add Combat Stats&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;#use-combat-stats&quot;&gt;Use Combat Stats&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;#upgrade-when-descending-stairs&quot;&gt;Upgrade when Descending Stairs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;placing-stairs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#placing-stairs&quot; aria-label=&quot;Anchor link for: placing-stairs&quot;&gt;Placing Stairs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Start by adding an entity to each floor representing the stairs to the next floor down.
For this game, stairs only lead downwards, and there’s no way to get back to earlier
floors of the dungeon.&lt;&#x2F;p&gt;
&lt;p&gt;Update the terrain generator to add stairs to the last room it creates.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;TerrainTile {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    Stairs,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate_dungeon&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(size: Size, rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R) -&amp;gt; Grid&amp;lt;TerrainTile&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; grid &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Grid::new_copy(size, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; room_centres &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Add stairs to the centre of the last room placed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;room_centres.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(TerrainTile::Stairs);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|t| t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(TerrainTile::Wall))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a stairs tile, a stairs component, and spawn stairs according to the map produced by terrain generation.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Tile {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    Stairs,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;entity_table::declare_entity_module&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    components {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        stairs: (),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;spawn_stairs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, coord: Coord) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.entity_allocator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        self.spatial_table
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                entity,
&lt;&#x2F;span&gt;&lt;span&gt;                Location {
&lt;&#x2F;span&gt;&lt;span&gt;                    coord,
&lt;&#x2F;span&gt;&lt;span&gt;                    layer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(Layer::Floor),
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.tile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, Tile::Stairs);
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.stairs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, ());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;populate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R) -&amp;gt; Populate {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(coord, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;terrain_tile) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; terrain.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; terrain_tile {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                TerrainTile::Stairs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;spawn_stairs&lt;&#x2F;span&gt;&lt;span&gt;(coord),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a case to the renderer to handle stairs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;currently_visible_view_cell_of_tile&lt;&#x2F;span&gt;&lt;span&gt;(tile: Tile) -&amp;gt; ViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tile {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Stairs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_bold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_background&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;63&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Levels now contain stairs!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;stairs.png&quot; alt=&quot;stairs.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-11.0&quot;&gt;part-11.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;descending-stairs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#descending-stairs&quot; aria-label=&quot;Anchor link for: descending-stairs&quot;&gt;Descending Stairs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To approach the problem of descending stairs top down, start by adding a new control such that
when the ‘&amp;gt;’ key is pressed, attempt to have the player descend to the next dungeon level.
Of course this will not do anything unless the player is currently standing on the stairs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;handle_input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, input: Input) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;GameReturn&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; input {
&lt;&#x2F;span&gt;&lt;span&gt;            Input::Keyboard(key) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; key {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                    KeyboardInput::Char(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;self.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;maybe_player_descend&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;maybe_player_descend&lt;&#x2F;code&gt; method will check whether the player is on the stairs, and call &lt;code&gt;player_descend&lt;&#x2F;code&gt; if they are.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_player_descend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord_contains_stairs&lt;&#x2F;span&gt;&lt;span&gt;(self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_coord&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;            self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_descend&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;player_descend&lt;&#x2F;code&gt; contains the interesting logic relating to descending the stairs.
Comments inline.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_descend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; remove and return the player&amp;#39;s data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; player_data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_character&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; remove and discard all entities from the world
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; forget the visible areas of the map
&lt;&#x2F;span&gt;&lt;span&gt;        self.visibility_grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; generate a fresh level
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; Populate {
&lt;&#x2F;span&gt;&lt;span&gt;            player_entity,
&lt;&#x2F;span&gt;&lt;span&gt;            ai_state,
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;populate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.rng);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; insert the old player data into the new level
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;replace_character&lt;&#x2F;span&gt;&lt;span&gt;(player_entity, player_data);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; the player&amp;#39;s entity may have changed
&lt;&#x2F;span&gt;&lt;span&gt;        self.player_entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; player_entity;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; replace ai state to match the new level
&lt;&#x2F;span&gt;&lt;span&gt;        self.ai_state &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ai_state;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code depends on several not-yet-implemented methods of &lt;code&gt;World&lt;&#x2F;code&gt; and &lt;code&gt;VisibilityGrid&lt;&#x2F;code&gt;. Let’s implement them now.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub use &lt;&#x2F;span&gt;&lt;span&gt;components::EntityData;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;CharacterData {
&lt;&#x2F;span&gt;&lt;span&gt;    entity_data: EntityData,
&lt;&#x2F;span&gt;&lt;span&gt;    inventory_entity_data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;EntityData&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.entity_allocator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;remove_entity_data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; EntityData {
&lt;&#x2F;span&gt;&lt;span&gt;        self.entity_allocator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;        self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_entity_data&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;remove_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; CharacterData {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; entity_data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_entity_data&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Remove the inventory from the character. An inventory contains entities referring data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; in the current world. These data will also be removed here, and combined with the
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; `EntityData` of the character to form a `CharacterData`. When the `CharacterData` is
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; re-inserted into the world, the inventory item data will be inserted first, at which
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; point each item will be assigned a fresh entity. The character will get a brand new
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; inventory containing the new entities.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; inventory_entity_data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; entity_data
&lt;&#x2F;span&gt;&lt;span&gt;            .inventory
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character missing inventory&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;slots&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|maybe_slot| maybe_slot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|entity| self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_entity_data&lt;&#x2F;span&gt;&lt;span&gt;(entity)))
&lt;&#x2F;span&gt;&lt;span&gt;            .collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        CharacterData {
&lt;&#x2F;span&gt;&lt;span&gt;            entity_data,
&lt;&#x2F;span&gt;&lt;span&gt;            inventory_entity_data,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;replace_character&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        entity: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        CharacterData {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; entity_data,
&lt;&#x2F;span&gt;&lt;span&gt;            inventory_entity_data,
&lt;&#x2F;span&gt;&lt;span&gt;        }: CharacterData,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Before inserting the character&amp;#39;s data, create new entities to contain each item in the
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; character&amp;#39;s inventory.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; inventory_slots &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; inventory_entity_data
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|maybe_entity_data| {
&lt;&#x2F;span&gt;&lt;span&gt;                maybe_entity_data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|entity_data| {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.entity_allocator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    self.components.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;update_entity_data&lt;&#x2F;span&gt;&lt;span&gt;(entity, entity_data);
&lt;&#x2F;span&gt;&lt;span&gt;                    entity
&lt;&#x2F;span&gt;&lt;span&gt;                })
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            .collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Make a new inventory containing the newly created entities, and add it to the character.
&lt;&#x2F;span&gt;&lt;span&gt;        entity_data.inventory &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(Inventory {
&lt;&#x2F;span&gt;&lt;span&gt;            slots: inventory_slots,
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;update_entity_data&lt;&#x2F;span&gt;&lt;span&gt;(entity, entity_data);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;coord_contains_stairs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, coord: Coord) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.spatial_table
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;layers_at_checked&lt;&#x2F;span&gt;&lt;span&gt;(coord)
&lt;&#x2F;span&gt;&lt;span&gt;            .floor
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|floor_entity| self.components.stairs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(floor_entity))
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of the complexity above is because the items in the player’s inventory need to transition between
dungeon levels along with the player.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; visibility.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;VisibilityGrid {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.count &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self.grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;cell &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span&gt;::default();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can now move onto a staircase, and press ‘&amp;gt;’, and you’ll find yourself in a brand-new level.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-11.1&quot;&gt;part-11.1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;add-combat-stats&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#add-combat-stats&quot; aria-label=&quot;Anchor link for: add-combat-stats&quot;&gt;Add Combat Stats&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Soon we’ll allow the player to level up when descending the stairs, but first we need to
make our combat system more complex, so that the player can be improved on several different axes.
We’ll add 4 combat stats to the player:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;base damage: the minimum amount of damage dealt in a melee attack&lt;&#x2F;li&gt;
&lt;li&gt;strength: a random number between 0 and strength is added to the damage dealth in a melee attack&lt;&#x2F;li&gt;
&lt;li&gt;dexterity: if the character would receive melee damage, it is reduced by a random number between 0 and dexterity&lt;&#x2F;li&gt;
&lt;li&gt;intelligence: determines the effectiveness of spells&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;NPCs can only deal melee damage, so they don’t have an intelligence stat, but they still get the other three.&lt;&#x2F;p&gt;
&lt;p&gt;Base damage is an innate property of the character, so it doesn’t increase when you level up.
Of the other 3 stats, the player may choose one to increment when descending the stairs.
Alternatively, we’ll let the player choose to increase their max health by 5.&lt;&#x2F;p&gt;
&lt;p&gt;In this section we’ll add components for each of the stats, and update the UI to display the character’s stats.
In the next section we’ll update the combat system to make use of these stats.&lt;&#x2F;p&gt;
&lt;p&gt;Add components for the stats, add the stats components to the player and NPCs, and expose getters for strength, dexterity and intelligence.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;entity_table::declare_entity_module&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    components {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        base_damage: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        strength: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        dexterity: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        intelligence: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;spawn_player&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, coord: Coord) -&amp;gt; Entity {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.base_damage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.strength.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.dexterity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.intelligence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;spawn_npc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, coord: Coord, npc_type: NpcType) -&amp;gt; Entity {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.base_damage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(strength, dexterity) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; npc_type {
&lt;&#x2F;span&gt;&lt;span&gt;            NpcType::Orc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            NpcType::Troll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.strength.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, strength);
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.dexterity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, dexterity);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;strength&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.strength.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;dexterity&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.dexterity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;intelligence&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, entity: Entity) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.intelligence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add some getters for the player’s stats to &lt;code&gt;GameState&lt;&#x2F;code&gt;, and also keep track of the current dungeon level.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    dungeon_level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        screen_size: Size,
&lt;&#x2F;span&gt;&lt;span&gt;        rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        initial_visibility_algorithm: VisibilityAlgorithm,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dungeon_level &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; game_state &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            dungeon_level,
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_descend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        self.dungeon_level &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_strength&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.world
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;strength&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;player missing strength&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_dexterity&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.world
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;dexterity&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;player missing dexterity&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_intelligence&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.world
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;intelligence&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;player missing intelligence&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;dungeon_level&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.dungeon_level
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;app.rs&lt;&#x2F;code&gt;, pass the player’s stats to the ui renderer. Also reduce the padding around
the ui to make space for the extra information.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::ui::{StatsData, UiData, UiView};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;UI_Y_PADDING&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;render_ui&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;AppData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        self.ui_view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            UiData {
&lt;&#x2F;span&gt;&lt;span&gt;                player_hit_points,
&lt;&#x2F;span&gt;&lt;span&gt;                messages,
&lt;&#x2F;span&gt;&lt;span&gt;                name,
&lt;&#x2F;span&gt;&lt;span&gt;                examine_cell,
&lt;&#x2F;span&gt;&lt;span&gt;                stats_data: StatsData {
&lt;&#x2F;span&gt;&lt;span&gt;                    strength: data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_strength&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                    dexterity: data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_dexterity&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                    intelligence: data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_intelligence&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;                dungeon_level: data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;dungeon_level&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, self.ui_y_offset)),
&lt;&#x2F;span&gt;&lt;span&gt;            frame,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a ui component for showing the player’s stats.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;StatsView {
&lt;&#x2F;span&gt;&lt;span&gt;    buf: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;StatsData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;strength: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;dexterity: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;intelligence: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; StatsData&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;StatsView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; StatsData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fmt::Write;
&lt;&#x2F;span&gt;&lt;span&gt;        self.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        write!(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;mut self.buf,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;str: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;, dex: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;, int: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            data.strength, data.dexterity, data.intelligence
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        StringViewSingleLine::new(Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.buf, context, frame);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And another component for the current dungeon level.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;DungeonLevelView {
&lt;&#x2F;span&gt;&lt;span&gt;    buf: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;DungeonLevelView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        dungeon_level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fmt::Write;
&lt;&#x2F;span&gt;&lt;span&gt;        self.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        write!(&amp;amp;mut self.buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Level: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, dungeon_level).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        StringViewSingleLine::new(Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.buf, context, frame);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add fields for stats and dungeon level to &lt;code&gt;UiData&lt;&#x2F;code&gt; and &lt;code&gt;UiView&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;UiData&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;stats_data: StatsData,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;dungeon_level: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;UiView {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    stats_view: StatsView,
&lt;&#x2F;span&gt;&lt;span&gt;    dungeon_level_view: DungeonLevelView,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally update &lt;code&gt;UiView::view&lt;&#x2F;code&gt; to draw the new components.
The whole function is shown here as it’s changed significantly.
Also note the new helper function &lt;code&gt;centre_health_width&lt;&#x2F;code&gt; for centering
text within the width of the health bar.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;centre_health_width&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(view: impl View&amp;lt;T&amp;gt;, height: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; impl View&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    BoundView {
&lt;&#x2F;span&gt;&lt;span&gt;        size: Size::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;HEALTH_WIDTH&lt;&#x2F;span&gt;&lt;span&gt;, height),
&lt;&#x2F;span&gt;&lt;span&gt;        view: AlignView {
&lt;&#x2F;span&gt;&lt;span&gt;            alignment: Alignment {
&lt;&#x2F;span&gt;&lt;span&gt;                x: AlignmentX::Centre,
&lt;&#x2F;span&gt;&lt;span&gt;                y: AlignmentY::Bottom,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            view,
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;UiData&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;UiView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: UiData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.health_view
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(data.player_hit_points, context, frame);
&lt;&#x2F;span&gt;&lt;span&gt;        self.stats_view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data.stats_data,
&lt;&#x2F;span&gt;&lt;span&gt;            context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;HEALTH_WIDTH &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as i32 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            frame,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;centre_health_width&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.dungeon_level_view, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            data.dungeon_level,
&lt;&#x2F;span&gt;&lt;span&gt;            context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            frame,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; message_log_offset &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;HEALTH_WIDTH &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as i32 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        self.messages_view
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(data.messages, context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(message_log_offset), frame);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(name) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.name {
&lt;&#x2F;span&gt;&lt;span&gt;            BoundView {
&lt;&#x2F;span&gt;&lt;span&gt;                size: Size::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;HEALTH_WIDTH&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                view: AlignView {
&lt;&#x2F;span&gt;&lt;span&gt;                    alignment: Alignment::centre(),
&lt;&#x2F;span&gt;&lt;span&gt;                    view: StringViewSingleLine::new(
&lt;&#x2F;span&gt;&lt;span&gt;                        Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                    ),
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(name, context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)), frame);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(examine_cell) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.examine_cell {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;centre_health_width&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                StringView::new(
&lt;&#x2F;span&gt;&lt;span&gt;                    Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                    wrap::Word::new(),
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;examine_cell_str&lt;&#x2F;span&gt;&lt;span&gt;(examine_cell),
&lt;&#x2F;span&gt;&lt;span&gt;                context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                frame,
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running the game, the ui changes should be visible. The level counter will increase
as you descend deeper into the dungeon.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;stats.png&quot; alt=&quot;stats.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-11.2&quot;&gt;part-11.2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-combat-stats&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-combat-stats&quot; aria-label=&quot;Anchor link for: use-combat-stats&quot;&gt;Use Combat Stats&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll start by replacing the logic for handling bump attacks to take the new stats into account.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;BumpAttackOutcome {
&lt;&#x2F;span&gt;&lt;span&gt;    Hit,
&lt;&#x2F;span&gt;&lt;span&gt;    Dodge,
&lt;&#x2F;span&gt;&lt;span&gt;    Kill,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;character_bump_attack&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        victim: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        attacker: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; BumpAttackOutcome {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;attacker_base_damage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.base_damage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(attacker).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;attacker_strength &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.strength.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(attacker).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;victim_dexterity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.dexterity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(victim).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; gross_damage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; attacker_base_damage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;(attacker_strength &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; damage_reduction &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;(victim_dexterity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; net_damage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; gross_damage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;saturating_sub&lt;&#x2F;span&gt;&lt;span&gt;(damage_reduction) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as u32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; net_damage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            BumpAttackOutcome::Dodge
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;character_damage&lt;&#x2F;span&gt;&lt;span&gt;(victim, net_damage).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                BumpAttackOutcome::Kill
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                BumpAttackOutcome::Hit
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that if an attack would deal 0 damage, we say that it was dodged instead, to add some flavour.
Also note that &lt;code&gt;character_bump_attack&lt;&#x2F;code&gt; now takes an additional argument - a random number generator.
Its return type has also changed.&lt;&#x2F;p&gt;
&lt;p&gt;Update &lt;code&gt;maybe_move_character&lt;&#x2F;code&gt; to account for this function’s new signature.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_move_character&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character_entity: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        direction: CardinalDirection,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; new_character_coord.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_valid&lt;&#x2F;span&gt;&lt;span&gt;(self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;grid_size&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dest_layers &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;layers_at_checked&lt;&#x2F;span&gt;&lt;span&gt;(new_character_coord);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(dest_character_entity) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dest_layers.character {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; character_is_npc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(character_entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dest_character_is_npc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                    self.components.npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(dest_character_entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; character_is_npc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; dest_character_is_npc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; outcome &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                        self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;character_bump_attack&lt;&#x2F;span&gt;&lt;span&gt;(dest_character_entity, character_entity, rng);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; npc_type &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; character_is_npc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt;(dest_character_is_npc).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::write_combat_log_messages(
&lt;&#x2F;span&gt;&lt;span&gt;                        character_is_npc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                        outcome,
&lt;&#x2F;span&gt;&lt;span&gt;                        npc_type,
&lt;&#x2F;span&gt;&lt;span&gt;                        message_log,
&lt;&#x2F;span&gt;&lt;span&gt;                    );
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; dest_layers.feature.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                self.spatial_table
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;update_coord&lt;&#x2F;span&gt;&lt;span&gt;(character_entity, new_character_coord)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;BumpAttackOutcome&lt;&#x2F;code&gt; is now being passed to &lt;code&gt;write_combat_log_messages&lt;&#x2F;code&gt;, so update that too.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;write_combat_log_messages&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        attacker_is_player: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        outcome: BumpAttackOutcome,
&lt;&#x2F;span&gt;&lt;span&gt;        npc_type: NpcType,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; attacker_is_player {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; outcome {
&lt;&#x2F;span&gt;&lt;span&gt;                BumpAttackOutcome::Kill &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerKillsNpc(npc_type)),
&lt;&#x2F;span&gt;&lt;span&gt;                BumpAttackOutcome::Hit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerAttacksNpc(npc_type)),
&lt;&#x2F;span&gt;&lt;span&gt;                BumpAttackOutcome::Dodge &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NpcDodges(npc_type)),
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; outcome {
&lt;&#x2F;span&gt;&lt;span&gt;                BumpAttackOutcome::Kill &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NpcKillsPlayer(npc_type)),
&lt;&#x2F;span&gt;&lt;span&gt;                BumpAttackOutcome::Hit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NpcAttacksPlayer(npc_type)),
&lt;&#x2F;span&gt;&lt;span&gt;                BumpAttackOutcome::Dodge &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerDodges(npc_type)),
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes use of two new &lt;code&gt;LogMessage&lt;&#x2F;code&gt;s. Define them.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;LogMessage {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    PlayerDodges(NpcType),
&lt;&#x2F;span&gt;&lt;span&gt;    NpcDodges(NpcType),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And update the ui code to print out the messages.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;[LogMessage]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MessagesView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        messages: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [LogMessage],
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;format_message&lt;&#x2F;span&gt;&lt;span&gt;(buf: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; [RichTextPartOwned], message: LogMessage) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; message {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                PlayerDodges(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[0].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;You dodge the &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[1].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;s&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].style.foreground &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(colours::npc_colour(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[2].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; attack.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                NpcDodges(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[0].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;The &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[1].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].style.foreground &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(colours::npc_colour(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[2].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; dodges your attack.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That’s all that’s required to get melee stats working. All that’s left is intelligence.&lt;&#x2F;p&gt;
&lt;p&gt;There are currently two types of spell: fireball and confusion. The damage dealt by fireball,
and the duration of confusion, will both be determined by the intelligence stat.
The control flow around casting the spells involves giving the player a chance to aim,
then launching a projectile which moves, animated in realtime. If it collides with a character,
it has some effect based on which spell it was. Only at the point of impact does the
efficacy of the spell (determined by the caster’s intelligence) need to be known.
The problem is that right now we don’t store an association between the projectile and the
entity which cast it. To make this easy, add fields to the &lt;code&gt;Fireball&lt;&#x2F;code&gt; and &lt;code&gt;Confusion &lt;&#x2F;code&gt; &lt;code&gt;ProjectileType&lt;&#x2F;code&gt;s
storing the damage and duration respectively.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType {
&lt;&#x2F;span&gt;&lt;span&gt;    Fireball { damage: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    Confusion { duration: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Try to compile the code. Any place we pattern-match on a &lt;code&gt;ProjectileType&lt;&#x2F;code&gt; needs to be updated from&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  ProjectileType::Fireball &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; ...
&lt;&#x2F;span&gt;&lt;span&gt;  ProjectileType::Confusion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  ProjectileType::Fireball { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.. &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; ...
&lt;&#x2F;span&gt;&lt;span&gt;  ProjectileType::Confusion { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.. &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update &lt;code&gt;World::maybe_use_item_aim&lt;&#x2F;code&gt; to set these new fields based on the caster’s intelligence.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item_aim&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        target: Coord,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fireball &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType::Fireball {
&lt;&#x2F;span&gt;&lt;span&gt;                    damage: (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;self.components.intelligence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(character).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerLaunchesProjectile(fireball));
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;spawn_projectile&lt;&#x2F;span&gt;&lt;span&gt;(character_coord, target, fireball);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; confusion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType::Confusion {
&lt;&#x2F;span&gt;&lt;span&gt;                    duration: (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;self.components.intelligence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(character).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as u32
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerLaunchesProjectile(confusion));
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;spawn_projectile&lt;&#x2F;span&gt;&lt;span&gt;(character_coord, target, confusion);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When a projectile collides with a character, use the information in these fields to affect the character.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;move_projectiles&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; entities_to_remove &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; fireball_hit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; confusion_hit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(entity, trajectory) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self.components.trajectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(direction) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; trajectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; current_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord_of&lt;&#x2F;span&gt;&lt;span&gt;(entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; current_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; direction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dest_layers &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;layers_at_checked&lt;&#x2F;span&gt;&lt;span&gt;(new_coord);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; dest_layers.feature.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                    entities_to_remove.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(character) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dest_layers.character {
&lt;&#x2F;span&gt;&lt;span&gt;                    entities_to_remove.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;projectile_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.projectile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity) {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; projectile_type {
&lt;&#x2F;span&gt;&lt;span&gt;                            ProjectileType::Fireball { damage } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                fireball_hit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;((character, damage));
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                            ProjectileType::Confusion { duration } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                confusion_hit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;((character, duration));
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ignore collisiosns of projectiles
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let _ = &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;update_coord&lt;&#x2F;span&gt;&lt;span&gt;(entity, new_coord);
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                entities_to_remove.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; entities_to_remove {
&lt;&#x2F;span&gt;&lt;span&gt;            self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_entity&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(entity, damage) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; fireball_hit {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; maybe_npc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(VictimDies) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;character_damage&lt;&#x2F;span&gt;&lt;span&gt;(entity, damage) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(npc) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; maybe_npc {
&lt;&#x2F;span&gt;&lt;span&gt;                    message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NpcDies(npc));
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(entity, duration) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; confusion_hit {
&lt;&#x2F;span&gt;&lt;span&gt;            self.components.confusion_countdown.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, duration);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity) {
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NpcBecomesConfused(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the higher your intelligence, the more powerful the effects of your spells.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-11.3&quot;&gt;part-11.3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;upgrade-when-descending-stairs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#upgrade-when-descending-stairs&quot; aria-label=&quot;Anchor link for: upgrade-when-descending-stairs&quot;&gt;Upgrade when Descending Stairs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Define a type to represent the different ways the player can level up.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Clone, Copy, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;LevelUp {
&lt;&#x2F;span&gt;&lt;span&gt;    Strength,
&lt;&#x2F;span&gt;&lt;span&gt;    Dexterity,
&lt;&#x2F;span&gt;&lt;span&gt;    Intelligence,
&lt;&#x2F;span&gt;&lt;span&gt;    Health,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a method to &lt;code&gt;World&lt;&#x2F;code&gt; for leveling up a character.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::game::{ExamineCell, LevelUp, LogMessage};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;level_up_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, character_entity: Entity, level_up: LevelUp) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; level_up {
&lt;&#x2F;span&gt;&lt;span&gt;            LevelUp::Strength &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;                    .components
&lt;&#x2F;span&gt;&lt;span&gt;                    .strength
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(character_entity)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character lacks strength&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            LevelUp::Dexterity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;                    .components
&lt;&#x2F;span&gt;&lt;span&gt;                    .dexterity
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(character_entity)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character lacks dexterity&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            LevelUp::Intelligence &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;                    .components
&lt;&#x2F;span&gt;&lt;span&gt;                    .intelligence
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(character_entity)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character lacks intelligence&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            LevelUp::Health &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hit_points &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;                    .components
&lt;&#x2F;span&gt;&lt;span&gt;                    .hit_points
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(character_entity)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character lacks hit points&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;INCREASE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                hit_points.current &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;INCREASE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                hit_points.max &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;INCREASE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Earlier in this section we defined a method &lt;code&gt;GameState::maybe_player_descend&lt;&#x2F;code&gt; which checked
whether the player is on the stairs, and if so, have them descend to the next dungeon level.
We now need to move this check outside of &lt;code&gt;GameState&lt;&#x2F;code&gt;. This is because when the player is on
the stairs and presses the ‘&amp;gt;’ key, we now want to display a level-up menu, which the player
may cancel. If they select stat to level up, only then will the player be taken to the next
level, and leveled-up, in a single atomic operation.&lt;&#x2F;p&gt;
&lt;p&gt;Thus replace &lt;code&gt;GameState::maybe_player_descend&lt;&#x2F;code&gt; with the following two methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_level_up_and_descend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, level_up: LevelUp) {
&lt;&#x2F;span&gt;&lt;span&gt;        assert!(self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_player_on_stairs&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;level_up_character&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity, level_up);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; player_data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_character&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity);
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        self.visibility_grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        self.dungeon_level &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; Populate {
&lt;&#x2F;span&gt;&lt;span&gt;            player_entity,
&lt;&#x2F;span&gt;&lt;span&gt;            ai_state,
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;populate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.rng);
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;replace_character&lt;&#x2F;span&gt;&lt;span&gt;(player_entity, player_data);
&lt;&#x2F;span&gt;&lt;span&gt;        self.player_entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; player_entity;
&lt;&#x2F;span&gt;&lt;span&gt;        self.ai_state &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ai_state;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;is_player_on_stairs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord_contains_stairs&lt;&#x2F;span&gt;&lt;span&gt;(self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_coord&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to describe the level-up menu.&lt;&#x2F;p&gt;
&lt;p&gt;Start with a function that creates a menu instance, listing all the different ways to level up.
Make it a &lt;code&gt;MenuInstanceChooseOrEscape&lt;&#x2F;code&gt; so that it’s sensitive to the escape key being pressed,
allowing the user to cancel the menu and not descend the stairs yet.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::game::{GameState, LevelUp};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;level_up_menu_instance&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; MenuInstanceChooseOrEscape&amp;lt;LevelUp&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;LevelUp::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    MenuInstanceBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;        items: vec![Strength, Dexterity, Intelligence, Health],
&lt;&#x2F;span&gt;&lt;span&gt;        hotkeys: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        selected_index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;into_choose_or_escape&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Describe how to render the level-up menu.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuView {
&lt;&#x2F;span&gt;&lt;span&gt;    mouse_tracker: MenuInstanceMouseTracker,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MenuIndexFromScreenCoord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;menu_index_from_screen_coord&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, len: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, coord: Coord) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.mouse_tracker.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;menu_index_from_screen_coord&lt;&#x2F;span&gt;&lt;span&gt;(len, coord)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; AppData&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; AppData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.mouse_tracker.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_frame&lt;&#x2F;span&gt;&lt;span&gt;(context.offset);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;level_up, maybe_selected) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; data.level_up_menu.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;menu_instance&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(prefix, style) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= if&lt;&#x2F;span&gt;&lt;span&gt; maybe_selected.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                (
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    Style::new()
&lt;&#x2F;span&gt;&lt;span&gt;                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_bold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                )
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; level_up {
&lt;&#x2F;span&gt;&lt;span&gt;                LevelUp::Strength &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Strength&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                LevelUp::Dexterity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Dexterity&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                LevelUp::Intelligence &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Intelligence&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                LevelUp::Health &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Constitution&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; size &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;StringViewSingleLine::new(style).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view_size&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prefix, text),
&lt;&#x2F;span&gt;&lt;span&gt;                context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as i32&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                frame,
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;            self.mouse_tracker.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;on_entry_view_size&lt;&#x2F;span&gt;&lt;span&gt;(size);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Describe a “selector” for the menu that selects the fields of &lt;code&gt;AppData&lt;&#x2F;code&gt; and &lt;code&gt;AppView&lt;&#x2F;code&gt; for
using and rendering the menu.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuSelect;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ChooseSelector &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuSelect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ChooseOutput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;MenuInstanceChooseOrEscape&amp;lt;LevelUp&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;choose_mut&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;DataInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;ChooseOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; input.level_up_menu
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;DataSelector &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuSelect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;DataInput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;DataOutput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a Self::&lt;&#x2F;span&gt;&lt;span&gt;DataInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a Self::&lt;&#x2F;span&gt;&lt;span&gt;DataOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        input
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;data_mut&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;DataInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;DataOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        input
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ViewSelector &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuSelect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ViewInput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppView;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ViewOutput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; LevelUpMenuView;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a Self::&lt;&#x2F;span&gt;&lt;span&gt;ViewInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a Self::&lt;&#x2F;span&gt;&lt;span&gt;ViewOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;input.level_up_menu_view
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view_mut&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;ViewInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;ViewOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; input.level_up_menu_view
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Define a decorator which knows how to render the menu on top of the game, dimming the game in the background.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuDecorate;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Decorate &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;LevelUpMenuDecorate {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppView;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;E, F, C&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;Self::&lt;&#x2F;span&gt;&lt;span&gt;Data,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;event_routine_view: EventRoutineView&amp;lt;E&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;        E: EventRoutine&amp;lt;Data = &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Data, View = &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;View&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        F: Frame,
&lt;&#x2F;span&gt;&lt;span&gt;        C: ColModify,
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        BoundView {
&lt;&#x2F;span&gt;&lt;span&gt;            size: data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            view: AlignView {
&lt;&#x2F;span&gt;&lt;span&gt;                alignment: Alignment::centre(),
&lt;&#x2F;span&gt;&lt;span&gt;                view: FillBackgroundView {
&lt;&#x2F;span&gt;&lt;span&gt;                    rgb24: Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    view: BorderView {
&lt;&#x2F;span&gt;&lt;span&gt;                        style: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;BorderStyle {
&lt;&#x2F;span&gt;&lt;span&gt;                            title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Level Up&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;                            title_style: Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span&gt;::default()
&lt;&#x2F;span&gt;&lt;span&gt;                        },
&lt;&#x2F;span&gt;&lt;span&gt;                        view: MinSizeView {
&lt;&#x2F;span&gt;&lt;span&gt;                            size: Size::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                            view: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; event_routine_view,
&lt;&#x2F;span&gt;&lt;span&gt;                        },
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(data, context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_depth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;), frame);
&lt;&#x2F;span&gt;&lt;span&gt;        event_routine_view.view.game_view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data.game_state,
&lt;&#x2F;span&gt;&lt;span&gt;            context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;compose_col_modify&lt;&#x2F;span&gt;&lt;span&gt;(ColModifyMap(|c: Rgb24| c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;saturating_scalar_mul_div&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))),
&lt;&#x2F;span&gt;&lt;span&gt;            frame,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        event_routine_view
&lt;&#x2F;span&gt;&lt;span&gt;            .view
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;render_ui&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data, context, frame);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And define a function returning an &lt;code&gt;impl EventRoutine&amp;lt;...&amp;gt;&lt;&#x2F;code&gt; which runs the menu
and “returns” the level-up or cancellation selected by the player.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;level_up_menu&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;    Return = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LevelUp, menu::Escape&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    Data = AppData,
&lt;&#x2F;span&gt;&lt;span&gt;    View = AppView,
&lt;&#x2F;span&gt;&lt;span&gt;    Event = CommonEvent,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    MenuInstanceRoutine::new(LevelUpMenuSelect)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;convert_input_to_common_event&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;decorated&lt;&#x2F;span&gt;&lt;span&gt;(LevelUpMenuDecorate)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Phew. Developer note: Adding menus currently requires a lot of boilerplate. The common patterns should be encapsulated
into helpers inside the &lt;code&gt;chargrid&lt;&#x2F;code&gt; library.&lt;&#x2F;p&gt;
&lt;p&gt;Add the data and view fields to &lt;code&gt;AppData&lt;&#x2F;code&gt; and &lt;code&gt;AppView&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    level_up_menu: MenuInstanceChooseOrEscape&amp;lt;LevelUp&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size, rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, visibility_algorithm: VisibilityAlgorithm) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            level_up_menu: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;level_up_menu_instance&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AppView {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    level_up_menu_view: LevelUpMenuView,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            level_up_menu_view: LevelUpMenuView::default(),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update &lt;code&gt;AppData::handle_input&lt;&#x2F;code&gt; such that when ‘&amp;gt;’ is pressed, rather than immediately descending,
return a new &lt;code&gt;GameReturn&lt;&#x2F;code&gt; representing the fact that a level-up menu should be run.
Also add a helper function for applying the &lt;code&gt;LevelUp&lt;&#x2F;code&gt; and descending the player.
Run the visibility system after descending so that the next time the game state is rendered
there are visible cells from the new level.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;GameReturn {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    LevelUpAndDescend,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;handle_input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, input: Input) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;GameReturn&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; input {
&lt;&#x2F;span&gt;&lt;span&gt;            Input::Keyboard(key) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; key {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                    KeyboardInput::Char(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_player_on_stairs&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(GameReturn::LevelUpAndDescend);
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_level_up_and_descend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, level_up: LevelUp) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_level_up_and_descend&lt;&#x2F;span&gt;&lt;span&gt;(level_up);
&lt;&#x2F;span&gt;&lt;span&gt;        self.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;update_visibility&lt;&#x2F;span&gt;&lt;span&gt;(self.visibility_algorithm);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And update &lt;code&gt;game_loop&lt;&#x2F;code&gt; to handle &lt;code&gt;LevelUpAndDescend&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;game_loop&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;Return = (), Data = AppData, View = AppView, Event = CommonEvent&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; D &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; E &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; F);
&lt;&#x2F;span&gt;&lt;span&gt;    Loop::new(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        GameEventRoutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|game_return| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; game_return {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::LevelUpAndDescend &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::F(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;level_up_menu&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|maybe_level_up| {
&lt;&#x2F;span&gt;&lt;span&gt;                SideEffect::new_with_view(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span&gt;data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AppData, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;_| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; maybe_level_up {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(menu::Escape) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(level_up) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_level_up_and_descend&lt;&#x2F;span&gt;&lt;span&gt;(level_up),
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;                })
&lt;&#x2F;span&gt;&lt;span&gt;            })),
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;return_on_exit&lt;&#x2F;span&gt;&lt;span&gt;(|data| data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;save_game&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now when the player hits ‘&amp;gt;’ while standing on the stairs, they see a menu like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If they make a selection, the relevant stat will increase, and they’ll descend to the next dungeon level.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-11.4&quot;&gt;part-11.4&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-12&#x2F;&quot;&gt;Click here for the next part!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Time to stop using language managers</title>
        <published>2020-08-09T00:00:00+00:00</published>
        <updated>2020-08-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/time-to-stop-using-language-managers/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/time-to-stop-using-language-managers/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/time-to-stop-using-language-managers/">&lt;p&gt;A few days ago I listed some problems I need to solve before I consider switching to OpenBSD in earnest.
Getting nodejs to compile with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvm-sh&#x2F;nvm&quot;&gt;the nodejs version manager&lt;&#x2F;a&gt; was one such problem.
NVM is a tool for managing the concurrent installation of multiple different versions of nodejs.
When possible it downloads binary distributions of nodejs, but in uncommon environments such as OpenBSD
it builds nodejs from source.&lt;&#x2F;p&gt;
&lt;p&gt;Without modifications to its source code, nodejs does not build on OpenBSD.
Last night I figured out how to get nodejs to build.
There’s a couple of places where it assumes that FreeBSD is the only BSD.
Only after getting it working did it occur to
me to just look in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openbsd&#x2F;ports&#x2F;tree&#x2F;master&#x2F;lang&#x2F;node&quot;&gt;ports tree&lt;&#x2F;a&gt;
which contains the patches necessary to get nodejs to build on OpenBSD.&lt;&#x2F;p&gt;
&lt;p&gt;I don’t want to let language vendors dictate my choice of operating system.
The port maintainers go to the trouble of patching language implementations for OpenBSD,
and I don’t want to duplicate their efforts. If I’m not going to use nvm I may as well just use
the binary nodejs package for OpenBSD.&lt;&#x2F;p&gt;
&lt;p&gt;That leaves the question of what to do about projects
that depend on old versions old nodejs. I only have a handful of these (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;roguelike-lighting-demo&#x2F;&quot;&gt;such as this one&lt;&#x2F;a&gt;),
and I’m not actively working on any of them. It would just be nice if they continued to compile.
That said, I don’t expect to need to build them very often, so going out of my way to make the process easy
by using a version manager is not worth it. &lt;em&gt;If&lt;&#x2F;em&gt; I ever need to build these projects again,
I can just compile the correct version of nodejs myself (possibly using patches from the ports tree as a reference),
or just run a different OS in a virtual machine.&lt;&#x2F;p&gt;
&lt;p&gt;I also use &lt;a href=&quot;http:&#x2F;&#x2F;rvm.io&#x2F;&quot;&gt;the ruby version manager&lt;&#x2F;a&gt; to manage installations of ruby.
The only reason I started using this was to get around some long forgotten problem I had
years ago installing ruby with apt on ubuntu.
The only purpose I have for ruby is this website. It’s very simple and easy to keep up to date, so
managing multiple ruby versions is not something I need. The ruby packages in FreeBSD and OpenBSD both
work perfectly fine, so bye bye rvm.&lt;&#x2F;p&gt;
&lt;p&gt;Finally there’s &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt;. This one’s a little harder to live without.
On OpenBSD this decision is made for me, as the rust project doesn’t have binaries available
anyway. The problem is that people who use rust (myself included) get really excited about
new language features, and start using them in their projects right away.
OpenBSD has binary rust packages available, but at the time of writing they’re several
versions out of date (at the time of writing 1.42 compared to 1.45).
The rust language server &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-analyzer&#x2F;rust-analyzer&quot;&gt;rust-analyser&lt;&#x2F;a&gt;
requires 1.43 of the compiler. I also occasionally rely on the ability to switch back and
forth between the stable and nightly versions of the rust compiler to enable experimental features.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll stop using nvm and rvm which will greatly simplify my setup. I’ll continue to use rustup, and look forward to it becoming
available on OpenBSD.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Roguelike Tutorial - Levelling up the player character</title>
        <published>2020-08-08T00:00:00+00:00</published>
        <updated>2020-08-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/roguelike-tutorial-levelling-up-the-player-character/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/roguelike-tutorial-levelling-up-the-player-character/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/roguelike-tutorial-levelling-up-the-player-character/">&lt;p&gt;I’m working on a series of roguelike tutorials as part of
&lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;roguelikedev&#x2F;wiki&#x2F;python_tutorial_series&quot;&gt;roguelikedev subreddit does the complete
roguelike tutorial&lt;&#x2F;a&gt;.
Today I updated the game so when the player descends to the next level of
the dungeon they are presented with a “level up” menu.
This required adding some stats like strength and intelligence.
For the first time the game feels like a real game.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll post the tutorial pages in a couple of days.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenBSD</title>
        <published>2020-08-07T00:00:00+00:00</published>
        <updated>2020-08-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/openbsd/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/openbsd/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/openbsd/">&lt;p&gt;I’ve been toying around with OpenBSD in a virtual machine to see whether I could
switch to it as a daily driver. I’m attracted to the project because of its
emphasis on minimalism and security. There’s a few things I need to figure out
before I can be as productive in OpenBSD as I am in Linux (which I use in most places)
or FreeBSD (which I recently switched to on my personal laptop).&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the rust compiler tools aren’t available from the rust project (via &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt;)
compiled for OpenBSD (but rustc and cargo are in the package repository, just several versions out of date)&lt;&#x2F;li&gt;
&lt;li&gt;the popular rust audio library &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cpal&quot;&gt;cpal&lt;&#x2F;a&gt; doesn’t appear to support OpenBSD.
Currently it depends on alsa on unixes, which works on Linux, and FreeBSD (which emulates alsa) but
OpenBSD has no interest in Linux compatibility (which is fair enough!).&lt;&#x2F;li&gt;
&lt;li&gt;nodejs doesn’t compile in its default configuration as it depends on libdl which doesn’t exist in OpenBSD.
The only reason it exists in FreeBSD for (again) compatibility with Linux.
I use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvm-sh&#x2F;nvm&quot;&gt;nvm&lt;&#x2F;a&gt;
to manage multiple versions of nodejs, and it builds nodejs from source when no binary distribution is
available. You can pass configuration flags to nvm which it passes on to
nodejs’s build system. Just got to work out the right ones to get it to build on OpenBSD.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I can live without rustup. It also wouldn’t surprise me if it got support for OpenBSD at some point.
I’ll probably have to add OpenBSD support to cpal as alsa isn’t (and shouldn’t) be available on OpenBSD.
There’s got to be a way to configure nodejs to build on OpenBSD. Need to do some more reading.
These aren’t problems on FreeBSD because FreeBSD tries to be compatible with Linux.
The lack of this on OpenBSD is a selling point, but it does come at a cost of convenience.
There’s a few things I still need to learn before I can live with this inconvenience.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>stevebob.net</title>
        <published>2020-08-06T00:00:00+00:00</published>
        <updated>2020-08-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/stevebob-net/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/stevebob-net/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/stevebob-net/">&lt;p&gt;Back in 2010 (which wow - over 10 years ago!) I made a little website
&lt;a href=&quot;https:&#x2F;&#x2F;stevebob.net&quot;&gt;stevebob.net&lt;&#x2F;a&gt; for storiing hobby projects - mostly
graphical demos written in javascript. I spent about 5 years posting demos,
and later blog posts, on stevebob.net. I haven’t touched it since 2014,
which was around the time I started gridbugs.org (originally takestairs.org)
to post about game development.&lt;&#x2F;p&gt;
&lt;p&gt;Last night I was finishing migrating gridbugs.org to
&lt;a href=&quot;https:&#x2F;&#x2F;www.nearlyfreespeech.net&#x2F;&quot;&gt;nearlyfreespeech&lt;&#x2F;a&gt;,
and I spotted the stevebob.net s3 bucket and decided to migrate it here as well.
I did some minor touch ups, removed some out-of-date details, and fixed
the easter egg on the home page where there’s an interactive console
under the site heading.&lt;&#x2F;p&gt;
&lt;p&gt;I also wrote one last post - a sign off - so when you visit the site the first
thing you see isn’t the last thing I happened to post before I stopped updating it.
I made my own CMS for stevebob.net because at the time I wanted to do everything
from scratch. The CMS is a bunch of ancient ruby, shell, make, and probably other
scripts cobbled together that generate static html. I’m not even going to attempt to run these.
Fortunately the static html files generated last time I ran the scripts are handy,
so I just added links to my final post to the relevant files.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Replace all the CSS!</title>
        <published>2020-08-05T00:00:00+00:00</published>
        <updated>2020-08-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/replace-all-the-css/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/replace-all-the-css/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/replace-all-the-css/">&lt;p&gt;Last night I rewrote all the CSS in this site.
This site started its life with the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;minima&quot;&gt;minima&lt;&#x2F;a&gt;
theme, and I’ve been gradually replacing parts until there’s almost nothing
of the original templates left. I’d been hacking on its original CSS for
years and it was growing into a tangled mess which I only partially understood.&lt;&#x2F;p&gt;
&lt;p&gt;So I deleted all the stylesheets (except syntax highlighting) and all the &lt;code&gt;class&lt;&#x2F;code&gt;
tags, and most &lt;code&gt;div&lt;&#x2F;code&gt; wrapper elements I was using for style, then rebuilt the
style to be the bare minimum to make the site look basically the same as before.
I now understand why every CSS rule is the way it is, and I can change the rules
in the future with confidence.&lt;&#x2F;p&gt;
&lt;p&gt;The hardest part was getting the nav bar along the top to behave sensibly when
the screen is narrow (e.g. on a phone). Previously it would replace the links
with a drop-down menu using a trick
involving a checkbox input element which I only learnt about when I viewed
the site without any CSS and still don’t understand how it worked.
In the interest of making the CSS simpler, I got rid of the drop-down menu
and now the nav links wrap around and have some minor style changes
when the screen width gets below a certain value.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I&#x27;ll probably move this site to nearlyfreespeech</title>
        <published>2020-08-04T00:00:00+00:00</published>
        <updated>2020-08-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/i-ll-probably-move-this-site-to-nearlyfreespeech/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/i-ll-probably-move-this-site-to-nearlyfreespeech/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/i-ll-probably-move-this-site-to-nearlyfreespeech/">&lt;p&gt;I recently grew frustrated with the infrastructure running this website.
At the time of writing it’s hosted on amazon s3, using cloudfront for
caching and managing certificates. S3 seems to have some issues with mime
types requiring occasional manual fixups through the aws console and
explicit cache invalidations. I’m sure (or at least I hope) that there’s a
way to configure aws to better suite my needs, but I’m also not &lt;em&gt;in love&lt;&#x2F;em&gt; with
amazon as a company, so I’ve started exploring alternatives.&lt;&#x2F;p&gt;
&lt;p&gt;This site is about as simple as a website can be - it’s a directory of
static html files (generated with jekyll, but the server doesn’t need
to worry about that), so I can host it pretty much anywhere.
I’ve been messing around with &lt;a href=&quot;https:&#x2F;&#x2F;www.nearlyfreespeech.net&#x2F;&quot;&gt;nearlyfreespeech&lt;&#x2F;a&gt;
and even set up a &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.nfshost.com&#x2F;&quot;&gt;version of this site&lt;&#x2F;a&gt;
there to see how easy it would be to set up and I can only describe the
process as “no nonsense”!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 10 - Saving and Loading</title>
        <published>2020-08-03T19:00:00+10:00</published>
        <updated>2020-08-03T19:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-10/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-10/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-10/">&lt;p&gt;In this part we’ll make it possible to save and load games, and add a main menu.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-10&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This part is loosely based on &lt;a href=&quot;http:&#x2F;&#x2F;rogueliketutorials.com&#x2F;tutorials&#x2F;tcod&#x2F;part-10&#x2F;&quot;&gt;this part&lt;&#x2F;a&gt; of the
python tcod tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch for starting point: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-9-end&quot;&gt;part-9-end&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this post:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-10&#x2F;#serializing-game-state&quot;&gt;Serializing Game State&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-10&#x2F;#main-menu&quot;&gt;Main Menu&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-10&#x2F;#saving&quot;&gt;Saving&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-10&#x2F;#loading&quot;&gt;Loading&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;serializing-game-state&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#serializing-game-state&quot; aria-label=&quot;Anchor link for: serializing-game-state&quot;&gt;Serializing Game State&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In order to save the game, we must describe a way to convert the &lt;code&gt;GameState&lt;&#x2F;code&gt;
type to and from a sequence of bytes which can be stored in a file.
In rust, the typical way to do this is using a crate called &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;serde&lt;&#x2F;a&gt;.
It defines traits &lt;code&gt;Serialize&lt;&#x2F;code&gt; and &lt;code&gt;Deserialize&lt;&#x2F;code&gt;, which can be derived on a type
just like &lt;code&gt;Clone&lt;&#x2F;code&gt;, &lt;code&gt;Copy&lt;&#x2F;code&gt;, &lt;code&gt;Debug&lt;&#x2F;code&gt;, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Many of the crates our game depend on can be configured to use serde to make the types they define
implement &lt;code&gt;Serialize&lt;&#x2F;code&gt; and &lt;code&gt;Deserilaize&lt;&#x2F;code&gt;. The &lt;code&gt;GameState&lt;&#x2F;code&gt; type contains many types imported from
crates. The first step is to configure these crates to allow the types they define to be serialized.
Update the &lt;code&gt;[dependencies]&lt;&#x2F;code&gt; section of &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; to look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;chargrid_graphical &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.7&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;chargrid &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;coord_2d &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;grid_2d &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.15&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;rgb24 &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;direction &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.18&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;rand&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;entity_table &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;spatial_table &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;rand &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.8&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;rand_isaac &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serde1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;shadowcast &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;meap &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.4&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;grid_search_cardinal &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;line_2d &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.5&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serialize&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;serde &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;1.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;serde_derive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the addition of the &lt;code&gt;serde&lt;&#x2F;code&gt; crate.
Most existing crates have had a feature enabled which turn on serialization.&lt;&#x2F;p&gt;
&lt;p&gt;Now in &lt;code&gt;game.rs&lt;&#x2F;code&gt;, import the &lt;code&gt;Serialize&lt;&#x2F;code&gt; and &lt;code&gt;Deserialize&lt;&#x2F;code&gt; traits from &lt;code&gt;serde&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::{Deserialize, Serialize};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…and derive them for the &lt;code&gt;GameState&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(Serialize, Deserialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The derived implementation of (de)serialization will invoke the (de)serialization
methods for each of its fields. Some of its fields won’t &lt;em&gt;have&lt;&#x2F;em&gt; (de)serialization
methods yet, so you’ll see many errors of the form:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;the trait `serde::Deserialize&amp;lt;&amp;#39;_&amp;gt;` is not implemented for &amp;lt;type&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;&amp;lt;type&amp;gt;&lt;&#x2F;code&gt; is a type defined in the game’s code.&lt;&#x2F;p&gt;
&lt;p&gt;For each type that produces this error, derive the &lt;code&gt;Serialize&lt;&#x2F;code&gt; and &lt;code&gt;Deserialize&lt;&#x2F;code&gt; traits.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-10.0&quot;&gt;part-10.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;main-menu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#main-menu&quot; aria-label=&quot;Anchor link for: main-menu&quot;&gt;Main Menu&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now let’s add a main menu.&lt;&#x2F;p&gt;
&lt;p&gt;Start by defining the main menu entry, view, select, and decorator types, and a function returning an &lt;code&gt;EventRoutine&lt;&#x2F;code&gt;, much as we did
for the inventory menu:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Clone, Copy, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;MainMenuEntry {
&lt;&#x2F;span&gt;&lt;span&gt;    NewGame,
&lt;&#x2F;span&gt;&lt;span&gt;    Resume,
&lt;&#x2F;span&gt;&lt;span&gt;    Quit,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main_menu_instance&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; MenuInstanceChooseOrEscape&amp;lt;MainMenuEntry&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;MainMenuEntry::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    MenuInstanceBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;        items: vec![Resume, NewGame, Quit],
&lt;&#x2F;span&gt;&lt;span&gt;        hotkeys: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(hashmap![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;r&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Resume, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NewGame, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;q&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Quit]),
&lt;&#x2F;span&gt;&lt;span&gt;        selected_index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;into_choose_or_escape&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MainMenuView {
&lt;&#x2F;span&gt;&lt;span&gt;    mouse_tracker: MenuInstanceMouseTracker,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MenuIndexFromScreenCoord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MainMenuView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;menu_index_from_screen_coord&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, len: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, coord: Coord) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.mouse_tracker.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;menu_index_from_screen_coord&lt;&#x2F;span&gt;&lt;span&gt;(len, coord)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; AppData&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MainMenuView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; AppData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.mouse_tracker.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_frame&lt;&#x2F;span&gt;&lt;span&gt;(context.offset);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;entry, maybe_selected) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; data.main_menu.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;menu_instance&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(prefix, style) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= if&lt;&#x2F;span&gt;&lt;span&gt; maybe_selected.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                (
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    Style::new()
&lt;&#x2F;span&gt;&lt;span&gt;                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_bold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                )
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; entry {
&lt;&#x2F;span&gt;&lt;span&gt;                MainMenuEntry::Resume &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;(r) Resume&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                MainMenuEntry::NewGame &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;(n) New Game&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                MainMenuEntry::Quit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;(q) Quit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; size &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;StringViewSingleLine::new(style).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view_size&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, prefix, text),
&lt;&#x2F;span&gt;&lt;span&gt;                context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as i32&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                frame,
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;            self.mouse_tracker.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;on_entry_view_size&lt;&#x2F;span&gt;&lt;span&gt;(size);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MainMenuSelect;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ChooseSelector &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MainMenuSelect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ChooseOutput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;MenuInstanceChooseOrEscape&amp;lt;MainMenuEntry&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;choose_mut&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;DataInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;ChooseOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; input.main_menu
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;DataSelector &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MainMenuSelect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;DataInput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;DataOutput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a Self::&lt;&#x2F;span&gt;&lt;span&gt;DataInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a Self::&lt;&#x2F;span&gt;&lt;span&gt;DataOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        input
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;data_mut&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;DataInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;DataOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        input
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ViewSelector &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MainMenuSelect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ViewInput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppView;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ViewOutput &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; MainMenuView;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a Self::&lt;&#x2F;span&gt;&lt;span&gt;ViewInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a Self::&lt;&#x2F;span&gt;&lt;span&gt;ViewOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;input.main_menu_view
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view_mut&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, input: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;ViewInput) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a mut Self::&lt;&#x2F;span&gt;&lt;span&gt;ViewOutput {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; input.main_menu_view
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MainMenuDecorate;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Decorate &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MainMenuDecorate {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppView;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;E, F, C&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;Self::&lt;&#x2F;span&gt;&lt;span&gt;Data,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;event_routine_view: EventRoutineView&amp;lt;E&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;        E: EventRoutine&amp;lt;Data = &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Data, View = &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;View&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        F: Frame,
&lt;&#x2F;span&gt;&lt;span&gt;        C: ColModify,
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        BoundView {
&lt;&#x2F;span&gt;&lt;span&gt;            size: data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            view: AlignView {
&lt;&#x2F;span&gt;&lt;span&gt;                alignment: Alignment::centre(),
&lt;&#x2F;span&gt;&lt;span&gt;                view: FillBackgroundView {
&lt;&#x2F;span&gt;&lt;span&gt;                    rgb24: Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    view: BorderView {
&lt;&#x2F;span&gt;&lt;span&gt;                        style: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;BorderStyle {
&lt;&#x2F;span&gt;&lt;span&gt;                            title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            title_style: Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span&gt;::default()
&lt;&#x2F;span&gt;&lt;span&gt;                        },
&lt;&#x2F;span&gt;&lt;span&gt;                        view: MinSizeView {
&lt;&#x2F;span&gt;&lt;span&gt;                            size: Size::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                            view: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; event_routine_view,
&lt;&#x2F;span&gt;&lt;span&gt;                        },
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(data, context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_depth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;), frame);
&lt;&#x2F;span&gt;&lt;span&gt;        event_routine_view.view.game_view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data.game_state,
&lt;&#x2F;span&gt;&lt;span&gt;            context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;compose_col_modify&lt;&#x2F;span&gt;&lt;span&gt;(ColModifyMap(|c: Rgb24| c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;saturating_scalar_mul_div&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))),
&lt;&#x2F;span&gt;&lt;span&gt;            frame,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        event_routine_view
&lt;&#x2F;span&gt;&lt;span&gt;            .view
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;render_ui&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data, context, frame);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main_menu&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;    Return = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MainMenuEntry, menu::Escape&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    Data = AppData,
&lt;&#x2F;span&gt;&lt;span&gt;    View = AppView,
&lt;&#x2F;span&gt;&lt;span&gt;    Event = CommonEvent,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    MenuInstanceRoutine::new(MainMenuSelect)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;convert_input_to_common_event&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;decorated&lt;&#x2F;span&gt;&lt;span&gt;(MainMenuDecorate)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the &lt;code&gt;hashmap!&lt;&#x2F;code&gt; macro used to specify hotkeys for the main menu.
This is from a crate called &lt;code&gt;maplit&lt;&#x2F;code&gt;, which needs to be imported.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;maplit &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;maplit::hashmap;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add the relevant main menu types to &lt;code&gt;AppData&lt;&#x2F;code&gt; and &lt;code&gt;AppView&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    main_menu: MenuInstanceChooseOrEscape&amp;lt;MainMenuEntry&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Data {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size, rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, visibility_algorithm: VisibilityAlgorithm) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            main_menu: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;main_menu_instance&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AppView {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    main_menu_view: MainMenuView,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            main_menu_view: MainMenuView::default(),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the moment, when the escape key is pressed, the game exits. Let’s change it so that the
menu opens instead. There’s no longer a need for the &lt;code&gt;GameReturn::Exit&lt;&#x2F;code&gt; variant, so remove it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;GameReturn {
&lt;&#x2F;span&gt;&lt;span&gt;    Menu,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;handle_input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, input: Input) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;GameReturn&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; input {
&lt;&#x2F;span&gt;&lt;span&gt;            Input::Keyboard(key) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; key {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                    keys::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ESCAPE &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(GameReturn::Menu),
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Handle the &lt;code&gt;GameReturn::Menu&lt;&#x2F;code&gt; value in &lt;code&gt;game_loop&lt;&#x2F;code&gt;. Have it run the &lt;code&gt;main_menu()&lt;&#x2F;code&gt; event routine
and handle the choice from that menu.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;game_loop&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;Return = (), Data = AppData, View = AppView, Event = CommonEvent&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; D &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; E);
&lt;&#x2F;span&gt;&lt;span&gt;    Loop::new(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        GameEventRoutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|game_return| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; game_return {
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::Menu &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;main_menu&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|choice| {
&lt;&#x2F;span&gt;&lt;span&gt;                make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; choice {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(menu::Escape) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::A(Value::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(MainMenuEntry::Resume) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::A(Value::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(MainMenuEntry::Quit) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::A(Value::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(()))),
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(MainMenuEntry::NewGame) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        Ei::B(SideEffect::new_with_view(|data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AppData, _: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;_| {
&lt;&#x2F;span&gt;&lt;span&gt;                            data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_game&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;                        }))
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })),
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::GameOver &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;game_over&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|()| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(()))),
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::UseItem &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::C(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;use_item&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::DropItem &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::D(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;drop_item&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::Examine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::E(TargetEventRoutine { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;EXAMINE&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;return_on_exit&lt;&#x2F;span&gt;&lt;span&gt;(|_| ())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the &lt;code&gt;NewGame&lt;&#x2F;code&gt; case, we’re calling a &lt;code&gt;.new_game()&lt;&#x2F;code&gt; method of &lt;code&gt;AppData&lt;&#x2F;code&gt; which we’ve yet to implement.
Implement this now. This will require adding some fields to &lt;code&gt;AppData&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    game_area_size: Size,
&lt;&#x2F;span&gt;&lt;span&gt;    rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size, rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, visibility_algorithm: VisibilityAlgorithm) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; game_area_size &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; screen_size.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;set_height&lt;&#x2F;span&gt;&lt;span&gt;(screen_size.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;UI_NUM_ROWS&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            game_area_size,
&lt;&#x2F;span&gt;&lt;span&gt;            rng_seed,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new_game&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.rng_seed &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.rng_seed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;wrapping_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        self.game_state &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;GameState::new(
&lt;&#x2F;span&gt;&lt;span&gt;            self.game_area_size,
&lt;&#x2F;span&gt;&lt;span&gt;            self.rng_seed,
&lt;&#x2F;span&gt;&lt;span&gt;            self.visibility_algorithm,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The rng seed is incremented so each time a new game is started, its random number generator is
in a different state, and the level will be generated differently.
Since the rng seed is changing mid-game, rather than being set once at startup, move
the code that prints the rng seed from &lt;code&gt;main&lt;&#x2F;code&gt; to &lt;code&gt;GameState::new&lt;&#x2F;code&gt;, so if you observe
an error after hitting &lt;code&gt;New Game&lt;&#x2F;code&gt; several times, it’s still possible to easily reproduce it.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have the ability to start a new game, change &lt;code&gt;game_loop&lt;&#x2F;code&gt; again so that when the player dies,
a new game is started.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;game_loop&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;Return = (), Data = AppData, View = AppView, Event = CommonEvent&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; D &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; E);
&lt;&#x2F;span&gt;&lt;span&gt;    Loop::new(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        GameEventRoutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|game_return| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; game_return {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::GameOver &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;game_over&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|()| {
&lt;&#x2F;span&gt;&lt;span&gt;                SideEffect::new_with_view(|data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AppData, _: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;_| {
&lt;&#x2F;span&gt;&lt;span&gt;                    data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_game&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;                })
&lt;&#x2F;span&gt;&lt;span&gt;            })),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;return_on_exit&lt;&#x2F;span&gt;&lt;span&gt;(|_| ())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-10&#x2F;menu1.png&quot; alt=&quot;menu1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-10.1&quot;&gt;part-10.1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;saving&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#saving&quot; aria-label=&quot;Anchor link for: saving&quot;&gt;Saving&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Add the &lt;code&gt;general_storage_file&lt;&#x2F;code&gt; crate which will help with storing and retrieving serialized state in a file.
The goal of this crate is to present an abstract view of persistent data, backed by files in a directory.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;general_storage_file &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;compress&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the &lt;code&gt;json&lt;&#x2F;code&gt; and &lt;code&gt;compress&lt;&#x2F;code&gt; features. This crate lets you choose between a number of different data serialization
formats, but all are disabled by default and require explicit features to enable. This is because each format
depends on additional crates. We reduce the transitive dependencies of our game by only adding storage
formats which we need.&lt;&#x2F;p&gt;
&lt;p&gt;Now in &lt;code&gt;app.rs&lt;&#x2F;code&gt;, start using the crate, and define some constants that will configure how we use the crate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;general_storage_file::{format, FileStorage, IfDirectoryMissing, Storage};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_DIR&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;save&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FILE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;save&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FORMAT&lt;&#x2F;span&gt;&lt;span&gt;: format::Compress&amp;lt;format::Json&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format::Compress(format::Json);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;SAVE_DIR&lt;&#x2F;code&gt; is the directory in which the save file will be placed. &lt;code&gt;SAVE_FILE&lt;&#x2F;code&gt; is the name of the file
which will contain the save game. &lt;code&gt;SAVE_FORMAT&lt;&#x2F;code&gt; defines how the game’s state will be serialized.
&lt;code&gt;format::Compress(format::Json)&lt;&#x2F;code&gt; means create a json string representing the game’s state, then
compress that (with gzip). An alternative format, &lt;code&gt;format::Bincode&lt;&#x2F;code&gt;
is available with the &lt;code&gt;bincode&lt;&#x2F;code&gt; feature flag, which serializes with the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bincode&quot;&gt;bincode&lt;&#x2F;a&gt;
crate. It’s not used here, as it causes programs to crash if the type definitions change between
serializing and deserializing data (which &lt;em&gt;will&lt;&#x2F;em&gt; happen here as we’re constantly adding to this game!).
In contrast, the json serializer just returns an error in this situation. Switch to bincode once the
game is finished.&lt;&#x2F;p&gt;
&lt;p&gt;Replace &lt;code&gt;MainMenu::Quit&lt;&#x2F;code&gt; with &lt;code&gt;MainMenu::SaveAndQuit&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;MainMenuEntry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    SaveAndQuit,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main_menu_instance&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; MenuInstanceChooseOrEscape&amp;lt;MainMenuEntry&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;MainMenuEntry::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    MenuInstanceBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;        items: vec![Resume, NewGame, SaveAndQuit],
&lt;&#x2F;span&gt;&lt;span&gt;        hotkeys: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(hashmap![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;r&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Resume, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NewGame, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;q&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SaveAndQuit]),
&lt;&#x2F;span&gt;&lt;span&gt;        selected_index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;into_choose_or_escape&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; AppData&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MainMenuView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; AppData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.mouse_tracker.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_frame&lt;&#x2F;span&gt;&lt;span&gt;(context.offset);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;entry, maybe_selected) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; data.main_menu.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;menu_instance&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; entry {
&lt;&#x2F;span&gt;&lt;span&gt;                MainMenuEntry::Resume &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;(r) Resume&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                MainMenuEntry::NewGame &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;(n) New Game&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                MainMenuEntry::SaveAndQuit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;(q) Save and Quit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;game_loop&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;Return = (), Data = AppData, View = AppView, Event = CommonEvent&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; D &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; E);
&lt;&#x2F;span&gt;&lt;span&gt;    Loop::new(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        GameEventRoutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|game_return| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; game_return {
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::Menu &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;main_menu&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|choice| {
&lt;&#x2F;span&gt;&lt;span&gt;                make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; choice {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(MainMenuEntry::SaveAndQuit) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        Ei::C(SideEffect::new_with_view(|data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AppData, _: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;_| {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;                        }))
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;return_on_exit&lt;&#x2F;span&gt;&lt;span&gt;(|data| data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;save_game&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Implement a method for saving the game state to a file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;save_game&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file_storage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match &lt;&#x2F;span&gt;&lt;span&gt;FileStorage::next_to_exe(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_DIR&lt;&#x2F;span&gt;&lt;span&gt;, IfDirectoryMissing::Create)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(file_storage) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; file_storage,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(error) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                eprintln!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Failed to save game: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, error);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Saving to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, file_storage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;full_path&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FILE&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; file_storage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FILE&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.game_state, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FORMAT&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(()) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(error) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                eprintln!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Failed to save game: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, error);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It creates a directory called “save” next to the game’s executable, and serializes the game’s state
into a file in this directory, also called “save”.&lt;&#x2F;p&gt;
&lt;p&gt;Now call this method from &lt;code&gt;game_loop&lt;&#x2F;code&gt;, both when &lt;code&gt;SaveAndQuit&lt;&#x2F;code&gt; is selected from the main menu, and when
the game is closed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;game_loop&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;Return = (), Data = AppData, View = AppView, Event = CommonEvent&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; D &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; E);
&lt;&#x2F;span&gt;&lt;span&gt;    Loop::new(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        GameEventRoutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|game_return| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; game_return {
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::Menu &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;main_menu&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|choice| {
&lt;&#x2F;span&gt;&lt;span&gt;                make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; choice {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(MainMenuEntry::SaveAndQuit) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        Ei::C(SideEffect::new_with_view(|data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AppData, _: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;_| {
&lt;&#x2F;span&gt;&lt;span&gt;                            data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;save_game&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;                        }))
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            })),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;return_on_exit&lt;&#x2F;span&gt;&lt;span&gt;(|data| data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;save_game&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-10.2&quot;&gt;part-10.2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#loading&quot; aria-label=&quot;Anchor link for: loading&quot;&gt;Loading&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Define a method in &lt;code&gt;AppData&lt;&#x2F;code&gt; which attempts to deserialize a game state from a file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;load_game&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;GameState&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; file_storage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match &lt;&#x2F;span&gt;&lt;span&gt;FileStorage::next_to_exe(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_DIR&lt;&#x2F;span&gt;&lt;span&gt;, IfDirectoryMissing::Create) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(file_storage) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; file_storage,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(error) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                eprintln!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Failed to load game: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, error);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;file_storage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FILE&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Loading from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, file_storage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;full_path&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FILE&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; file_storage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FILE&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;SAVE_FORMAT&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(game_state) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(game_state),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(error) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                eprintln!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Failed to load game: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, error);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If it fails to deserialize the state, it prints a warning and continues.
This will likely happen from time to time, since the (de)serialization logic is derived from
the structure of the types used in the game. Whenever we change the definition of a type,
the game is no longer able to understand the serialized representation of the old versions
of these types.&lt;&#x2F;p&gt;
&lt;p&gt;Call &lt;code&gt;load_game&lt;&#x2F;code&gt; when creating a new &lt;code&gt;AppData&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size, rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, visibility_algorithm: VisibilityAlgorithm) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; game_state &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= Self&lt;&#x2F;span&gt;&lt;span&gt;::load_game()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| GameState::new(game_area_size, rng_seed, visibility_algorithm));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-10.3&quot;&gt;part-10.3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-11&#x2F;&quot;&gt;Click here for the next part!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Distro Hopping</title>
        <published>2020-08-03T00:00:00+00:00</published>
        <updated>2020-08-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/daily/distro-hopping/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/daily/distro-hopping/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/daily/distro-hopping/">&lt;h2 id=&quot;first-post&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-post&quot; aria-label=&quot;Anchor link for: first-post&quot;&gt;First Post!&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is the beginning of an experiment where I write a short post every day.
The goal is to build up a log of what was at my mind at various points in time
so that I may spot trends or re-visit states of mind from the past. The average
post will likely be shorter and less specific than this one, but if I do it right
there will be one per day.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve configured this site so that daily posts will appear at &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;daily&#x2F;&quot;&gt;&#x2F;daily&lt;&#x2F;a&gt;.
They may optionally contain a title (as this one does).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;distro-hopping&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#distro-hopping&quot; aria-label=&quot;Anchor link for: distro-hopping&quot;&gt;Distro Hopping&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve been spending a long time over the past few weeks experimenting with FreeBSD and OpenBSD,
and even went so far as to install FreeBSD on my laptop (replacing archlinux) to see if
it is viable as a daily driver (so far so good!). Every now and again I flirt with the idea
of moving away from archlinux to something &lt;em&gt;even more&lt;&#x2F;em&gt; minimal. Setting up FreeBSD was mostly
painless once I worked out how to get the trackpad on my Lenovo T470 to work (which was &lt;em&gt;harrowing&lt;&#x2F;em&gt;
(if you’re having trouble with this too, read &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;README.FreeBSD.md&quot;&gt;this&lt;&#x2F;a&gt;)).&lt;&#x2F;p&gt;
&lt;p&gt;There’s nothing about arch
(or linux in general for that matter) that I find particularly problematic. Hating on systemd
has become something of a meme at this point, but I haven’t done enough research to have strong
feelings one way or another.&lt;&#x2F;p&gt;
&lt;p&gt;A phrase I’ve found myself repeating recently is “archlinux was a good OS for my twenties”.
I’m 28, and I’ve been using arch for at least 6 years as the main operating system on all my
computers. Being on the bleeding edge hasn’t been as chaotic as one might think. Notable
exceptions include gnome2 being upgraded to gnome3 (a completely different
desktop environment) with no warning, and pixel font support being pulled from almost all applications
(it was really just pulled from harfbuzz), which was a blessing in disguise as it led me to discover
&lt;a href=&quot;http:&#x2F;&#x2F;st.suckless.org&#x2F;&quot;&gt;st&lt;&#x2F;a&gt; which I’ve been happily using ever since.
It was fun and exciting and it taught me a lot. The &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;&quot;&gt;wiki&lt;&#x2F;a&gt; is by far the
most reliable and comprehensive source of unix knowledge I’ve found, and I’m sure I’ll continue to rely
on it regardless of which OS I run in my thirties.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 9 - Ranged Scrolls and Targeting</title>
        <published>2020-07-29T19:00:00+10:00</published>
        <updated>2020-07-29T19:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-9/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-9/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-9/">&lt;p&gt;In this part we’ll introduce ranged scrolls and targeting.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part it will be possible to launch fireballs and confusion spells.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;launch.png&quot; alt=&quot;launch.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This part is loosely based on &lt;a href=&quot;http:&#x2F;&#x2F;rogueliketutorials.com&#x2F;tutorials&#x2F;tcod&#x2F;part-9&#x2F;&quot;&gt;this part&lt;&#x2F;a&gt; of the
python tcod tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch for starting point: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-8-end&quot;&gt;part-8-end&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this post:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;#examine-command&quot;&gt;Examine Command&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;#fireball-scroll&quot;&gt;Fireball Scroll&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;#launching-fireballs&quot;&gt;Launching Fireballs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;#confusion-scroll&quot;&gt;Confusion Scroll&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;examine-command&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#examine-command&quot; aria-label=&quot;Anchor link for: examine-command&quot;&gt;Examine Command&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As a first step towards ranged abilities, add an examine command that lets th player
use the arrow keys and mouse to move a cursor over the game area.
We’ll add a section to the UI for showing the name of the character or item at the
current cursor position.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll also allow the player to use the mouse to examine a cell during normal gameplay.&lt;&#x2F;p&gt;
&lt;p&gt;Add a type enumerating all the different results of examining a cell.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Clone, Copy, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ExamineCell {
&lt;&#x2F;span&gt;&lt;span&gt;    Npc(NpcType),
&lt;&#x2F;span&gt;&lt;span&gt;    NpcCorpse(NpcType),
&lt;&#x2F;span&gt;&lt;span&gt;    Item(ItemType),
&lt;&#x2F;span&gt;&lt;span&gt;    Player,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a method to &lt;code&gt;World&lt;&#x2F;code&gt; for examining a cell.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::game::{ExamineCell, LogMessage};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;examine_cell&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, coord: Coord) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ExamineCell&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; layers &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;layers_at&lt;&#x2F;span&gt;&lt;span&gt;(coord)&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        layers
&lt;&#x2F;span&gt;&lt;span&gt;            .character
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| layers.object)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|entity| {
&lt;&#x2F;span&gt;&lt;span&gt;                self.components
&lt;&#x2F;span&gt;&lt;span&gt;                    .tile
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;tile| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tile {
&lt;&#x2F;span&gt;&lt;span&gt;                        Tile::Npc(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ExamineCell::Npc(npc_type)),
&lt;&#x2F;span&gt;&lt;span&gt;                        Tile::NpcCorpse(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ExamineCell::NpcCorpse(npc_type)),
&lt;&#x2F;span&gt;&lt;span&gt;                        Tile::Item(item_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ExamineCell::Item(item_type)),
&lt;&#x2F;span&gt;&lt;span&gt;                        Tile::Player &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ExamineCell::Player),
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    })
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a method to &lt;code&gt;GameState&lt;&#x2F;code&gt; for examining a cell at a coordinate &lt;strong&gt;if it is currently visible to the player&lt;&#x2F;strong&gt;.
Also add a method returning the player’s current coordinate which will come in handy soon.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;player_coord&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; Coord {
&lt;&#x2F;span&gt;&lt;span&gt;        self.world
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;entity_coord&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;player has no coord&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;examine_cell&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, coord: Coord) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ExamineCell&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;self.visibility_grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cell_visibility&lt;&#x2F;span&gt;&lt;span&gt;(coord) {
&lt;&#x2F;span&gt;&lt;span&gt;            CellVisibility::Currently &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;examine_cell&lt;&#x2F;span&gt;&lt;span&gt;(coord),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the UI to have it render the currently-examined cell (if any).
Also, when the cursor is controlled by the arrow keys, we’ll display a string
to indicate what the cursor is for. Currently it will just be for examining cells,
but later it will be for aiming spells as well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::game::{ExamineCell, LogMessage};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;chargrid::{
&lt;&#x2F;span&gt;&lt;span&gt;    decorator::{AlignView, Alignment, AlignmentX, AlignmentY, BoundView},
&lt;&#x2F;span&gt;&lt;span&gt;    text::{wrap, RichTextPartOwned, RichTextViewSingleLine, StringView, StringViewSingleLine},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;examine_cell_str&lt;&#x2F;span&gt;&lt;span&gt;(examine_cell: ExamineCell) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; examine_cell {
&lt;&#x2F;span&gt;&lt;span&gt;        ExamineCell::Npc(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ExamineCell::NpcCorpse(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ExamineCell::Item(item_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; item_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ExamineCell::Player &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;yourself&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;UiData&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;examine_cell: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ExamineCell&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;UiData&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;UiView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: UiData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(name) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.name {
&lt;&#x2F;span&gt;&lt;span&gt;            BoundView {
&lt;&#x2F;span&gt;&lt;span&gt;                size: Size::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;HEALTH_WIDTH&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                view: AlignView {
&lt;&#x2F;span&gt;&lt;span&gt;                    alignment: Alignment::centre(),
&lt;&#x2F;span&gt;&lt;span&gt;                    view: StringViewSingleLine::new(
&lt;&#x2F;span&gt;&lt;span&gt;                        Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                    ),
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(name, context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)), frame);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(examine_cell) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.examine_cell {
&lt;&#x2F;span&gt;&lt;span&gt;            BoundView {
&lt;&#x2F;span&gt;&lt;span&gt;                size: Size::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;HEALTH_WIDTH&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                view: AlignView {
&lt;&#x2F;span&gt;&lt;span&gt;                    alignment: Alignment {
&lt;&#x2F;span&gt;&lt;span&gt;                        x: AlignmentX::Centre,
&lt;&#x2F;span&gt;&lt;span&gt;                        y: AlignmentY::Bottom,
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    view: StringView::new(
&lt;&#x2F;span&gt;&lt;span&gt;                        Style::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                        wrap::Word::new(),
&lt;&#x2F;span&gt;&lt;span&gt;                    ),
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;examine_cell_str&lt;&#x2F;span&gt;&lt;span&gt;(examine_cell),
&lt;&#x2F;span&gt;&lt;span&gt;                context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                frame,
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a field to &lt;code&gt;AppState&lt;&#x2F;code&gt; containing the current cursor position if any.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    cursor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Coord&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size, rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, visibility_algorithm: VisibilityAlgorithm) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            cursor: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update &lt;code&gt;AppView::render_ui&lt;&#x2F;code&gt; to take the name of the current cursor mode, and have it render the cursor
and pass the result of examining the cell under the cursor to the UI renderer.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;chargrid::{
&lt;&#x2F;span&gt;&lt;span&gt;    render::{blend_mode, ColModify, ColModifyMap, Frame, Style, View, ViewCell, ViewContext},
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;render_ui&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;AppData,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; examine_cell &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cursor) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.cursor {
&lt;&#x2F;span&gt;&lt;span&gt;            frame.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;blend_cell_background_relative&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                cursor,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                Rgb24::new_grey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                blend_mode::LinearInterpolate,
&lt;&#x2F;span&gt;&lt;span&gt;                context,
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;            data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;examine_cell&lt;&#x2F;span&gt;&lt;span&gt;(cursor)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        self.ui_view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            UiData {
&lt;&#x2F;span&gt;&lt;span&gt;                player_hit_points,
&lt;&#x2F;span&gt;&lt;span&gt;                messages,
&lt;&#x2F;span&gt;&lt;span&gt;                name,
&lt;&#x2F;span&gt;&lt;span&gt;                examine_cell,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_offset&lt;&#x2F;span&gt;&lt;span&gt;(Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, self.ui_y_offset)),
&lt;&#x2F;span&gt;&lt;span&gt;            frame,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now go update all the places where &lt;code&gt;AppView::render_ui&lt;&#x2F;code&gt; gets called and pass &lt;code&gt;None&lt;&#x2F;code&gt; as its &lt;code&gt;name&lt;&#x2F;code&gt; argument.&lt;&#x2F;p&gt;
&lt;p&gt;Update &lt;code&gt;AppData::handle_input&lt;&#x2F;code&gt; so that moving the mouse during normal gameplay sets the cursor position,
and pressing a key clears the cursor. This will let the player use the mouse to examine cells, even when
not in “examine” mode.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;chargrid::{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    input::{keys, Input, KeyboardInput, MouseButton, MouseInput},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;handle_input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, input: Input) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;GameReturn&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; input {
&lt;&#x2F;span&gt;&lt;span&gt;            Input::Keyboard(key) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; key {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                self.cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Input::Mouse(mouse_input) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; match&lt;&#x2F;span&gt;&lt;span&gt; mouse_input {
&lt;&#x2F;span&gt;&lt;span&gt;                MouseInput::MouseMove { coord, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.. &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;self.cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(coord),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add &lt;code&gt;TargetEventRoutine&lt;&#x2F;code&gt; - an &lt;code&gt;EventRoutine&lt;&#x2F;code&gt; in which the cursor can be controlled using the arrow keys as well
as the mouse. It has a string field which is the name of the target mode. This is the string that we’ll show in
the bottom-left corner.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TargetEventRoutine {
&lt;&#x2F;span&gt;&lt;span&gt;    name: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;EventRoutine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TargetEventRoutine {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Return &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Coord&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppView;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Event &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; CommonEvent;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;EP&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut Self::&lt;&#x2F;span&gt;&lt;span&gt;Data,
&lt;&#x2F;span&gt;&lt;span&gt;        _view: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;Self::&lt;&#x2F;span&gt;&lt;span&gt;View,
&lt;&#x2F;span&gt;&lt;span&gt;        event_or_peek: EP,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Handled&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Return, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;        EP: EventOrPeek&amp;lt;Event = &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Event&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        event_routine::event_or_peek_with_handled(event_or_peek, self, |s, event| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; event {
&lt;&#x2F;span&gt;&lt;span&gt;                CommonEvent::Input(input) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; match&lt;&#x2F;span&gt;&lt;span&gt; input {
&lt;&#x2F;span&gt;&lt;span&gt;                    Input::Keyboard(key) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; delta &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; key {
&lt;&#x2F;span&gt;&lt;span&gt;                            KeyboardInput::Left &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                            KeyboardInput::Right &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                            KeyboardInput::Up &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                            KeyboardInput::Down &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                            keys::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;RETURN &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.cursor;
&lt;&#x2F;span&gt;&lt;span&gt;                                data.cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Handled::Return(cursor);
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                            keys::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ESCAPE &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                data.cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Handled::Return(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Coord::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                        };
&lt;&#x2F;span&gt;&lt;span&gt;                        data.cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            data.cursor
&lt;&#x2F;span&gt;&lt;span&gt;                                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_coord&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; delta,
&lt;&#x2F;span&gt;&lt;span&gt;                        );
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    Input::Mouse(mouse_input) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; match&lt;&#x2F;span&gt;&lt;span&gt; mouse_input {
&lt;&#x2F;span&gt;&lt;span&gt;                        MouseInput::MouseMove { coord, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.. &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; data.cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(coord),
&lt;&#x2F;span&gt;&lt;span&gt;                        MouseInput::MousePress {
&lt;&#x2F;span&gt;&lt;span&gt;                            button: MouseButton::Left,
&lt;&#x2F;span&gt;&lt;span&gt;                            coord,
&lt;&#x2F;span&gt;&lt;span&gt;                        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            data.cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Handled::Return(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(coord));
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;                CommonEvent::Frame(_period) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            Handled::Continue(s)
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F, C&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;Self::&lt;&#x2F;span&gt;&lt;span&gt;Data,
&lt;&#x2F;span&gt;&lt;span&gt;        view: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut Self::&lt;&#x2F;span&gt;&lt;span&gt;View,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;        F: Frame,
&lt;&#x2F;span&gt;&lt;span&gt;        C: ColModify,
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        view.game_view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data.game_state, context, frame);
&lt;&#x2F;span&gt;&lt;span&gt;        view.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;render_ui&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(self.name), &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data, context, frame);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now update &lt;code&gt;AppData::handle_input&lt;&#x2F;code&gt; again so that when the ‘x’ key is pressed, we run the &lt;code&gt;TargetEventRoutine&lt;&#x2F;code&gt;
so the player can examine cells moving the cursor with the arrow keys.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;GameReturn {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    Examine,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;handle_input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, input: Input) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;GameReturn&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; input {
&lt;&#x2F;span&gt;&lt;span&gt;            Input::Keyboard(key) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; key {
&lt;&#x2F;span&gt;&lt;span&gt;                    KeyboardInput::Char(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;x&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                            self.cursor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(self.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;player_coord&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(GameReturn::Examine);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;game_loop&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;Return = (), Data = AppData, View = AppView, Event = CommonEvent&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; D &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; E);
&lt;&#x2F;span&gt;&lt;span&gt;    Loop::new(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        GameEventRoutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|game_return| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; game_return {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            GameReturn::Examine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::E(TargetEventRoutine { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;EXAMINE&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;return_on_exit&lt;&#x2F;span&gt;&lt;span&gt;(|_| ())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;examine.png&quot; alt=&quot;examine.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-9.0&quot;&gt;part-9.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fireball-scroll&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fireball-scroll&quot; aria-label=&quot;Anchor link for: fireball-scroll&quot;&gt;Fireball Scroll&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first ranged item we’ll add will be fireball scrolls. Add &lt;code&gt;FireballScroll&lt;&#x2F;code&gt; as a new item type.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ItemType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    FireballScroll,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ItemType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;self {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;fireball scroll&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;todo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;colours {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;FIREBALL_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;: Rgb24 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rgb24::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;item_colour&lt;&#x2F;span&gt;&lt;span&gt;(item_type: ItemType) -&amp;gt; Rgb24 {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;FIREBALL_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;currently_visible_view_cell_of_tile&lt;&#x2F;span&gt;&lt;span&gt;(tile: Tile) -&amp;gt; ViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tile {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Item(ItemType::FireballScroll) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;♫&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;FIREBALL_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the dungeon generator to place fireball scrolls.
Generalize the logic which places health potions to place all items.
For now gives fireball scrolls a 100% chance of spawning to make it easier to test.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Room {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Place `n` items at random positions within the room
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;place_items&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, n: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, grid: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;Grid&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TerrainTile&amp;gt;&amp;gt;, rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coords&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;coord| grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked&lt;&#x2F;span&gt;&lt;span&gt;(coord).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;TerrainTile::Floor)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose_multiple&lt;&#x2F;span&gt;&lt;span&gt;(rng, n)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemType::FireballScroll,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemType::HealthPotion,
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked_mut&lt;&#x2F;span&gt;&lt;span&gt;(coord) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(TerrainTile::Item(item));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate_dungeon&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(size: Size, rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R) -&amp;gt; Grid&amp;lt;TerrainTile&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ITEMS_PER_ROOM_DISTRIBUTION&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;NUM_ATTEMPTS &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; room.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;only_intersects_empty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;grid) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Add items to the room
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;num_items &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ITEMS_PER_ROOM_DISTRIBUTION&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span&gt;(rng).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            room.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;place_items&lt;&#x2F;span&gt;&lt;span&gt;(num_items, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; grid, rng);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point you should be able to pick up fireball scrolls. When you use them the game will
just print the text “todo” to stdout.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;fireball-scroll.png&quot; alt=&quot;fireball-scroll.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-9.1&quot;&gt;part-9.1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;launching-fireballs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#launching-fireballs&quot; aria-label=&quot;Anchor link for: launching-fireballs&quot;&gt;Launching Fireballs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now let’s make it possible to shoot fireballs when a fireball scroll is read.
Rather than just teleporting the fireball to its target, let’s animate it moving along its trajectory.&lt;&#x2F;p&gt;
&lt;p&gt;In the previous section we just printed “todo” when a fireball scroll was used.
Instead, we’d like the game to bring up the targeting AI, and when the user selects a target,
shoot a fireball towards it. If the fireball hits a solid object along the way it should stop,
and if the solid object is a character they should take damage.&lt;&#x2F;p&gt;
&lt;p&gt;When a health potion is used it is used immediately, but when a fireball scroll is used we display a UI.
Let’s codify the different ways in which an item can be used:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Clone, Copy)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ItemUsage {
&lt;&#x2F;span&gt;&lt;span&gt;    Immediate,
&lt;&#x2F;span&gt;&lt;span&gt;    Aim,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update item-usage methods to return the &lt;code&gt;ItemUsage&lt;&#x2F;code&gt; of the item being used.
Previously we made the assumption that when an item is used, it is immediately
removed from the inventory, but this is only true for items whose usage is &lt;code&gt;Immediate&lt;&#x2F;code&gt;.
Update &lt;code&gt;maybe_use_item&lt;&#x2F;code&gt; to reflect this while we’re at it.
We’ll need to implement &lt;code&gt;Inventory::get&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Inventory {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Entity, InventorySlotIsEmpty&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.slots
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(index)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(InventorySlotIsEmpty)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ItemUsage, ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; inventory &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .inventory
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(character)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character has no inventory&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; inventory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(inventory_index) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(item) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; item,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(InventorySlotIsEmpty) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NoItemInInventorySlot);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(());
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;item_type &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .item
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(item)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;non-item in inventory&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; usage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::HealthPotion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; hit_points &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;                    .components
&lt;&#x2F;span&gt;&lt;span&gt;                    .hit_points
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(character)
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character has no hit points&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;HEALTH_TO_HEAL&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                hit_points.current &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; hit_points.max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(hit_points.current &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;HEALTH_TO_HEAL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                inventory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(inventory_index).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerHeals);
&lt;&#x2F;span&gt;&lt;span&gt;                ItemUsage::Immediate
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemUsage::Aim,
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(usage)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::world::{
&lt;&#x2F;span&gt;&lt;span&gt;    HitPoints, Inventory, ItemType, ItemUsage, Location, NpcType, Populate, ProjectileType, Tile,
&lt;&#x2F;span&gt;&lt;span&gt;    World,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_player_use_item&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ItemUsage, ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;            self.world
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;maybe_use_item&lt;&#x2F;span&gt;&lt;span&gt;(self.player_entity, inventory_index, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.message_log);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(usage) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; usage {
&lt;&#x2F;span&gt;&lt;span&gt;                ItemUsage::Immediate &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;ai_turn&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                ItemUsage::Aim &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        result
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the &lt;code&gt;use_item()&lt;&#x2F;code&gt; &lt;code&gt;EventRoutine&lt;&#x2F;code&gt; to invoke the target &lt;code&gt;EventRoutine&lt;&#x2F;code&gt; when the player uses an item
whose usage is &lt;code&gt;Aim&lt;&#x2F;code&gt;. Note the not-yet-implemented &lt;code&gt;GameState::maybe_player_use_item_aim&lt;&#x2F;code&gt; being called here,
which will actually launch the fireball.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;chargrid::{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    event_routine::{
&lt;&#x2F;span&gt;&lt;span&gt;        self,
&lt;&#x2F;span&gt;&lt;span&gt;        common_event::{CommonEvent, Delay},
&lt;&#x2F;span&gt;&lt;span&gt;        make_either, DataSelector, Decorate, EventOrPeek, EventRoutine, EventRoutineView, Handled,
&lt;&#x2F;span&gt;&lt;span&gt;        Loop, SideEffect, SideEffectThen, Value, ViewSelector,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;use_item&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl EventRoutine&amp;lt;Return = (), Data = AppData, View = AppView, Event = CommonEvent&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B);
&lt;&#x2F;span&gt;&lt;span&gt;    Loop::new(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;inventory_slot_menu&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Use Item&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|result| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(menu::Escape) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::A(Value::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(()))),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(entry) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::B(SideEffectThen::new_with_view(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span&gt;data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AppData, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;_| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    make_either!(Ei &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; C);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(usage) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;maybe_player_use_item&lt;&#x2F;span&gt;&lt;span&gt;(entry.index) {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; usage {
&lt;&#x2F;span&gt;&lt;span&gt;                            ItemUsage::Immediate &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::A(Value::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(()))),
&lt;&#x2F;span&gt;&lt;span&gt;                            ItemUsage::Aim &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Ei::B(TargetEventRoutine { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;AIM&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span&gt;maybe_coord&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                    SideEffect::new_with_view(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span&gt;data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AppData, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;_| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(coord) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; maybe_coord {
&lt;&#x2F;span&gt;&lt;span&gt;                                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; data
&lt;&#x2F;span&gt;&lt;span&gt;                                                .game_state
&lt;&#x2F;span&gt;&lt;span&gt;                                                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;maybe_player_use_item_aim&lt;&#x2F;span&gt;&lt;span&gt;(entry.index, coord)
&lt;&#x2F;span&gt;&lt;span&gt;                                                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                                            {
&lt;&#x2F;span&gt;&lt;span&gt;                                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;                                            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;                                            }
&lt;&#x2F;span&gt;&lt;span&gt;                                        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;                                        }
&lt;&#x2F;span&gt;&lt;span&gt;                                    })
&lt;&#x2F;span&gt;&lt;span&gt;                                },
&lt;&#x2F;span&gt;&lt;span&gt;                            )),
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        Ei::C(Value::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            )),
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Implement &lt;code&gt;GameState::maybe_player_use_item_aim&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_player_use_item_aim&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        target: Coord,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;maybe_use_item_aim&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            self.player_entity,
&lt;&#x2F;span&gt;&lt;span&gt;            inventory_index,
&lt;&#x2F;span&gt;&lt;span&gt;            target,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.message_log,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And implement &lt;code&gt;World::maybe_use_item_aim&lt;&#x2F;code&gt;. This function assumes it’s called on a sensible
item (e.g. you don’t try to aim a health potion). The game is implemented such that it should
be impossible to call this method on an invalid item, so this function panics in this case.
Should that panic ever execute, a bug has occurred at some point prior, and we shouldn’t try
to continue running the game.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item_aim&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        target: Coord,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; character_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord_of&lt;&#x2F;span&gt;&lt;span&gt;(character).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; character_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; target {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; inventory &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .inventory
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(character)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character has no inventory&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item_entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; inventory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(inventory_index).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;item_type &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(item_entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::HealthPotion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;panic!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;invalid item for aim&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerLaunchesProjectile(
&lt;&#x2F;span&gt;&lt;span&gt;                    ProjectileType::Fireball,
&lt;&#x2F;span&gt;&lt;span&gt;                ));
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;spawn_projectile&lt;&#x2F;span&gt;&lt;span&gt;(character_coord, target, ProjectileType::Fireball);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Two things in the above code haven’t been defined yet:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;LogMessage::PlayerLaunchesProjectile&lt;&#x2F;code&gt; variant&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;World::spawn_projectile&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Add the log message types.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::world::{
&lt;&#x2F;span&gt;&lt;span&gt;    HitPoints, Inventory, ItemType, ItemUsage, Location, NpcType, Populate, ProjectileType, Tile,
&lt;&#x2F;span&gt;&lt;span&gt;    World,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;LogMessage {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    PlayerLaunchesProjectile(ProjectileType),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This depends on a new type &lt;code&gt;ProjectileType&lt;&#x2F;code&gt;. Add it to &lt;code&gt;world.rs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Clone, Copy, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType {
&lt;&#x2F;span&gt;&lt;span&gt;    Fireball,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;self {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Fireball &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;fireball&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Handle the new type of log message.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;[LogMessage]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MessagesView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        messages: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [LogMessage],
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;format_message&lt;&#x2F;span&gt;&lt;span&gt;(buf: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; [RichTextPartOwned], message: LogMessage) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; message {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                PlayerLaunchesProjectile(projectile) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[0].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;You launch a &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[1].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, projectile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].style.foreground &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(colours::projectile_colour(projectile));
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[2].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This depends on &lt;code&gt;colour::projectile_colour&lt;&#x2F;code&gt;. Define it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::world::{ItemType, ItemUsage, Layer, NpcType, ProjectileType, Tile};
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;colours {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;projectile_colour&lt;&#x2F;span&gt;&lt;span&gt;(projcetile_type: ProjectileType) -&amp;gt; Rgb24 {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; projcetile_type {
&lt;&#x2F;span&gt;&lt;span&gt;            ProjectileType::Fireball &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;FIREBALL_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Jumping all over the codebase today.&lt;&#x2F;p&gt;
&lt;p&gt;Back in &lt;code&gt;world.rs&lt;&#x2F;code&gt;, define the &lt;code&gt;spawn_projectile&lt;&#x2F;code&gt; method.
Add a &lt;code&gt;projectile&lt;&#x2F;code&gt; component storing a &lt;code&gt;ProjectileType&lt;&#x2F;code&gt;, a &lt;code&gt;Projectile&lt;&#x2F;code&gt; tile, and a &lt;code&gt;projcetile&lt;&#x2F;code&gt; layer.
Also add a &lt;code&gt;trajectory&lt;&#x2F;code&gt; component for storing the motion path of a projectile.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;line_2d::CardinalStepIter;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Tile {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    Projectile(ProjectileType),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;entity_table::declare_entity_module&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    components {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        trajectory: CardinalStepIter,
&lt;&#x2F;span&gt;&lt;span&gt;        projectile: ProjectileType,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;spatial_table::declare_layers_module&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    layers {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        projectile: Projectile,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;spawn_projectile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, from: Coord, to: Coord, projectile_type: ProjectileType) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.entity_allocator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;alloc&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        self.spatial_table
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                entity,
&lt;&#x2F;span&gt;&lt;span&gt;                Location {
&lt;&#x2F;span&gt;&lt;span&gt;                    coord: from,
&lt;&#x2F;span&gt;&lt;span&gt;                    layer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(Layer::Projectile),
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        self.components
&lt;&#x2F;span&gt;&lt;span&gt;            .tile
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, Tile::Projectile(projectile_type));
&lt;&#x2F;span&gt;&lt;span&gt;        self.components.projectile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, projectile_type);
&lt;&#x2F;span&gt;&lt;span&gt;        self.components
&lt;&#x2F;span&gt;&lt;span&gt;            .trajectory
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, CardinalStepIter::new(to &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; from));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the &lt;code&gt;CardinalStepIter&lt;&#x2F;code&gt; type. This is an iterator over the coordinates along
a line segment between 2 points, only taking steps in cardinal directions.
We’ll use it to compute the path followed by a projectile.&lt;&#x2F;p&gt;
&lt;p&gt;Handle the new tile type and new layer in &lt;code&gt;app.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; GameState&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;GameView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        game_state: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; GameState,
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; entity_to_render &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;entities_to_render&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; depth &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; entity_to_render.location.layer {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(Layer::Projectile) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;currently_visible_view_cell_of_tile&lt;&#x2F;span&gt;&lt;span&gt;(tile: Tile) -&amp;gt; ViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tile {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Projectile(ProjectileType::Fireball) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;*&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;FIREBALL_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a method to &lt;code&gt;World&lt;&#x2F;code&gt; for moving all projectiles one step along their motion path.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;move_projectiles&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; entities_to_remove &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; fireball_hit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(entity, trajectory) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self.components.trajectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(direction) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; trajectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; current_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord_of&lt;&#x2F;span&gt;&lt;span&gt;(entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; current_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; direction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dest_layers &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;layers_at_checked&lt;&#x2F;span&gt;&lt;span&gt;(new_coord);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; dest_layers.feature.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                    entities_to_remove.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(character) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dest_layers.character {
&lt;&#x2F;span&gt;&lt;span&gt;                    entities_to_remove.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;projectile_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.projectile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity) {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; projectile_type {
&lt;&#x2F;span&gt;&lt;span&gt;                            ProjectileType::Fireball &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                fireball_hit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(character);
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ignore collisiosns of projectiles
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let _ = &lt;&#x2F;span&gt;&lt;span&gt;self.spatial_table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;update_coord&lt;&#x2F;span&gt;&lt;span&gt;(entity, new_coord);
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                entities_to_remove.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; entities_to_remove {
&lt;&#x2F;span&gt;&lt;span&gt;            self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_entity&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; fireball_hit {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; maybe_npc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(VictimDies) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;character_damage&lt;&#x2F;span&gt;&lt;span&gt;(entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(npc) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; maybe_npc {
&lt;&#x2F;span&gt;&lt;span&gt;                    message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NpcDies(npc));
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This requires some generalizations of our combat logic,
in particular adding a &lt;code&gt;character_damage&lt;&#x2F;code&gt; method, extracting this logic from &lt;code&gt;character_bump_attack&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;character_bump_attack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, victim: Entity) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;VictimDies&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;character_damage&lt;&#x2F;span&gt;&lt;span&gt;(victim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;character_damage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, victim: Entity, damage: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;VictimDies&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(hit_points) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.hit_points.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(victim) {
&lt;&#x2F;span&gt;&lt;span&gt;            hit_points.current &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; hit_points.current.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;saturating_sub&lt;&#x2F;span&gt;&lt;span&gt;(damage);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; hit_points.current &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;character_die&lt;&#x2F;span&gt;&lt;span&gt;(victim);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(VictimDies);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If an NPC is killed by a fireball, a new log message &lt;code&gt;NpcDies&lt;&#x2F;code&gt; is generated.
Add it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;LogMessage {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    NpcDies(NpcType),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And handle it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;[LogMessage]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MessagesView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        messages: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [LogMessage],
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;format_message&lt;&#x2F;span&gt;&lt;span&gt;(buf: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; [RichTextPartOwned], message: LogMessage) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; message {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                NpcDies(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[0].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;The &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[1].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].style.foreground &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(colours::npc_colour(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[2].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; dies.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add a method to &lt;code&gt;World&lt;&#x2F;code&gt; for testing whether there are any projectiles.
We’re about to add a simple realtime animation system, and we want an easy way to check
whether any animations are in progress so controls can be ignored while animations are playing.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;has_projectiles&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;self.components.trajectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add animation methods to &lt;code&gt;GameState&lt;&#x2F;code&gt;, and prevent the player from acting while animations are in progress.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;tick_animations&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;move_projectiles&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.message_log)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;has_animations&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;has_projectiles&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;wait_player&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;has_animations&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_move_player&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, direction: CardinalDirection) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;has_animations&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_player_get_item&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;has_animations&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_player_use_item&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ItemUsage, ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;has_animations&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to periodically tick animations by calling &lt;code&gt;GameState::tick_animations&lt;&#x2F;code&gt;.
Let’s only progress animations during normal gameplay, at a rate of 30 FPS (regardless of the game’s actual framerate).
Since the game is likely running at a higher framerate, we need to keep track of the passage of time, and only progress
animations very 33ms. Game ticks are sent to &lt;code&gt;EventRoutine&lt;&#x2F;code&gt;s in the form of &lt;code&gt;CommonEvent::Frame(period)&lt;&#x2F;code&gt; events,
where &lt;code&gt;period&lt;&#x2F;code&gt; is a &lt;code&gt;std::time::Duration&lt;&#x2F;code&gt; containing the amount of time that has passed since the previous frame.
Ticks are generally synchronized to the display’s framerate, but this is not a necessity and you shouldn’t rely on it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;BETWEEN_ANIMATION_TICKS&lt;&#x2F;span&gt;&lt;span&gt;: Duration &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    until_next_animation_tick: Duration,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;AppData {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(screen_size: Size, rng_seed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, visibility_algorithm: VisibilityAlgorithm) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            until_next_animation_tick: Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;EventRoutine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;GameEventRoutine {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Return &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; GameReturn;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppData;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AppView;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Event &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; CommonEvent;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;EP&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        self,
&lt;&#x2F;span&gt;&lt;span&gt;        data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut Self::&lt;&#x2F;span&gt;&lt;span&gt;Data,
&lt;&#x2F;span&gt;&lt;span&gt;        _view: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;Self::&lt;&#x2F;span&gt;&lt;span&gt;View,
&lt;&#x2F;span&gt;&lt;span&gt;        event_or_peek: EP,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Handled&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Return, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;        EP: EventOrPeek&amp;lt;Event = &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Event&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        event_routine::event_or_peek_with_handled(event_or_peek, self, |s, event| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; event {
&lt;&#x2F;span&gt;&lt;span&gt;            CommonEvent::Input(input) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            CommonEvent::Frame(period) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(until_next_animation_tick) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                    data.until_next_animation_tick.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;checked_sub&lt;&#x2F;span&gt;&lt;span&gt;(period)
&lt;&#x2F;span&gt;&lt;span&gt;                {
&lt;&#x2F;span&gt;&lt;span&gt;                    data.until_next_animation_tick &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; until_next_animation_tick;
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    data.until_next_animation_tick &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;BETWEEN_ANIMATION_TICKS&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    data.game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;tick_animations&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                Handled::Continue(s)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that should do it.
Try picking up a fireball scroll and using it via the inventory menu.
You’ll be presented with an “AIM” target ui.
Target an NPC and hit the enter key or press the left mouse button.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;aim.png&quot; alt=&quot;aim.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A fireball will appear, and in &lt;em&gt;realtime&lt;&#x2F;em&gt; move towards the NPC.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;launch.png&quot; alt=&quot;launch.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When it hits them, they’ll take damage and possibly die.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;hit.png&quot; alt=&quot;hit.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-9.2&quot;&gt;part-9.2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;confusion-scroll&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#confusion-scroll&quot; aria-label=&quot;Anchor link for: confusion-scroll&quot;&gt;Confusion Scroll&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Add a &lt;code&gt;ConfusionScroll&lt;&#x2F;code&gt; item, and &lt;code&gt;Confusion&lt;&#x2F;code&gt; projectile.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    Confusion,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ProjectileType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;self {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Confusion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;confusion spell&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ItemType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    ConfusionScroll,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ItemType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;self {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;confusion scroll&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add rendering logic for the new item and projectile.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; app.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;colours {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;CONFUSION_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;: Rgb24 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rgb24::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;187&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;item_colour&lt;&#x2F;span&gt;&lt;span&gt;(item_type: ItemType) -&amp;gt; Rgb24 {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;CONFUSION_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;projectile_colour&lt;&#x2F;span&gt;&lt;span&gt;(projcetile_type: ProjectileType) -&amp;gt; Rgb24 {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; projcetile_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ProjectileType::Confusion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;CONFUSION_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;currently_visible_view_cell_of_tile&lt;&#x2F;span&gt;&lt;span&gt;(tile: Tile) -&amp;gt; ViewCell {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tile {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Item(ItemType::ConfusionScroll) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;♫&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;CONFUSION_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Projectile(ProjectileType::Fireball) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;*&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;FIREBALL_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Tile::Projectile(ProjectileType::Confusion) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ViewCell::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;*&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;with_foreground&lt;&#x2F;span&gt;&lt;span&gt;(colours::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;CONFUSION_SCROLL&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Place confusion scrolls during dungeon generation. Also rebalance the probabilities of items
such that health potions may appear again.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; terrain.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Room {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Place `n` items at random positions within the room
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;place_items&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, n: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, grid: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;Grid&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TerrainTile&amp;gt;&amp;gt;, rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coords&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;coord| grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked&lt;&#x2F;span&gt;&lt;span&gt;(coord).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;TerrainTile::Floor)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;choose_multiple&lt;&#x2F;span&gt;&lt;span&gt;(rng, n)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;29 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemType::FireballScroll,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;49 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemType::ConfusionScroll,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemType::HealthPotion,
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_checked_mut&lt;&#x2F;span&gt;&lt;span&gt;(coord) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(TerrainTile::Item(item));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When a character becomes confused, they will move randomly for 5 turns. To keep track of the number of turns
until a confused character recovers, add a &lt;code&gt;confusion_countdown&lt;&#x2F;code&gt; component. Entities which have this component
will be considered to be confused, and it will also track the time until recovery.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;entity_table::declare_entity_module&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    components {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        confusion_countdown: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set the &lt;code&gt;UsageType&lt;&#x2F;code&gt; for confusion scrolls, spawn a projectile when a confusion scroll is used, and set what happens
when a confusion spell hits an NPC.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ItemUsage, ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; usage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::FireballScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ItemUsage::Aim,
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_use_item_aim&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        inventory_index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        target: Coord,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item_type {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            ItemType::ConfusionScroll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::PlayerLaunchesProjectile(
&lt;&#x2F;span&gt;&lt;span&gt;                    ProjectileType::Confusion,
&lt;&#x2F;span&gt;&lt;span&gt;                ));
&lt;&#x2F;span&gt;&lt;span&gt;                self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;spawn_projectile&lt;&#x2F;span&gt;&lt;span&gt;(character_coord, target, ProjectileType::Confusion);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;move_projectiles&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; confusion_hit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(entity, trajectory) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self.components.trajectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(direction) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; trajectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; dest_layers.feature.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(character) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dest_layers.character {
&lt;&#x2F;span&gt;&lt;span&gt;                    entities_to_remove.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(entity);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;projectile_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.projectile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity) {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; projectile_type {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                            ProjectileType::Confusion &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                confusion_hit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(character);
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; confusion_hit {
&lt;&#x2F;span&gt;&lt;span&gt;            self.components.confusion_countdown.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(entity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(entity) {
&lt;&#x2F;span&gt;&lt;span&gt;                message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NpcBecomesConfused(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add and handle log messages for becoming confused and recovering.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;LogMessage {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    NpcBecomesConfused(NpcType),
&lt;&#x2F;span&gt;&lt;span&gt;    NpcIsNoLongerConfused(NpcType),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ui.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; View&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;[LogMessage]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MessagesView {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F: Frame, C: ColModify&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        messages: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [LogMessage],
&lt;&#x2F;span&gt;&lt;span&gt;        context: ViewContext&amp;lt;C&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        frame: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; F,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;format_message&lt;&#x2F;span&gt;&lt;span&gt;(buf: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; [RichTextPartOwned], message: LogMessage) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; message {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                NpcBecomesConfused(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[0].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;The &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[1].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].style.foreground &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(colours::npc_colour(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[2].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; is confused.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                NpcIsNoLongerConfused(npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[0].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;The &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[1].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].style.foreground &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(colours::npc_colour(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(&amp;amp;mut buf[2].text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;#39;s confusion passes.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let’s update movement logic such that confused characters move in random directions.
To use the &lt;code&gt;Rng&lt;&#x2F;code&gt; trait to select a random direction, we need to enable the optional &lt;code&gt;rand&lt;&#x2F;code&gt;
feature of the &lt;code&gt;direction&lt;&#x2F;code&gt; crate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;direction &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.18&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;rand&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;game.rs&lt;&#x2F;code&gt;, start passing a rng to &lt;code&gt;World::maybe_move_character&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; game.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_move_player&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, direction: CardinalDirection) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;maybe_move_character&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            self.player_entity,
&lt;&#x2F;span&gt;&lt;span&gt;            direction,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.message_log,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.rng,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;ai_turn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(entity, agent) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self.ai_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; npc_action {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;                NpcAction::Move(direction) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;self.world.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;maybe_move_character&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                    entity,
&lt;&#x2F;span&gt;&lt;span&gt;                    direction,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.message_log,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self.rng,
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And update &lt;code&gt;World::maybe_move_character&lt;&#x2F;code&gt; to take an rng as an argument and use it
to move characters randomly when they are confused, also decreasing, and eventually removing,
their &lt;code&gt;confusion_countdown&lt;&#x2F;code&gt; component.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; world.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;World {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;maybe_move_character&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: Rng&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        character_entity: Entity,
&lt;&#x2F;span&gt;&lt;span&gt;        direction: CardinalDirection,
&lt;&#x2F;span&gt;&lt;span&gt;        message_log: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LogMessage&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        rng: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; R,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; character_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .spatial_table
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord_of&lt;&#x2F;span&gt;&lt;span&gt;(character_entity)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;character has no coord&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; direction &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(confusion_countdown) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            .components
&lt;&#x2F;span&gt;&lt;span&gt;            .confusion_countdown
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(character_entity)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if *&lt;&#x2F;span&gt;&lt;span&gt;confusion_countdown &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                self.components.confusion_countdown.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(character_entity);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;npc_type) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.components.npc_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(character_entity) {
&lt;&#x2F;span&gt;&lt;span&gt;                    message_log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(LogMessage::NpcIsNoLongerConfused(npc_type));
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;confusion_countdown &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            direction
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_character_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; character_coord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; direction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;coord&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s now possible to launch confusion spells in the same way as you launch fireballs.
NPCs hit with confusion spells move randomly for their next 5 turns.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-9&#x2F;confusion.png&quot; alt=&quot;confusion.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-9.3&quot;&gt;part-9.3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-10&#x2F;&quot;&gt;Click here for the next part!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 8 - Items and Inventory</title>
        <published>2020-07-29T18:00:00+10:00</published>
        <updated>2020-07-29T18:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-8/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-8/</id>
        
        <summary type="html">&lt;p&gt;In this part we’ll introduce items, and add an inventory menu.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part you’ll be able to pick up, use, and drop items.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-8&#x2F;item-menu.png&quot; alt=&quot;item-menu.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 6 - AI and Combat</title>
        <published>2020-07-12T17:00:00+10:00</published>
        <updated>2020-07-12T17:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-6/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-6/</id>
        
        <summary type="html">&lt;p&gt;In this part we’ll imbue NPCs with artificial intelligence, and make it possible
for them to deal and receive damage.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part, the game will look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-6&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 7 - User Interface</title>
        <published>2020-07-12T17:00:00+10:00</published>
        <updated>2020-07-12T17:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-7/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-7/</id>
        
        <summary type="html">&lt;p&gt;In this part we’ll add a heads-up display consisting of a health bar and message log.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part, the game will look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-7&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 4 - Field of View</title>
        <published>2020-07-02T22:00:00+10:00</published>
        <updated>2020-07-02T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-4/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-4/</id>
        
        <summary type="html">&lt;p&gt;In this part we’ll implement visible area detection, so players can only see what their
character can see, and what they remember seeing.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part, the game will look like this:
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-4&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 5 - Placing NPCs</title>
        <published>2020-07-02T22:00:00+10:00</published>
        <updated>2020-07-02T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-5/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-5/</id>
        
        <summary type="html">&lt;p&gt;In this part we’ll populate the dungeon with enemies.
There won’t be any AI or combat. That will come later.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part, the game will look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-5&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 2 - Entities, Rendering, Map</title>
        <published>2020-06-19T20:00:00+10:00</published>
        <updated>2020-06-19T20:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-2/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-2/</id>
        
        <summary type="html">&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-1&#x2F;&quot;&gt;previous part&lt;&#x2F;a&gt; we got a single ‘@’ sign moving
around the screen. The player character was represented by a coordinate stored directly in
the game state. In this part, we’ll define a generic “entity” type, of which the player character
is merely one instance. The rendering logic will be generalized to draw arbitrary game entities.
Finally, we’ll use the generic entity type to define map components - namely walls and
floor tiles.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part, the game will look like this:
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-2&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 3 - Generating a Dungeon</title>
        <published>2020-06-19T20:00:00+10:00</published>
        <updated>2020-06-19T20:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-3/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-3/</id>
        
        <summary type="html">&lt;p&gt;The definition of “roguelike” is &lt;a href=&quot;http:&#x2F;&#x2F;www.gamesofgrey.com&#x2F;blog&#x2F;?p=403&quot;&gt;hotly debated&lt;&#x2F;a&gt;
but one aspect we can all agree on is that levels must be procedurally generated.
That is, rather than fixed, hand-crafted levels, players will explore levels generated
according to an algorithm; each playthrough will be unique, and it’s &lt;em&gt;highly&lt;&#x2F;em&gt; unlikely that
any other player will ever see the same levels as you.&lt;&#x2F;p&gt;
&lt;p&gt;In this part we’ll implement an algorithm for procedurally generating a dungeon!&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part, the game will look like this:
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-3&#x2F;screenshot-end.png&quot; alt=&quot;screenshot-end.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 0 - Setting Up</title>
        <published>2020-06-12T20:00:00+10:00</published>
        <updated>2020-06-12T20:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-0/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-0/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-0/">&lt;p&gt;This is the first of a series of posts where I follow the
&lt;a href=&quot;http:&#x2F;&#x2F;rogueliketutorials.com&#x2F;&quot;&gt;python tcod roguelike tutorial&lt;&#x2F;a&gt;
but instead of programming in python using the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libtcod&#x2F;libtcod&quot;&gt;tcod&lt;&#x2F;a&gt; library, I’ll be programming
in rust using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid&quot;&gt;chargrid&lt;&#x2F;a&gt;
library, which I’ve been developing for about 3 years.&lt;&#x2F;p&gt;
&lt;p&gt;This is part of an event where the &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;roguelikedev&#x2F;wiki&#x2F;python_tutorial_series&quot;&gt;roguelikedev subreddit does the complete
roguelike tutorial&lt;&#x2F;a&gt;
over the course of several weeks.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-0&#x2F;logo.png&quot; alt=&quot;logo.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;Installation&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To follow this tutorial you will need a rust compiler. Follow the instructions &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;tools&#x2F;install&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;new-rust-project&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#new-rust-project&quot; aria-label=&quot;Anchor link for: new-rust-project&quot;&gt;New Rust Project&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;After rust is installed you’ll have a command named &lt;code&gt;cargo&lt;&#x2F;code&gt;. Use it to create a new rust project:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo new --bin chargrid-roguelike-tutorial-2020
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command creates a directory structure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;├── Cargo.toml   # manifest - we&amp;#39;ll mainly update it to add dependencies
&lt;&#x2F;span&gt;&lt;span&gt;└── src          # all the project&amp;#39;s source code will live under this directory
&lt;&#x2F;span&gt;&lt;span&gt;    └── main.rs  # entry point for the program
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From within the “chargrid-roguelike-tutorial-2020” directory, run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;cargo run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will compile and run the program. The output should be something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;   Compiling chargrid-roguelike-tutorial-2020 v0.1.0
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.16s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;chargrid-roguelike-tutorial-2020`
&lt;&#x2F;span&gt;&lt;span&gt;Hello, world!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;get-fonts&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#get-fonts&quot; aria-label=&quot;Anchor link for: get-fonts&quot;&gt;Get Fonts&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll be making a traditional roguelike, and that means text-only graphics.
You’ll need a font. Chargrid requires a pair of fonts - one for regular text and a second for bold.
Download ttf files for a pair of fonts. They must be monospace (all characters are the same width).&lt;&#x2F;p&gt;
&lt;p&gt;Two suitable fonts can be downloaded here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-0&#x2F;PxPlus_IBM_CGAthin.ttf&quot;&gt;IBM PxPlus Regular TTF&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-0&#x2F;PxPlus_IBM_CGA.ttf&quot;&gt;IBM PxPlus Bold TTF&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once you have your fonts, make a “fonts” directory inside your “src” directory and place the
fonts there.&lt;&#x2F;p&gt;
&lt;p&gt;Your source tree should now look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;└── src
&lt;&#x2F;span&gt;&lt;span&gt;    ├── fonts
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── PxPlus_IBM_CGAthin.ttf
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── PxPlus_IBM_CGA.ttf
&lt;&#x2F;span&gt;&lt;span&gt;    └── main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;get-dependencies&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#get-dependencies&quot; aria-label=&quot;Anchor link for: get-dependencies&quot;&gt;Get Dependencies&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;linker&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#linker&quot; aria-label=&quot;Anchor link for: linker&quot;&gt;Linker&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You’ll need a linker in order to build the code. Some Linux distributions provide a meta package of
common build tools which will contain a linker.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ubuntu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ubuntu&quot; aria-label=&quot;Anchor link for: ubuntu&quot;&gt;Ubuntu&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# apt install build-essential
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;arch-linux&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#arch-linux&quot; aria-label=&quot;Anchor link for: arch-linux&quot;&gt;Arch Linux&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# pacman -S base-devel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Worst case, installing &lt;code&gt;gcc&lt;&#x2F;code&gt; or &lt;code&gt;clang&lt;&#x2F;code&gt; will ensure you have a linker installed as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;libx11-linux-only&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#libx11-linux-only&quot; aria-label=&quot;Anchor link for: libx11-linux-only&quot;&gt;libx11 (Linux only)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The code in this tutorial has a compile-time dependency on libx11.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ubuntu-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ubuntu-1&quot; aria-label=&quot;Anchor link for: ubuntu-1&quot;&gt;Ubuntu&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# apt install libx11-dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;arch-linux-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#arch-linux-1&quot; aria-label=&quot;Anchor link for: arch-linux-1&quot;&gt;Arch Linux&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# pacman -S libx11
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;reference-implementation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reference-implementation&quot; aria-label=&quot;Anchor link for: reference-implementation&quot;&gt;Reference Implementation&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you get stuck, or something in these tutorials doesn’t make sense, take a look at the git repo at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&lt;&#x2F;a&gt;.
For each part and subsection of this tutorial, there is a corresponding branch showing the state of the repo
at that stage of the tutorial. This makes it easy to show the changes introduced in each part of the tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;For example to show the change to &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; between part 0.0 and 1.0, clone the repo and run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;git diff part-0.0 part-1.0 src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;diff --git a&#x2F;src&#x2F;main.rs b&#x2F;src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;index e7a11a9..b19bcfb 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; a&#x2F;src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; b&#x2F;src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -1,3 +1,60 @@
&lt;&#x2F;span&gt;&lt;span&gt; fn main() {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-    println!(&amp;quot;Hello, world!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;    use chargrid_graphical::{Config, Context, Dimensions, FontBytes};
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;    const CELL_SIZE_PX: f64 = 24.;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;    let context = Context::new(Config {
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reference implementation branch: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;chargrid-roguelike-tutorial-2020&#x2F;tree&#x2F;part-0.0&quot;&gt;part-0.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-snippets&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-snippets&quot; aria-label=&quot;Anchor link for: code-snippets&quot;&gt;Code Snippets&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Throughout this tutorial there will be many code snippets!
In fact all the code that makes up the reference implementation will be present at some point in the tutorial.
As we progress through building this roguelike, there will be times when we update existing code.
Whenever code changes, the new version of the code will be shown, with (hopefully!) enough context for the reader
to understand the old code that it’s replacing and update their implementation accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;If it’s not clear, consult the reference implementation to see exactly what changes between each section of each part.&lt;&#x2F;p&gt;
&lt;p&gt;There may be points in the middle of sections (between headings) where the code doesn’t compile, however at each heading
in each part, the code will be in a compiling state. Each heading corresponds to a particular &lt;code&gt;part-x.y&lt;&#x2F;code&gt; branch
in the reference implementation repository, and each such branch should always be in a compilable state.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ready-to-begin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ready-to-begin&quot; aria-label=&quot;Anchor link for: ready-to-begin&quot;&gt;Ready to begin?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-1&#x2F;&quot;&gt;Click here for part 1 of the tutorial!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 1 - Drawing and Moving the Player</title>
        <published>2020-06-12T20:00:00+10:00</published>
        <updated>2020-06-12T20:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-tutorial-2020-part-1/</id>
        
        <summary type="html">&lt;p&gt;For getting set up for this tutorial, see &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-0&#x2F;&quot;&gt;Part 0&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This part will take you from printing “Hello, World!” to opening a window, drawing a ‘@’ symbol
(representing the player character) and moving the player around with the arrow keys.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this part, the game will look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-tutorial-2020-part-1&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Conway&#x27;s Game of Life on the NES in Rust</title>
        <published>2020-05-21T16:00:00+10:00</published>
        <updated>2020-05-21T16:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/conways-game-of-life-on-the-nes-in-rust/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/conways-game-of-life-on-the-nes-in-rust/</id>
        
        <summary type="html">&lt;style&gt;
.nes-3x3 img {
    image-rendering: crisp-edges;
    image-rendering: pixelated;
    width: 384px;
    height: 48px;
}
.pattern-table img {
    image-rendering: crisp-edges;
    image-rendering: pixelated;
    width: 256px;
    height: 256px;
}
.pattern img {
    image-rendering: crisp-edges;
    image-rendering: pixelated;
    width: 16px;
    height: 16px;
}
.nes-screenshot img {
    width: 512px;
    height: 480px;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}
&lt;&#x2F;style&gt;
&lt;p&gt;This post is about a Rust program…&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo install conway-nes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…that prints out a NES binary…&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ conway-nes &amp;gt; life.nes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…that runs Conway’s Game of Life!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ fceux life.nes    # fceux is a NES emulator
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;nes-screenshot&quot;&gt;
&lt;img src=&quot;demo.webp&quot;&gt;
&lt;&#x2F;div&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>slime99</title>
        <published>2020-03-08T06:00:00+10:00</published>
        <updated>2020-03-08T06:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/slime99/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/slime99/</id>
        
        <summary type="html">&lt;p&gt;A traditional roguelike where the outcomes of attacking and defending are pre-determined and visible.
Gameplay revolves around fighting slimes, adding to your sequence of combat outcomes, and using
abilities to modify the order in which combat outcomes occur. It’s set in a neon sewer!&lt;&#x2F;p&gt;
&lt;p&gt;It’s my entry in the 2020 7 Day Roguelike game jam.&lt;&#x2F;p&gt;
&lt;p&gt;Play or download slime99 on &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;slime99&quot;&gt;its itch.io page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;View the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;slime99&quot;&gt;source code on github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;slime99&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2020: Day 7</title>
        <published>2020-03-06T22:00:00+10:00</published>
        <updated>2020-03-06T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day7/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day7/</id>
        
        <summary type="html">&lt;p&gt;It’s done! I spent today fleshing out the final boss fight, music, and lots and lots of playtesting and tweaking
until the game felt challenging but winnable (and fun!).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2020-day7&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2020: Day 6</title>
        <published>2020-03-05T22:00:00+10:00</published>
        <updated>2020-03-05T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day6/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day6/</id>
        
        <summary type="html">&lt;p&gt;I spent today play-testing and tweaking mechanics to make them more fun and balanced.
Originally there were slimes which granted the player abilities when attacked.
These slimes would flee the player at half speed, and you would need to chase them
down while evading other slimes to get new attacks, defences and techs.
This proved tedious, so I cut them. Now all enemies have a chance to drop items when
killed. The green “goo” slimes drop better items, but they also spawn sludge when
killed, so you have to step in sludge and take damage to pick up the item.
There are also various items placed around the level, with better items being
placed in sludge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2020-day6&#x2F;screenshot4.png&quot; alt=&quot;screenshot4.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2020: Day 5</title>
        <published>2020-03-04T22:00:00+10:00</published>
        <updated>2020-03-04T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day5/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day5/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day5/">&lt;p&gt;Today I focused on upgrades. There are certain enemies which grant attack, defense, and
tech items when damaged. Upon completion of a level, this dialog appears letting you
choose an ability (abilities let you manipulate the sequences of items).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2020-day5&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tomorrow I need to play the game a ton and tweak mechanics until it is fun.
I have an idea for a final boss fight: A slime which divides when hit, into slimes with
random combinations of properties!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2020: Day 4</title>
        <published>2020-03-03T21:00:00+10:00</published>
        <updated>2020-03-03T21:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day4/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day4/</id>
        
        <summary type="html">&lt;p&gt;Lots of work on mechanics today. All the attack and defense abilities are implemented,
and most enemies do something interesting when attacked. Also, it’s possible (but not
advisable!) to walk on the green sludge found around the sewer. Most enemies are also
vulnerable to the sludge, which can be used to the player’s advantage.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2020-day4&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2020: Day 3</title>
        <published>2020-03-02T20:00:00+10:00</published>
        <updated>2020-03-02T20:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day3/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day3/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day3/">&lt;p&gt;Today I connected the user-interface to gameplay. Each time the player deals
or receives damage, or uses a tech, the respective list decreases and the
relevant action is applied (though not all are implemented yet).
The most complicated part of this is the aim UI (the red line in the screenshot),
but this was largely adapting some existing code to work with a grid of 2x2
tiles.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2020-day3&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tomorrow I’ll implement all the combat outcomes, and give each type of enemy
a distinct effect which applies upon damage&#x2F;death.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2020: Day 2</title>
        <published>2020-03-01T20:00:00+10:00</published>
        <updated>2020-03-01T20:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day2/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day2/</id>
        
        <summary type="html">&lt;p&gt;Lots of visual changes today! I implemented a brand-new renderer. The most interesting thing about it
is every game cell is rendered as a 2x2 block of text cells. The obvious benefit of doing this is
the health of each enemy can be displayed on the enemy tiles, along with a letter indicating what
type of enemy they are, and an arrow indicating where they will move on their next turn.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2020-day2&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Another neat side-effect of 2x2 rendering is the stairs can actually look like stairs (rendered using block characters)! I had to improvise a symbol for
the player character. I made an arrangement of box-drawing characters that kinda looks like a futuristic ‘@’ if you squint!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2020: Day 1</title>
        <published>2020-02-29T20:00:00+10:00</published>
        <updated>2020-02-29T20:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2020-day1/</id>
        
        <summary type="html">&lt;p&gt;Today I focused on procedural generation. I have a small playable demo of a
procedurally-generated sewer. Walls are placed using
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;wave-function-collapse&#x2F;&quot;&gt;wave function collapse&lt;&#x2F;a&gt;,
then sludge pools, bridges, doors, and the start and goal locations are chosen
based on hand-crafted rules. I then spent an hour or so integrating the level
generator into the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;rip&quot;&gt;RIP&lt;&#x2F;a&gt; engine, and messing
around with graphics and lighting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2020-day1&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2020: Plan</title>
        <published>2020-02-29T08:00:00+10:00</published>
        <updated>2020-02-29T08:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2020-plan/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2020-plan/</id>
        
        <summary type="html">&lt;style&gt;
.slime99 {
    color: rgb(0,255,255);
    background-color: rgb(255,0,255);
}
&lt;&#x2F;style&gt;
&lt;h2 id=&quot;slime99&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#slime99&quot; aria-label=&quot;Anchor link for: slime99&quot;&gt;&lt;span class=&quot;slime99&quot;&gt;Slime99&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the not-too-distant future,
&lt;span class=&quot;slime99&quot;&gt;&lt;strong&gt;THE YEAR 1999&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;
fallout from &lt;span class=&quot;slime99&quot;&gt;&lt;strong&gt;THE WAR&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; has caused
&lt;span class=&quot;slime99&quot;&gt;&lt;strong&gt;RADIOACTIVE MUTANT SLIMES&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; to appear in the
sewers of &lt;span class=&quot;slime99&quot;&gt;&lt;strong&gt;THE CITY&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;. You are a
&lt;span class=&quot;slime99&quot;&gt;&lt;strong&gt;GENETICALLY-MODIFIED PRECOG SUPER-SOLDIER&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;, whose free-will was in-part traded for the power
to &lt;span class=&quot;slime99&quot;&gt;&lt;strong&gt;PREDICT THE OUTCOME OF COMBAT ENCOUNTERS&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;. Go into the sewers and
&lt;span class=&quot;slime99&quot;&gt;&lt;strong&gt;ELIMINATE THE SOURCE OF SLIME!&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Zelda Screen Transitions are Undefined Behaviour</title>
        <published>2019-06-20T21:30:00+10:00</published>
        <updated>2019-06-20T21:30:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/zelda-screen-transitions-are-undefined-behaviour/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/zelda-screen-transitions-are-undefined-behaviour/</id>
        
        <summary type="html">&lt;style&gt;
.nes-screenshot img {
    width: 512px;
    height: 480px;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}
.short-table tr {
    line-height: 4px;
}
&lt;&#x2F;style&gt;
&lt;p&gt;The vertical scrolling effect in the original “The Legend of Zelda” relies on
manipulating the NES graphics hardware in a manner that was likely unintended by its
designers.&lt;&#x2F;p&gt;
&lt;div class=&quot;nes-screenshot&quot;&gt;
&lt;img src=&quot;title.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Since I don’t have access
to any official documentation for the NES Picture Processing Unit
(PPU - the graphics chip), my claim of “undefined behaviour” is somewhat speculative.
I’ve been relying on the
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.nesdev.com&#x2F;w&#x2F;index.php&#x2F;PPU&quot;&gt;NesDev Wiki&lt;&#x2F;a&gt; for a specification of how
the graphics hardware behaves. The PPU is controlled by writing to memory-mapped
registers. Using these registers for their (seemingly!) intended purposes,
the following effect should not be possible:&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>NES Emulator Debugging</title>
        <published>2019-05-08T08:00:00+10:00</published>
        <updated>2019-05-08T08:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/nes-emulator-debugging/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/nes-emulator-debugging/</id>
        
        <summary type="html">&lt;style&gt;
.nes-emulator-debugging-screenshot img {
    width: 512px;
    height: 480px;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}
.nes-emulator-debugging-screenshot video {
    width: 512px;
    height: 480px;
}


.nes-tile img {
    width: 64px;
    height: 64px;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}

.mario-render img {
    width: 328px;
    height: auto;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}
&lt;&#x2F;style&gt;
&lt;p&gt;Making an emulator for a 1980s game console is an exercise in reading and comprehension.
The work is mostly translating documentation into code.
It’s oddly satisfying, building a model of an ancient machine,
instruction by instruction, device by device, especially once it can start running real programs.
You end up with an appreciation for the capabilities (or lack thereof) of hardware at the time,
and out of necessity, end up intimately familiar with the inner workings of a piece of computing history.&lt;&#x2F;p&gt;
&lt;p&gt;This post is not about making an emulator.&lt;&#x2F;p&gt;
&lt;p&gt;It is about the nightmarish, overwhelmingly complex, and at times seemingly hopeless
task of hunting down the parts of your emulator that don’t behave exactly
like the real hardware.&lt;&#x2F;p&gt;
&lt;div class=&quot;nes-emulator-debugging-screenshot&quot;&gt;
&lt;img src=&quot;example.png&quot;&gt;
&lt;&#x2F;div&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Get Well Soon</title>
        <published>2019-03-10T22:00:00+10:00</published>
        <updated>2019-03-10T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/get-well-soon/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/get-well-soon/</id>
        
        <summary type="html">&lt;p&gt;Get Well Soon is a turn-based tactical dungeon crawler where all abilities are cards.
Maintain your deck as you fight through 6 procedurally-generated levels to
reach the bottom of the dungeon and reclaim what you have lost.&lt;&#x2F;p&gt;
&lt;p&gt;It is my entry in the 7 Day Roguelike game jam for 2019.&lt;&#x2F;p&gt;
&lt;p&gt;Play or download Get Well Soon on &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;get-well-soon&quot;&gt;its itch.io page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;View the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;gws&#x2F;tree&#x2F;7drl&quot;&gt;source code on github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;get-well-soon&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2019: Content, Plot, Polish, Publish</title>
        <published>2019-03-09T23:00:00+10:00</published>
        <updated>2019-03-09T23:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day7/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day7/</id>
        
        <summary type="html">&lt;p&gt;I spent all of Saturday adding content, fixing bugs, play-testing, and balancing gameplay.&lt;&#x2F;p&gt;
&lt;p&gt;There are now roughly 20 different cards and 3 different level generators.
I added a win condition, a little flavour text, and organised the game into a sequence
of 6 procedurally-generated levels, each configured to be more difficult than the last.&lt;&#x2F;p&gt;
&lt;p&gt;Then I spent about 4 hours play-testing and tweaking.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day7&#x2F;glow.png&quot; alt=&quot;glow.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2019: More Enemies, More Upgrades, More Cards</title>
        <published>2019-03-08T23:00:00+10:00</published>
        <updated>2019-03-08T23:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day6/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day6/</id>
        
        <summary type="html">&lt;p&gt;I added 2 new upgrades: the Cursed Altar, and the Plentiful Fountain.&lt;&#x2F;p&gt;
&lt;p&gt;The altar lets you take character upgrades, increasing max health, max power,
hand size, and vision distance. The altar also adds one negative card to your
deck. Negative cards take up precious space in your hand.&lt;&#x2F;p&gt;
&lt;p&gt;The fountain lets you add additional cards to your deck.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day6&#x2F;eod.png&quot; alt=&quot;eod.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2019: Character Progression</title>
        <published>2019-03-07T23:00:00+10:00</published>
        <updated>2019-03-07T23:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day5/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day5/</id>
        
        <summary type="html">&lt;p&gt;I added the first of three planned upgrade items tonight: the Cleansing Flame.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day5&#x2F;progression.png&quot; alt=&quot;progression.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In deck-building games, removing cards from your deck can improve your
deck as a whole, by increasing the odds of the remaining cards being drawn
at a critical moment. The Cleansing Flame upgrade lets you remove cards from your deck, at the
cost of health.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2019: Card Gameplay</title>
        <published>2019-03-06T23:00:00+10:00</published>
        <updated>2019-03-06T23:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day4/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day4/</id>
        
        <summary type="html">&lt;p&gt;As of tonight you can actually &lt;em&gt;play&lt;&#x2F;em&gt; the cards from your hand.
Select a card with the number keys. Most cards require a parameter
of some kind. For example the “Blink” card needs to be told which cell to blink into,
which you specify by moving a cursor into position and hitting enter.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day4&#x2F;before.png&quot; alt=&quot;before.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After blinking the game shows a glowing orb at your previous location, which
fades out after a few frames, just for fun!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2019: Card Display, Death Screen</title>
        <published>2019-03-05T22:00:00+10:00</published>
        <updated>2019-03-05T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day3/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day3/</id>
        
        <summary type="html">&lt;p&gt;Lots of work on rendering tonight. I made a renderer for the current hand, which can
display cards, empty spaces where cards used to be (before they were played), and
locked card slots which can be unlocked by character upgrade (not yet implemented!).
Deck building and actually playing the cards will come later. I want to have a solid
framework for displaying card info to players before I add too much content.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day3&#x2F;death.png&quot; alt=&quot;death.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Also, who doesn’t love a good death screen? Hopefully by revealing the map to players
when they die, they will think about alternative choices they could have made
which might have lead to them living a little longer.
It could also tease at some undiscovered content!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2019: Physics and Improved Pathfinding</title>
        <published>2019-03-04T22:00:00+10:00</published>
        <updated>2019-03-04T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day2/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day2/</id>
        
        <summary type="html">&lt;p&gt;The most notable feature from tonight is NPCs pre-commit
to an action before the player takes their turn. This
means the game can telegraph enemy actions to the player,
which lets the player better plan ahead in combat.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day2&#x2F;a.png&quot; alt=&quot;a.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When an NPC is choosing where to move, it will avoid cells
which either currently contain an NPC, or which an NPC has
already committed to moving into. This does mean NPCs will tend
to be more spread out.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2019: Procgen and Basic Pathfinding</title>
        <published>2019-03-03T22:00:00+10:00</published>
        <updated>2019-03-03T22:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2019-day1/</id>
        
        <summary type="html">&lt;p&gt;I configured WFC for generating spiky caves.
Much like staring at clouds, I often recognise shapes in the generated levels:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day1&#x2F;1.png&quot; alt=&quot;1.png&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day1&#x2F;2.png&quot; alt=&quot;2.png&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2019-day1&#x2F;3.png&quot; alt=&quot;3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2019: Planning and Preparation</title>
        <published>2019-03-03T09:00:00+10:00</published>
        <updated>2019-03-03T09:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2019-plan/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2019-plan/</id>
        
        <summary type="html">&lt;p&gt;I’m about to start working on my 7drl project for 2019: Get Well Soon.
It will be a deck-building, but otherwise traditional roguelike, in the sense that
the world is square grid, gameplay is turn-based, levels are procedurally generated
and you have to restart if you lose. All character abilities will be
activated by playing cards. The character can be upgraded by adding and removing
cards from the deck.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Procedural Generation with Wave Function Collapse</title>
        <published>2019-02-21T00:00:00+00:00</published>
        <updated>2019-02-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/wave-function-collapse/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/wave-function-collapse/</id>
        
        <summary type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;wave-function-collapse&#x2F;flower-banner-scaled.png&quot; alt=&quot;flower-banner-scaled.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;div style=&quot;color:gray;font-style:italic&quot;&gt;
&lt;p&gt;(Edit 2022-05-03: I found out that the Wave Function Collapse algorithm was heavily inspired by
an existing algorithm called “Model Synthesis”. I’ve added a &lt;a href=&quot;#model-synthesis&quot;&gt;section&lt;&#x2F;a&gt; to
further reading with links to the author’s website for more information.)&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Wave Function Collapse is a procedural generation algorithm which produces
images by arranging a collection of tiles according to rules about which tiles
may be adjacent to each other tile, and relatively how frequently each tile should appear.
The algorithm maintains, for each pixel of the output image, a probability
distribution of the tiles which may be placed there. It repeatedly chooses a
pixel to “collapse” - choosing a tile to use for that pixel based on its
distribution. WFC gets its name from
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Wave_function_collapse&quot;&gt;quantum physics&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of this post is to build an intuition for how and why the WFC algorithm works.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>2018 Recap</title>
        <published>2018-12-30T00:00:00+00:00</published>
        <updated>2018-12-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/2018-recap/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/2018-recap/</id>
        
        <summary type="html">&lt;p&gt;Here’s a summary of the things I made this year - mostly libraries and
experiments relating to games and computer graphics. Many of these projects
deserve a dedicated post explaining them in further depth, and I intend to
elaborate further in future posts. All these projets are written in rust.
Headings link to the projects on github. All animations are realtime screen
recordings.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wave-function-collapse-library&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wave-function-collapse-library&quot; aria-label=&quot;Anchor link for: wave-function-collapse-library&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;wfc&quot;&gt;Wave Function Collapse Library&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2018-recap&#x2F;wfc-cat.png&quot; alt=&quot;wfc-cat.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wave Function Collapse is a procedural generation algorithm which takes as input
a list of tiles, rules describing which tiles may appear adjacent to one another
in the output, and the relative frequency with which each tile should appear in
the output. A common way of specifying this input is in the form of an example
image which looks similar to the desired output.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Meters Below the Ground</title>
        <published>2018-03-10T11:30:00+10:00</published>
        <updated>2018-03-10T11:30:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/meters-below-the-ground/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/meters-below-the-ground/</id>
        
        <summary type="html">&lt;p&gt;Meters Below the Ground is a short tactical dungeon-crawler about escaping from
an insectoid-infested facility. Complete objectives to unlock more meters for
your character so you might stand a chance against the alien threat.&lt;&#x2F;p&gt;
&lt;p&gt;It is my entry in the 7 Day Roguelike game jam for 2018.&lt;&#x2F;p&gt;
&lt;p&gt;Play or download Meters Below the Ground in &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;meters-below-the-ground&quot;&gt;its itch.io page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;View the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;meters-below-the-ground&quot;&gt;source code on github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;meters-below-the-ground&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2018: Success</title>
        <published>2018-03-10T00:37:00+10:00</published>
        <updated>2018-03-10T00:37:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2018-success/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2018-success/</id>
        
        <summary type="html">&lt;p&gt;The game is done! I’ll make another post in a day or so with links to download
and play the game, but if you can’t wait, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;meters-below-the-ground&quot;&gt;get the source code from github&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;meters-below-the-ground&quot;&gt;play or download the game from its itch.io page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2018: Meters, Objectives</title>
        <published>2018-03-09T00:39:00+10:00</published>
        <updated>2018-03-09T00:39:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2018-meters-objectives/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2018-meters-objectives/</id>
        
        <summary type="html">&lt;p&gt;Tonight I added new meters and objectives.&lt;&#x2F;p&gt;
&lt;p&gt;In this screenshot, the player has just activated an emergency beacon - the objective
of the level. Doing so alerts all NPCs of the player’s presence, so getting to the
stairs will be challenging.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2018-meters-objectives&#x2F;beacon.png&quot; alt=&quot;beacon.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2018: NPCs</title>
        <published>2018-03-08T00:01:00+10:00</published>
        <updated>2018-03-08T00:01:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2018-npcs/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2018-npcs/</id>
        
        <summary type="html">&lt;p&gt;Tonight I added all the NPCs! I’ve followed an insect theme, and NPCs transform
based on an insect lifecycle. Levels begin populated with eggs and larvae.
Eventually, the eggs hatch into more larvae, and the larvae turn into chrysalises.
The chrysalises hatch into either an arachnoid - a fast enemy, which takes 2 turns
for every turn the player takes - or a beetoid, which acts at normal speed, but
has more health. There’s also a super egg which hatches into a queen, which I’ll
use for missions.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2018: Character Progression, Melee Combat</title>
        <published>2018-03-06T23:44:00+10:00</published>
        <updated>2018-03-06T23:44:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2018-character-progression-melee-combat/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2018-character-progression-melee-combat/</id>
        
        <summary type="html">&lt;p&gt;Today I implemented character progression. Character progression is entirely
made up of meters, which either give you new abilities, or passive benefits.
You get to choose 1 of 3 randomly selected meters to add to your character at
the end of each level, but only if you complete the mission for that level.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2018-character-progression-melee-combat&#x2F;upgrades.png&quot; alt=&quot;upgrades.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2018: Items, Glossary, Combat, Railgun</title>
        <published>2018-03-05T23:42:00+10:00</published>
        <updated>2018-03-05T23:42:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2018-items-glossary-combat-railgun/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2018-items-glossary-combat-railgun/</id>
        
        <summary type="html">&lt;p&gt;The most exciting changes today are the “Glossary”, and a revamped combat
system.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2018-items-glossary-combat-railgun&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2018: Procgen, Visibility, Missions, Colour</title>
        <published>2018-03-04T22:16:00+10:00</published>
        <updated>2018-03-04T22:16:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2018-procgen-visibility-missions-colour/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2018-procgen-visibility-missions-colour/</id>
        
        <summary type="html">&lt;p&gt;Lots of progress today! It’s starting to look like a game.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2018-procgen-visibility-missions-colour&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2018: Day 1</title>
        <published>2018-03-04T00:47:00+10:00</published>
        <updated>2018-03-04T00:47:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2018-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2018-day1/</id>
        
        <summary type="html">&lt;p&gt;This year I’m making a traditional roguelike where all of your stats, abilities
and goals are expressed via progress meters. The name of the game will be
“Meters Below the Ground”. Here’s an early screenshot:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2018-day1&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Pathfinding on a Grid</title>
        <published>2018-02-15T21:43:00+10:00</published>
        <updated>2018-02-15T21:43:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/pathfinding-on-a-grid/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/pathfinding-on-a-grid/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/pathfinding-on-a-grid/">&lt;p&gt;In this post I describe how to achieve sensible pathfinding of multiple
NPCs in a turn-based, grid-based setting.
When multiple NPCs are moving around on the same map, they can get in each
other’s way, which causes unusual-looking behaviour unless properly handled.
This post builds up a pathfinding technique, identifying, and addressing,
unusual behaviour caused by multiple NPCs interfering with each other.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll make the
following assumptions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;there is a single player&lt;&#x2F;li&gt;
&lt;li&gt;the goal of each NPC is to become adjacent to the player&lt;&#x2F;li&gt;
&lt;li&gt;NPCs can’t move through one another or the player&lt;&#x2F;li&gt;
&lt;li&gt;on their turn, the player, and each NPC can move 1 or 0 squares in a cardinal direction&lt;&#x2F;li&gt;
&lt;li&gt;the map is a 2d grid of squares, each of which is permanently either
traversable or non-traversable&lt;&#x2F;li&gt;
&lt;li&gt;the cost of moving between a pair of adjacent, traversable squares is 1 (ie. the grid is
uniform)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The approach I describe won’t rely too heavily on any of these assumptions.
I’m stating them here so as to remove any ambiguity in explanations.
Generalising the pathfinding technique to rely on fewer assumptions is left as
an exercise to the reader.&lt;&#x2F;p&gt;
&lt;p&gt;A note on diagrams: The player will be denoted with a &lt;code&gt;@&lt;&#x2F;code&gt;. Each NPC will be
referred to by a letter. White cells are traversable. Grey cells are
non-traversable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-approach-follow-a-dijkstra-map&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#initial-approach-follow-a-dijkstra-map&quot; aria-label=&quot;Anchor link for: initial-approach-follow-a-dijkstra-map&quot;&gt;Initial Approach: Follow a Dijkstra Map&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first approach will be to generate a map which stores, for each cell, the
distance from that cell to the player. These distances are shown as the numbers
in the top-left corner of each traversable cell in the diagrams below.
The data structure storing these distances (generally a 2d array of numbers) is
sometimes called a “Dijkstra Map”.
&lt;a href=&quot;http:&#x2F;&#x2F;www.roguebasin.com&#x2F;index.php?title=The_Incredible_Power_of_Dijkstra_Maps&quot;&gt;Here&lt;&#x2F;a&gt;
is an article elaborating on dijkstra maps.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;a.png&quot; alt=&quot;a.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A benefit of using a dijkstra map, rather than searching for a path for each NPC,
is that the dijkstra map only needs to be recomputed each time the player moves.
To determine which way an NPC should move, we need only consider the neighbours
of that NPC’s cell in the dijkstra map, choosing the one with the lowest score.
This scales well as the number of NPCs increases, as there is only a small
amount of work that must be done for each NPC.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;b.png&quot; alt=&quot;b.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The example above shows a single step for &lt;code&gt;X&lt;&#x2F;code&gt; and &lt;code&gt;Y&lt;&#x2F;code&gt;, where each moved to its
lowest-valued neighbour.
Note that &lt;code&gt;Y&lt;&#x2F;code&gt; chose arbitrarily between 2 cells equidistant from the player.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gaps-forming-between-npcs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#gaps-forming-between-npcs&quot; aria-label=&quot;Anchor link for: gaps-forming-between-npcs&quot;&gt;Gaps forming between NPCs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the first problem with the current approach. Consider the following
arrangement:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;c.png&quot; alt=&quot;c.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When &lt;code&gt;X&lt;&#x2F;code&gt; moves:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;d.png&quot; alt=&quot;d.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And then &lt;code&gt;Y&lt;&#x2F;code&gt; moves:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;e.png&quot; alt=&quot;e.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Everything seems fine, but what if &lt;code&gt;Y&lt;&#x2F;code&gt; had moved first? Since NPCs can’t move
through each other, the best choice for &lt;code&gt;Y&lt;&#x2F;code&gt; is to stay where it is, as any
single legal move would only increase its distance from the player.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;c.png&quot; alt=&quot;c.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On &lt;code&gt;X&lt;&#x2F;code&gt;’s
turn, &lt;code&gt;X&lt;&#x2F;code&gt; would still move towards the player, creating a gap between &lt;code&gt;X&lt;&#x2F;code&gt; and
&lt;code&gt;Y&lt;&#x2F;code&gt;, which looks unusual:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;d.png&quot; alt=&quot;d.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To prevent gaps from forming, we need to make sure that
NPCs move in increasing order of their distance to the player (that is,
the closest NPC to the player moves first, then the second closest, and so on). Since we generate
a dijkstra map, it’s easy to determine how far each NPC is from the player.
Simply sorting NPCs by the value of their cell in the dijkstra map is enough to
produce a turn order which avoids this problem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;npcs-getting-in-each-other-s-way&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#npcs-getting-in-each-other-s-way&quot; aria-label=&quot;Anchor link for: npcs-getting-in-each-other-s-way&quot;&gt;NPCs getting in each other’s way&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s look at some cases where NPCs interfere with the movement of other NPCs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;e.png&quot; alt=&quot;e.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On &lt;code&gt;X&lt;&#x2F;code&gt;’s next turn, it will remain next to the player - there’s nothing it can
do to get closer to the player, so there’s no need to move. (In a typical roguelike it
would probably attack the player at this point.) What does &lt;code&gt;Y&lt;&#x2F;code&gt; do? None of
&lt;code&gt;Y&lt;&#x2F;code&gt;’s traversable neighbours are lower-valued in the dijkstra map than &lt;code&gt;Y&lt;&#x2F;code&gt;’s
current cell, so it will stay put, despite it being possible to eventually get
closer to the &lt;code&gt;@&lt;&#x2F;code&gt;, by first moving north, into a higher-valued cell.&lt;&#x2F;p&gt;
&lt;p&gt;In the next example, assume &lt;code&gt;X&lt;&#x2F;code&gt; moves before &lt;code&gt;Y&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;g.png&quot; alt=&quot;g.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;X&lt;&#x2F;code&gt; will move east, occupying &lt;code&gt;Y&lt;&#x2F;code&gt;’s west neighbour. On &lt;code&gt;Y&lt;&#x2F;code&gt;’s turn, its
valid moves are to move east, into a higher-valued cell than its present cell,
or to do nothing. If &lt;code&gt;Y&lt;&#x2F;code&gt;’s goal is to get to the player in as few turns as
possible, its best course of action is to wait where it is for one turn,
assuming &lt;code&gt;X&lt;&#x2F;code&gt; will proceed south and make room for &lt;code&gt;Y&lt;&#x2F;code&gt; to continue moving towards
the player. &lt;code&gt;Y&lt;&#x2F;code&gt;’s alternative - moving east, and proceeding down the east edge
of the map - will take longer.&lt;&#x2F;p&gt;
&lt;p&gt;What if there’s a gap in the wall closer to &lt;code&gt;Y&lt;&#x2F;code&gt;. Assume &lt;code&gt;X&lt;&#x2F;code&gt; moves first again:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;n.png&quot; alt=&quot;n.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here, it might make sense for &lt;code&gt;Y&lt;&#x2F;code&gt; to move east on its turn rather than waiting a
turn before moving west. It may look more natural for &lt;code&gt;Y&lt;&#x2F;code&gt; to follow a longer
path, than wait for the shorter one to free up, though the decision
seems to depend on how much longer the longer path is.&lt;&#x2F;p&gt;
&lt;p&gt;Assume it’s &lt;code&gt;Z&lt;&#x2F;code&gt;’s turn. What should it do?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;o.png&quot; alt=&quot;o.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here there’s no path to the player, but rather than giving up, &lt;code&gt;Z&lt;&#x2F;code&gt; should
probably still try to get as close to the player as it can.
It seems like it should move east, south, south, on its next 3 turns,
assuming nothing else moves.&lt;&#x2F;p&gt;
&lt;p&gt;After making the first move it finds itself here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;p.png&quot; alt=&quot;p.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looking at its immediate neighbours, it seems like &lt;code&gt;Z&lt;&#x2F;code&gt; could now go either
south, or west - the neighbours in both directions are the same distance from
the player. It is of
course preferable for &lt;code&gt;Z&lt;&#x2F;code&gt; to move south.&lt;&#x2F;p&gt;
&lt;p&gt;This last case is important, as it shows that
the presence of multiple NPCs means that it’s never
sufficient for an NPC to act purely on its neighbouring cells in the game grid
and dijkstra map.&lt;&#x2F;p&gt;
&lt;p&gt;A solution which addresses all these cases, is for each NPC, on is turn, to
examine all the cells reachable within a certain number of turns (3 turns will
suffice for all the examples here), and take the first step along the shortest
path to the cell it just examined with the lowest value in the dijkstra map.
If all the cells examined have a higher value than the NPC’s current cell, it
doesn’t move at all.&lt;&#x2F;p&gt;
&lt;p&gt;It’s worth noting that this won’t necessarily get every NPC as close
to the player as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Will &lt;code&gt;Z&lt;&#x2F;code&gt; go east or west, looking for the best cell up to 3 moves away?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pathfinding-on-a-grid&#x2F;r.png&quot; alt=&quot;r.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It could go either way! If it had looked 4 moves away, it would have
noticed that going west gives the potential to eventually be 1 move from the
player, while going east, the closest it can get is 2 away. Note however, that in
this example, &lt;code&gt;W&lt;&#x2F;code&gt; will move first (it’s closer to the player than &lt;code&gt;Z&lt;&#x2F;code&gt;), and &lt;code&gt;W&lt;&#x2F;code&gt;
is close enough to notice that going west is better, so it will go west, getting
out of &lt;code&gt;Z&lt;&#x2F;code&gt;’s way and allowing &lt;code&gt;Z&lt;&#x2F;code&gt; to move forward.&lt;&#x2F;p&gt;
&lt;p&gt;To improve an NPC’s decision making, you can increase the number of cells it
examines before moving.
The specific number depends on the nature of the game and
the individual NPC. In typical games, where NPCs die and the player moves
around, sub-optimal-but-still-pretty-good decision-making by NPCs won’t have a
noticeable effect on gameplay.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Before any NPCs move, if the player has moved since the dijkstra map was last
computed, recompute the dijkstra map based on the player’s current position.
Now, produce a list of NPCs sorted by the
value of their cells in the dijkstra map, in increasing order.
NPCs will take their turns in this order.
On each NPC’s turn, examine all the cells within a certain number of moves from
the NPC, without allowing moves through other NPCs.
Of the cells examined, identify the one whose value in the dijkstra map
is lowest. If no cell has a lower value than the NPC’s current cell,
the NPC doesn’t move that turn. Otherwise, the NPC takes the first
step along the shortest path between its
current cell and this cell. This causes NPCs to move towards the player in a
sensible way, without the influence of other NPCs causing unusual-looking
behaviour.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Another Roguelike Lighting Demo</title>
        <published>2017-12-10T17:37:00+10:00</published>
        <updated>2017-12-10T17:37:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/another-roguelike-lighting-demo/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/another-roguelike-lighting-demo/</id>
        
        <summary type="html">&lt;p&gt;In keeping with my habit of making game engines rather than entire games, here’s
a demo that was originally meant to be a game, but I got sidetracked by making
it pretty and lost momentum.
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;post-mortem-of-abandoned-game&#x2F;&quot;&gt;This has happened before.&lt;&#x2F;a&gt; It’s just another
step on the path to enlightenment. This post describes some of the new things I
tried.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;another-roguelike-lighting-demo&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Modifying Entity Component System for Turn-Based Games</title>
        <published>2017-04-01T19:28:01+10:00</published>
        <updated>2017-04-01T19:28:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/modifying-entity-component-system-for-turn-based-games/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/modifying-entity-component-system-for-turn-based-games/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/modifying-entity-component-system-for-turn-based-games/">&lt;p&gt;This article describes my modifications to the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entity%E2%80%93component%E2%80%93system&quot;&gt;Entity Component System (ECS)&lt;&#x2F;a&gt;
architecture pattern to better support a turn-based game loop.
This involves implementing game logic in &lt;strong&gt;actions&lt;&#x2F;strong&gt; which describe
changes to the game’s state, and &lt;strong&gt;rules&lt;&#x2F;strong&gt; which prevent certain actions, and
trigger additional reactions. The combination of actions and rules replace the
traditional idea of &lt;strong&gt;systems&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I implemented these changes in the engine I used for my 7DRL: &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;apocalypse-post&quot;&gt;Apocalypse
Post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;entity-component-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#entity-component-systems&quot; aria-label=&quot;Anchor link for: entity-component-systems&quot;&gt;Entity Component Systems&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Entities&lt;&#x2F;strong&gt; are objects in the game world. Each entity has a collection of
&lt;strong&gt;components&lt;&#x2F;strong&gt; that define what that entity is. A component is a piece of typed
data. All the data making up the game state is in the form of components, each
belonging to exactly one entity. Some example components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;position&lt;&#x2F;strong&gt; which stores the location of an entity&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;strong&gt;velocity&lt;&#x2F;strong&gt; which stores the speed and direction in which an entity is
moving&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;strong&gt;solid&lt;&#x2F;strong&gt; flag, which denotes an entity as being solid for the purposes of
collision detection&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;strong&gt;tile&lt;&#x2F;strong&gt; which tells the renderer how to draw a component&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;strong&gt;controlled&lt;&#x2F;strong&gt; flag which denotes that this entity is controlled by the
player&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All game logic is implemented in the form of &lt;strong&gt;systems&lt;&#x2F;strong&gt;. Each system is
interested in a particular set of components. Typically, systems are described
as running continuously, or having periodic ticks, where they iterate over all
the entities that possess its interested set of components, and performing some
system-specific operation. Some example systems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;movement:&lt;&#x2F;strong&gt; For each entity with a &lt;strong&gt;position&lt;&#x2F;strong&gt; and &lt;strong&gt;velocity&lt;&#x2F;strong&gt;, move the entity by
changing its &lt;strong&gt;position&lt;&#x2F;strong&gt; based on its &lt;strong&gt;velocity&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;collision:&lt;&#x2F;strong&gt; For each entity with a &lt;strong&gt;position&lt;&#x2F;strong&gt;, &lt;strong&gt;velocity&lt;&#x2F;strong&gt; and &lt;strong&gt;solid&lt;&#x2F;strong&gt;, if it
attempted to move through another entity with &lt;strong&gt;solid&lt;&#x2F;strong&gt;, apply some collision
resolution policy.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;input:&lt;&#x2F;strong&gt; If a button is currently pressed, corresponding to some
game control, apply the effect of that control to each entity with a
&lt;strong&gt;controlled&lt;&#x2F;strong&gt; component.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;renderer:&lt;&#x2F;strong&gt; For each entity with a &lt;strong&gt;position&lt;&#x2F;strong&gt; and a &lt;strong&gt;tile&lt;&#x2F;strong&gt;, draw the
image described by the entity’s &lt;strong&gt;tile&lt;&#x2F;strong&gt; at a location on the screen based on
the entity’s &lt;strong&gt;position&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;game-loops&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#game-loops&quot; aria-label=&quot;Anchor link for: game-loops&quot;&gt;Game Loops&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a straw-person implementation for the game loop of an ECS game engine.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;game_loop&lt;&#x2F;span&gt;&lt;span&gt;(game_state) {
&lt;&#x2F;span&gt;&lt;span&gt;    forever {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        time_delta &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;wait_for_frame&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        for each system &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;systems {
&lt;&#x2F;span&gt;&lt;span&gt;            system.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span&gt;(game_state, time_delta);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is perhaps an over-simplification, though most of the literature I’ve read
about ECS describes something resembling that game loop. I claim that this game
loop is more suited for real-time games than turn-based games.&lt;&#x2F;p&gt;
&lt;p&gt;In a real-time
game, you must constantly re-render the scene so the player can see changes to
the game’s state. At any point, the player may press button, and the game state
must update immediately. Physics is constantly being enforced, non-player
characters are
constantly determining what to do next, animations are always being played.
Everything notionally happens at once, all the time, so the idea of a periodic
tick makes sense.&lt;&#x2F;p&gt;
&lt;p&gt;In a turn-based game, each character (player or non-player) acts on their turn.
Typically, they perform a single action, which may have some follow-on actions,
and then it’s the next player’s turn. The scene only needs to be rendered after
the state of the game has changed.&lt;&#x2F;p&gt;
&lt;p&gt;For my game, I wanted to have a game loop resembling:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;game_loop&lt;&#x2F;span&gt;&lt;span&gt;(game_state) {
&lt;&#x2F;span&gt;&lt;span&gt;    forever {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;* Figure out whose turn it is. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        current_character &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;schedule.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;get_next_character&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;* The character declares an action they will take.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;         * This blocks waiting for input if it&amp;#39;s the player&amp;#39;s turn.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;         * Otherwise the AI for the character is invoked. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        action &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;current_character.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;determine_action&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;* If the rules permit the action... *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;rules.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;permit&lt;&#x2F;span&gt;&lt;span&gt;(action) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;* ...then actually do the action. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            game_state.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;(action);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;* Schedule the character&amp;#39;s next turn. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        schedule.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(current_character);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;* Finally, render the scene. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        renderer.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(game_state);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, this is over-simplified. The key points are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I want the ability to block waiting for input player’s turn, rather than
periodically sampling input. The motivation for this is power-saving.&lt;&#x2F;li&gt;
&lt;li&gt;I only want to re-draw the scene when necessary, rather than periodically.
This is also to save power.&lt;&#x2F;li&gt;
&lt;li&gt;I want the ability to reason about the outcome of an action before it is
committed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These goals are incompatible with the idea of &lt;strong&gt;systems&lt;&#x2F;strong&gt; as they are typically
described in ECS literature. In my engine, I implement game logic in
&lt;strong&gt;actions&lt;&#x2F;strong&gt;, which describe changes to the game state, and &lt;strong&gt;rules&lt;&#x2F;strong&gt;, which
describe restrictions on which actions can be committed, as well as follow-on
action which happen in response to certain actions. In the remainder of this
post, I’ll describe how actions and rules work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;storing-data-entities-and-components&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#storing-data-entities-and-components&quot; aria-label=&quot;Anchor link for: storing-data-entities-and-components&quot;&gt;Storing Data: Entities and Components&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;These are unchanged from the traditional ECS pattern, but I’ll introduce my
implementation of them to simplify the explanation of new concepts later.&lt;&#x2F;p&gt;
&lt;p&gt;I consider two kinds of component:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Components&lt;&#x2F;strong&gt; store typed data about an entity.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Flag Components&lt;&#x2F;strong&gt; store no data, but their presence in an entity is
meaningful.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;An entity is represented by a unique identifier - namely, a 64-bit integer.
For each type of component, there is a single data structure which stores
values of that component for all entities. For data components, values are
stored in a hash table, keyed by entity id. If an entity has a particular data
component, that component’s value will be stored against the entity’s id in that
component’s hash table. For each flag component, there is a
set of entity ids, such that if an entity’s id is in the set, then that entity
is considered to have that component.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example entity store:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;EntityId &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;EntityStore {
&lt;&#x2F;span&gt;&lt;span&gt;    position: HashMap&amp;lt;EntityId, (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    door_state: HashMap&amp;lt;EntityId, DoorState&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    tile: HashMap&amp;lt;EntityId, TileType&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    solid: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    can_open_doors: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; supporting types
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;DoorState {
&lt;&#x2F;span&gt;&lt;span&gt;    Open,
&lt;&#x2F;span&gt;&lt;span&gt;    Closed,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;TileType {
&lt;&#x2F;span&gt;&lt;span&gt;    OpenDoor,
&lt;&#x2F;span&gt;&lt;span&gt;    ClosedDoor,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; getters
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;EntityStore {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;get_position&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, id: EntityId) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|v| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;v)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; repeated for each data component
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;contains_solid&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, id: EntityId) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.solid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;id)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; repeated for each flag component
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;mutating-data-actions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mutating-data-actions&quot; aria-label=&quot;Anchor link for: mutating-data-actions&quot;&gt;Mutating Data: Actions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;An action describes a change to the game state. There are a small number of
ways the game state can be changed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the value of an entity’s data component can be set (added or changed)&lt;&#x2F;li&gt;
&lt;li&gt;an entity can gain a new flag component&lt;&#x2F;li&gt;
&lt;li&gt;an entity can lose a component&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that the first two types of change both correspond to an entry being added
to a component store. Also note that I only talk about components -
not entities. There is no global list of entities, and no explicit way to add or
remove entities. Adding an entity is equivalent to adding some components with
the new entity’s id. Removing an entity is equivalent to removing the entries
from all component stores with the entity’s id.&lt;&#x2F;p&gt;
&lt;p&gt;An action is represented by an &lt;code&gt;EntityStore&lt;&#x2F;code&gt; (defined above), storing all
component values being added or changed by the action. Additionally, for each
component type, an action has a set of entity id’s that are losing that
component.&lt;&#x2F;p&gt;
&lt;p&gt;Example implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;RemovedComponents {
&lt;&#x2F;span&gt;&lt;span&gt;    position: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    tile: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    door_state: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    tile: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    solid: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    can_open_doors: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Action {
&lt;&#x2F;span&gt;&lt;span&gt;    additions: EnityStore,
&lt;&#x2F;span&gt;&lt;span&gt;    removals: RemovedComponents,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Action {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;remove_position&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, id: EntityId) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; repeated for each component
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;insert_position&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, id: EntityID,
&lt;&#x2F;span&gt;&lt;span&gt;                           value: (isize, isize)) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; repeated for each data component
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;insert_solid&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, id: EntityId) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; repeated for each flag component
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The engine also needs a way to commit actions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; applies `action` to `state`, clearing `action` in the process
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;commit_action&lt;&#x2F;span&gt;&lt;span&gt;(state: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; EntityStore, action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Action) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; removals
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; action.removals.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;drain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        state.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(id);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; repeated for each component type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; data insertions
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(id, value) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; action.insertions.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;drain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        state.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(id, value);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; repeated for each data component type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; flag insertions
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; actions.insertions.solid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;drain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        state.solid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(id);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; repeated for each flag component type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some example actions. Each is expressed as an “action constructor” function which populates
an empty action.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;move_character&lt;&#x2F;span&gt;&lt;span&gt;(character_id: EntityId, direction: Direction,
&lt;&#x2F;span&gt;&lt;span&gt;        state: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;EntityStore, action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Action) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; current_position &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_position&lt;&#x2F;span&gt;&lt;span&gt;(character_id)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Attempt to move entity with no position&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_position &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; current_position &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; direction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unit_vector&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert_position&lt;&#x2F;span&gt;&lt;span&gt;(character_id, new_position);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;open_door&lt;&#x2F;span&gt;&lt;span&gt;(door_id: EntityId, action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Action) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_solid&lt;&#x2F;span&gt;&lt;span&gt;(door_id);
&lt;&#x2F;span&gt;&lt;span&gt;    action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert_tile&lt;&#x2F;span&gt;&lt;span&gt;(door_id, TileType::OpenDoor);
&lt;&#x2F;span&gt;&lt;span&gt;    action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert_door_state&lt;&#x2F;span&gt;&lt;span&gt;(door_id, DoorState::Open);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;close_door&lt;&#x2F;span&gt;&lt;span&gt;(door_id: EntityId, action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Action) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert_solid&lt;&#x2F;span&gt;&lt;span&gt;(door_id);
&lt;&#x2F;span&gt;&lt;span&gt;    action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert_tile&lt;&#x2F;span&gt;&lt;span&gt;(door_id, TileType::ClosedDoor);
&lt;&#x2F;span&gt;&lt;span&gt;    action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert_door_state&lt;&#x2F;span&gt;&lt;span&gt;(door_id, DoorState::Closed);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note how none of the functions above modify the game’s state directly, but
rather construct an &lt;code&gt;Action&lt;&#x2F;code&gt; which describes how the state will be modified.&lt;&#x2F;p&gt;
&lt;p&gt;It will be convenient to be able to talk about the type of an action without
instantiating it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;ActionType {
&lt;&#x2F;span&gt;&lt;span&gt;    MoveCharacter(EntityId, Direction),
&lt;&#x2F;span&gt;&lt;span&gt;    OpenDoor(EntityId),
&lt;&#x2F;span&gt;&lt;span&gt;    CloseDoor(EntityId),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Given an &lt;code&gt;ActionType&lt;&#x2F;code&gt;, a &lt;code&gt;&amp;amp;EntityStore&lt;&#x2F;code&gt;, and a &lt;code&gt;&amp;amp;mut Action&lt;&#x2F;code&gt;, it’s possible to
call the appropriate action constructor with all its arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;create_action&lt;&#x2F;span&gt;&lt;span&gt;(action_type: ActionType, state: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;EntityStore, action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Action) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; `action` is assumed to be initially empty
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; action_type {
&lt;&#x2F;span&gt;&lt;span&gt;        MoveCharacter(entity_id, direction) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;move_character&lt;&#x2F;span&gt;&lt;span&gt;(entity_id, direction, state, action);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        OpenDoor(entity_id) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;open_door&lt;&#x2F;span&gt;&lt;span&gt;(entity_id, state, action);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        CloseDoor(entity_id) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;close_door&lt;&#x2F;span&gt;&lt;span&gt;(entity_id, state, action);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;game-logic-rules&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#game-logic-rules&quot; aria-label=&quot;Anchor link for: game-logic-rules&quot;&gt;Game Logic: Rules&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A game can have many rules. Each rules contains some logic that examines the
current state of the game, and an action, and decides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;whether the action is allowed to occur&lt;&#x2F;li&gt;
&lt;li&gt;which additional actions should occur&lt;&#x2F;li&gt;
&lt;li&gt;whether additional rules should be checked&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example that encodes the mechanic where bumping into a
closed door will open the door.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;ActionStatus {
&lt;&#x2F;span&gt;&lt;span&gt;    Accept,
&lt;&#x2F;span&gt;&lt;span&gt;    Reject,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;RuleStatus {
&lt;&#x2F;span&gt;&lt;span&gt;    KeepChecking,
&lt;&#x2F;span&gt;&lt;span&gt;    StopChecking,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;bump_open_doors&lt;&#x2F;span&gt;&lt;span&gt;(action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Action, state: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;EntityStore,
&lt;&#x2F;span&gt;&lt;span&gt;                   reactions: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ActionType&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                   -&amp;gt; (ActionStatus, RuleStatus) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; loop through all positions set by the action
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(id, position) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; action.insertions.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Only proceed if this entity can actually open doors
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains_can_open_doors&lt;&#x2F;span&gt;&lt;span&gt;(id) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; I promise I&amp;#39;ll explain this below!
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(door_id) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GET_DOOR_IN_CELL&lt;&#x2F;span&gt;&lt;span&gt;(position) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; if the entity would move into a cell with a door...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ...open the door...
&lt;&#x2F;span&gt;&lt;span&gt;            reactions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(ActionType::OpenDoor(door_id));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ...and prevent the move from occuring.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(ActionStatus::Reject, RuleStatus::StopChecking);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; no doors were bumped, so check other rules
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(ActionStatus::Accept, RuleStatus::KeepChecking);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first unusual thing one might notice is the fact that the rule loops over
all the entities that moved. Since actions can contain an arbitrary number of
changed components, this is required in case multiple entities move in an action.
Since an action can either be accepted or rejected, if multiple entities attempt
to move, and one of the moves is invalid, the action will still be rejected.
Having fine-grained actions (where each action represents a small change) allows
rules to be more powerful, without having to worry about “collateral damage”,
where some valid parts of an action don’t go ahead because of other invalid
parts of the same action.&lt;&#x2F;p&gt;
&lt;p&gt;The next thing to note is that the rule doesn’t just open the door there and
then. Instead, it queues up an action that will open the door. This will be an
action just like any other, and will go through the same rule-checking, so
there’s a possibility that the door won’t open, such as if the door is locked.&lt;&#x2F;p&gt;
&lt;p&gt;Now, what’s going on with that &lt;code&gt;GET_DOOR_IN_CELL&lt;&#x2F;code&gt; function. So far I haven’t
talked at all about reasoning about individual cells - only individual entities
or components. The &lt;code&gt;EntityStore&lt;&#x2F;code&gt; described earlier has no notion of cells, and
could be used for non grid-based games. All my applications of this engine so
far &lt;em&gt;have&lt;&#x2F;em&gt; been for games on a 2d grid, and most rules want to talk about
properties of cells, as well as properties of entities. To enable this, I use a
spatial hash, which I’ll introduce now, and elaborate more on rules later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spatial-hashing-interlude&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#spatial-hashing-interlude&quot; aria-label=&quot;Anchor link for: spatial-hashing-interlude&quot;&gt;Spatial Hashing Interlude&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In games where the world is represented as a grid, it’s useful to be able to
reason about entire cells in the grid. At the very least, it would be nice to
easily iterate through a list of entities in a particular cell. I also want to,
have properties of cells based on aggregating over components of the entities
in the cell. For example, if a cell contains at least one entity which has the
&lt;strong&gt;solid&lt;&#x2F;strong&gt; component, I want that cell to be considered solid.&lt;&#x2F;p&gt;
&lt;p&gt;There’s nothing too exciting about implementing a 2d grid of cells. Suffice it
to say I have a type &lt;code&gt;SpatialHashTable&lt;&#x2F;code&gt; with the following interface:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;SpatialHashTable {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Update the spatial hash table with an action that&amp;#39;s about
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; to be applied. In order for the spatial hash table to
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; accurately reflect the state of its corresponding
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; EntityStore, this method must be called each time an
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; action is committed to said EntityStore.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Action) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Returns a particular cell in the spatial hash table which
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; can be queried further.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, x: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;SpatialHashCell { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The cells are more interesting. Each cell maintains a set containing the ids of
all entities in the cell. When an entity moves, the
entity id set of the source cell and destination cell must be updated.
Additionally, for aggregate values, each time an entity moves or the component
relevant to the aggregate changes, the aggregate value must be updated.&lt;&#x2F;p&gt;
&lt;p&gt;There are different ways to aggregate properties of cells, with different use
cases. This post will cover two different aggregates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Booleans that are true if there is at least one entity with a
certain component in a cell. The cell will maintain a count
of the number of entities with the component.&lt;&#x2F;li&gt;
&lt;li&gt;Sets that store the ids of all the entities in a cell with a given
component.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SpatialHashCell {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; all the entities in this cell
&lt;&#x2F;span&gt;&lt;span&gt;    entities: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; keep track of the number of solid entities in this cell
&lt;&#x2F;span&gt;&lt;span&gt;    solid: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; maintain a set of entities with the `door_state` component
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; in this cell
&lt;&#x2F;span&gt;&lt;span&gt;    door_state: HashSet&amp;lt;EntityId&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;SpatialHashCell {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; returns true iff there is at least one solid entity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; in this cell
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;is_solid&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.solid &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; returns the id of an arbitrarily chosen entity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; in this cell with the `door_state` component
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;any_door_state&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;EntityId&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.door_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|s| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;s)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One may question the sense of allowing multiple entities with the &lt;strong&gt;door_state&lt;&#x2F;strong&gt;
component to exist in a single cell. There are unlikely to be any realistic
scenarios where there are multiple doors with the same position. However, the
simplest way to implement the entity store is allow it to store any combinations
of entities, and implement higher-level policy to be elsewhere (e.g. in actions
or rules).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;back-to-rules&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#back-to-rules&quot; aria-label=&quot;Anchor link for: back-to-rules&quot;&gt;Back to Rules&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Rules now take an additional argument: a &lt;code&gt;SpatialHashTable&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;bump_open_doors&lt;&#x2F;span&gt;&lt;span&gt;(action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Action, state: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;EntityStore,
&lt;&#x2F;span&gt;&lt;span&gt;                   spatial_hash: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;SpatialHashTable, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- NEW!
&lt;&#x2F;span&gt;&lt;span&gt;                   reactions: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ActionType&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                   -&amp;gt; (ActionStatus, RuleStatus) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; loop through all positions set by the action
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(id, position) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; action.insertions.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Only proceed if this entity can actually open doors
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains_can_open_doors&lt;&#x2F;span&gt;&lt;span&gt;(id) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; NEW!
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(door_id) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;            spatial_hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(position).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;any_door_state&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; if the entity would move into a cell with a door...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ...open the door...
&lt;&#x2F;span&gt;&lt;span&gt;            reactions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(ActionType::OpenDoor(door_id));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ...and prevent the move from occuring.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(ActionStatus::Reject, RuleStatus::StopChecking);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; no doors were bumped, so check other rules
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(ActionStatus::Accept, RuleStatus::KeepChecking);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How should we handle an action that moves an entity, and gives it the ability to
open doors at the same time? Suppose a character that could not open doors
gained the ability to open doors, and moved into a cell containing a door, as a
single action. I’d like the door to open in response.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the check &lt;code&gt;if !state.contains_can_open_doors(id) {&lt;&#x2F;code&gt;
queries the current state of the game only. Since the character currently
can’t open doors, this check will prevent the door from being opened.&lt;&#x2F;p&gt;
&lt;p&gt;I could add an additional check that examines the action, to see if the entity
moving into a door is about to gain the ability to open doors, but this feels
cumbersome. Instead, I want a way to talk about the state of the game after an
action has been committed, without actually committing the action.&lt;&#x2F;p&gt;
&lt;p&gt;Since the game state and actions are both described in terms of components, I
can turn a reference to a game state and a reference to an action into something
that looks like the state of the game following the action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;EntityStoreAfterAction&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    entity_store: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; EntityStore,
&lt;&#x2F;span&gt;&lt;span&gt;    action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Action,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; the same getters as an EntityStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; EntityStoreAfterAction&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;get_position&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, id: EntityId) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; if the component is being inserted, return it
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(value) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.action.insertions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_position&lt;&#x2F;span&gt;&lt;span&gt;(id) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(value);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; if the component is being removed, prevent the original
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; value from being returned
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.action.removals.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;id) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; return the original value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;self.entity_store.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get_position&lt;&#x2F;span&gt;&lt;span&gt;(id);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An &lt;code&gt;EntityStoreAfterAction&lt;&#x2F;code&gt; looks like an &lt;code&gt;EntityStore&lt;&#x2F;code&gt;! They both implement the
same query interface, but &lt;code&gt;EntityStoreAfterAction&lt;&#x2F;code&gt; lets us query the future.&lt;&#x2F;p&gt;
&lt;p&gt;Modifying the rule to use &lt;code&gt;EntityStoreAfterAction&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;bump_open_doors&lt;&#x2F;span&gt;&lt;span&gt;(action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Action, state: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;EntityStore,
&lt;&#x2F;span&gt;&lt;span&gt;                   spatial_hash: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;SpatialHashTable,
&lt;&#x2F;span&gt;&lt;span&gt;                   reactions: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ActionType&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                   -&amp;gt; (ActionStatus, RuleStatus) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; NEW!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; future_state &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; EntityStoreAfterAction {
&lt;&#x2F;span&gt;&lt;span&gt;        entity_store: state,
&lt;&#x2F;span&gt;&lt;span&gt;        action: action,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; loop through all positions set by the action
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(id, position) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; action.insertions.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Only proceed if this entity can actually open doors
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;future_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains_can_open_doors&lt;&#x2F;span&gt;&lt;span&gt;(id) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- CHANGED!
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(door_id) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;            spatial_hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(position).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;any_door_state&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; if the entity would move into a cell with a door...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ...open the door...
&lt;&#x2F;span&gt;&lt;span&gt;            reactions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(ActionType::OpenDoor(door_id));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ...and prevent the move from occuring.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(ActionStatus::Reject, RuleStatus::StopChecking);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; no doors were bumped, so check other rules
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(ActionStatus::Accept, RuleStatus::KeepChecking);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The order in which rules are checked effects their outcome. For example,
consider the following collision rule, that states that solid entities cannot
move through other solid entities.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;collision&lt;&#x2F;span&gt;&lt;span&gt;(action: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Action, state: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;EntityStore,
&lt;&#x2F;span&gt;&lt;span&gt;             spatial_hash: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;SpatialHashTable,
&lt;&#x2F;span&gt;&lt;span&gt;             reactions: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ActionType&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;             -&amp;gt; (ActionStatus, RuleStatus) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; future_state &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; EntityStoreAfterAction {
&lt;&#x2F;span&gt;&lt;span&gt;        entity_store: state,
&lt;&#x2F;span&gt;&lt;span&gt;        action: action,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(id, position) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; action.insertions.position.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;future_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains_solid&lt;&#x2F;span&gt;&lt;span&gt;(id) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; spatial_hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(position).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_solid&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(ActionStatus::Reject, RuleStatus::StopChecking);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(ActionStatus::Accept, RuleStatus::KeepChecking);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since closed doors are solid, if the &lt;code&gt;collision&lt;&#x2F;code&gt; rule was checked before the
&lt;code&gt;bump_open_doors&lt;&#x2F;code&gt; rule, the action would be rejected and we’d stop checking
rules, so the logic that opens doors would never run. Thus, &lt;code&gt;bump_open_doors&lt;&#x2F;code&gt;
should be checked before &lt;code&gt;collision&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#putting-it-all-together&quot; aria-label=&quot;Anchor link for: putting-it-all-together&quot;&gt;Putting it all together&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is roughly how my game loop works:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; the type of a rule function (e.g. collision)
&lt;&#x2F;span&gt;&lt;span&gt;type RuleFn = ...;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; knows which entity&amp;#39;s turn it is
&lt;&#x2F;span&gt;&lt;span&gt;struct TurnSchedule { ... };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;struct Game {
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; All entities and components in the game world.
&lt;&#x2F;span&gt;&lt;span&gt;    state: EntityStore,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; List of rules in the order they will be checked.
&lt;&#x2F;span&gt;&lt;span&gt;    rules: Vec&amp;lt;RuleFn&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Used to determine whose turn it is.
&lt;&#x2F;span&gt;&lt;span&gt;    schedule: TurnSchedule,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; It turns out you only need to have a single action
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; instantiated at a time. Store this as part of the
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; game to remove the overhead of creating a new
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; action each time we need one.
&lt;&#x2F;span&gt;&lt;span&gt;    action: Action,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; A queue of actions waiting to be processed in the
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; current turn.
&lt;&#x2F;span&gt;&lt;span&gt;    pending_actions: VecDeque&amp;lt;ActionType&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Rules have the ability to enqueue follow-on actions,
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; which will also be processed by rules. The follow-on
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; actions enqueued by a rule as it checks an action
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; are only added to pending_actions if the action being
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; checked gets accepted. Follow-on actions are
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; temporarily stored here, and added to pending_actions
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; if the current action is accepted.
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; There is a separate queue for actions enqueued by
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; accepting rules and rejecting rules. This allows
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; accepting rules to enqueue actions that will only
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; occur if the action ends up getting accepted.
&lt;&#x2F;span&gt;&lt;span&gt;    follon_on_accepted: VecDequeue&amp;lt;ActionType&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    follon_on_rejected: VecDequeue&amp;lt;ActionType&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    follon_on_current: VecDequeue&amp;lt;ActionType&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;impl Game {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    fn game_loop(&amp;amp;mut self) {
&lt;&#x2F;span&gt;&lt;span&gt;        loop {
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; Figure out whose turn it is.
&lt;&#x2F;span&gt;&lt;span&gt;            let entity_id: EntityId =
&lt;&#x2F;span&gt;&lt;span&gt;                self.schedule.next_turn();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; The current entity decides an action.
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; This waits for player input if it&amp;#39;s
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; the player&amp;#39;s turn, and invokes the AI
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; if it&amp;#39;s an NPC&amp;#39;s turn.
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; The details of choosing an action are
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; out of scope.
&lt;&#x2F;span&gt;&lt;span&gt;            let action_type: ActionType =
&lt;&#x2F;span&gt;&lt;span&gt;                CHOOSE_ACTION(&amp;amp;self.state, entity_id);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; Equeue the action for processing
&lt;&#x2F;span&gt;&lt;span&gt;            self.pending_actions.push_back(action_type);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; Check rules, and handle any follow-on
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; actions.
&lt;&#x2F;span&gt;&lt;span&gt;            self.process_actions();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; Allow the entity to take another turn
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; at some point in the future.
&lt;&#x2F;span&gt;&lt;span&gt;            self.schedule.insert(entity_id);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    fn process_actions(&amp;amp;mut self) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; Repeat until there are no pending actions.
&lt;&#x2F;span&gt;&lt;span&gt;        while let Some(action_type) =
&lt;&#x2F;span&gt;&lt;span&gt;            self.pending_actions.pop_front() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; Populate self.action based on the
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; value of action_type.
&lt;&#x2F;span&gt;&lt;span&gt;            self.action.instantiate_from(action_type,
&lt;&#x2F;span&gt;&lt;span&gt;                                         &amp;amp;self.state);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            let mut accepted = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; For each rule
&lt;&#x2F;span&gt;&lt;span&gt;            for rule in self.rules.iter() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; Check the rule
&lt;&#x2F;span&gt;&lt;span&gt;                let (action_status, rule_status) =
&lt;&#x2F;span&gt;&lt;span&gt;                    rule(&amp;amp;self.action. &amp;amp;self.state,
&lt;&#x2F;span&gt;&lt;span&gt;                         &amp;amp;mut self.follow_on_current);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; If a single rule rejects an action,
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; the action is rejected.
&lt;&#x2F;span&gt;&lt;span&gt;                if action_status == ActionStatus::Reject {
&lt;&#x2F;span&gt;&lt;span&gt;                    accepted = false;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &#x2F;&#x2F; Drain follow-on actions into
&lt;&#x2F;span&gt;&lt;span&gt;                    &#x2F;&#x2F; rejected queue.
&lt;&#x2F;span&gt;&lt;span&gt;                    for a in self.follow_on_current.drain(..) {
&lt;&#x2F;span&gt;&lt;span&gt;                        self.follow_on_rejected.push_back(a);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                } else {
&lt;&#x2F;span&gt;&lt;span&gt;                    &#x2F;&#x2F; Drain follow-on actions into
&lt;&#x2F;span&gt;&lt;span&gt;                    &#x2F;&#x2F; accepted queue.
&lt;&#x2F;span&gt;&lt;span&gt;                    for a in self.follow_on_current.drain(..) {
&lt;&#x2F;span&gt;&lt;span&gt;                        self.follow_on_accepted.push_back(a);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; Stop checking rules if the rule say so.
&lt;&#x2F;span&gt;&lt;span&gt;                if rule_status == RuleStatus::StopChecking {
&lt;&#x2F;span&gt;&lt;span&gt;                    break;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            if accepted {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; Apply the action, clearing the action in the
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; process.
&lt;&#x2F;span&gt;&lt;span&gt;                commit_action(&amp;amp;mut self.state, &amp;amp;mut self.action);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; It&amp;#39;s only necessary to re-draw the scene after
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; something has changed.
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; The details of rendering are out of scope.
&lt;&#x2F;span&gt;&lt;span&gt;                RENDER();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; Enqueue all the follow-on actions.
&lt;&#x2F;span&gt;&lt;span&gt;                for a in self.follow_on_accepted.drain(..) {
&lt;&#x2F;span&gt;&lt;span&gt;                    self.pending_actions.push_back(a);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            } else {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; The action was rejected.
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; Clear the action.
&lt;&#x2F;span&gt;&lt;span&gt;                self.action.clear();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &#x2F;&#x2F; Enqueue all the follow-on actions.
&lt;&#x2F;span&gt;&lt;span&gt;                for a in self.follow_on_rejected.drain(..) {
&lt;&#x2F;span&gt;&lt;span&gt;                    self.pending_actions.push_back(a);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;limitations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#limitations&quot; aria-label=&quot;Anchor link for: limitations&quot;&gt;Limitations&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;While using this engine for the 7DRL, I noticed some problems with its current
design.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;isolated-rules&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#isolated-rules&quot; aria-label=&quot;Anchor link for: isolated-rules&quot;&gt;Isolated Rules&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Splitting up the game logic into many individual rules leads to high cognitive load.
The motivation for having lots of small, modular, isolated rules, was to
&lt;em&gt;decrease&lt;&#x2F;em&gt; cognitive load, but it ended up having the opposite effect. The problem
is that rules aren’t completely isolated. If rules are checked in the wrong order
they can be unintentionally skipped. Rules have the ability to make the global decision
of whether or not to keep checking the remaining rules.&lt;&#x2F;p&gt;
&lt;p&gt;It’s not even clear whether attempting to
isolate rules from one another is the right approach. A lot of the fun in turn-based
games comes from the interaction of different mechanics, so forcing the rules to
be isolated may be harmful, compared to a framework that allows rules to
explicitly cooperate.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the rules reason about changes in position. This means, each rule must
loop over all the changes in position in the current action, and apply some
policy. The isolation between rules leads to several rules checking the same
component, and unnecessarily repeating work. This is more evidencing suggesting
I should stop isolating rules from one another.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;intra-turn-real-time-animation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#intra-turn-real-time-animation&quot; aria-label=&quot;Anchor link for: intra-turn-real-time-animation&quot;&gt;Intra-turn Real-time Animation&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;My engine allows a delay to be added between actions during a turn, to allow
real-time animations to be implemented as part of a turn’s resolution. In the gif
below, the bullet
leaving the van and hitting the barrel, and the subsequent explosions, are all
part of a single turn.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;modifying-entity-component-system-for-turn-based-games&#x2F;explosion.gif&quot; alt=&quot;explosion.gif&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is implemented using rules. Entities can have a &lt;strong&gt;velocity&lt;&#x2F;strong&gt; component, and
there is a rule that detects when an entity moves because of their velocity, and
schedules an additional action to move them again, resulting in a chain of
repeated move actions being committed.&lt;&#x2F;p&gt;
&lt;p&gt;This is a testament to the expressive power of actions and rules, but it feels
unnecessarily complicated. Also, when something goes wrong, debugging this chain
of actions and rules is a nightmare.&lt;&#x2F;p&gt;
&lt;p&gt;To simplify this, I’m thinking about adding a hook to the turn-resolution loop
that is called at each discrete point in (real) time as a turn is resolved. It would allow some game logic to
be invoked periodically to implement real-time mechanics. For example, it would take
all the entities with a velocity, and update their position such that they move
under their velocity. Sound familiar? I guess there’s a place for &lt;strong&gt;systems&lt;&#x2F;strong&gt; in
my engine after all.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My turn-based game engine uses a modified form of ECS. I still store data using entities
and components, but I found the idea of systems to be more suited to real-time
games. In my engine, I replace &lt;strong&gt;systems&lt;&#x2F;strong&gt; with &lt;strong&gt;actions&lt;&#x2F;strong&gt; and &lt;strong&gt;rules&lt;&#x2F;strong&gt;. Actions
describe discrete changes to the game’s state, in terms of entities and
components. Rules determine whether an action is allowed to happen, and which
additional actions will happen as a result.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Programming Languages Make Terrible Game Engines</title>
        <published>2017-03-25T14:26:01+10:00</published>
        <updated>2017-03-25T14:26:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/programming-languages-make-terrible-game-engines/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/programming-languages-make-terrible-game-engines/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/programming-languages-make-terrible-game-engines/">&lt;p&gt;This is the first of a series of posts I’m writing to explain the
inner workings of the game engine I used for my 7DRL: &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;apocalypse-post&quot;&gt;Apocalypse
Post&lt;&#x2F;a&gt;. It motivates one of the
problems I set out to solve with the engine - how to represent the types of game
entities.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;edit&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#edit&quot; aria-label=&quot;Anchor link for: edit&quot;&gt;Edit&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;roguelikedev&#x2F;comments&#x2F;61elh1&#x2F;programming_languages_make_terrible_game_engines&#x2F;&quot;&gt;discussion&lt;&#x2F;a&gt;
about this post, it was pointed out that the object-oriented examples below are
examples of bad object-oriented design. I agree with this, and I’m not trying to argue that
it’s impossible to design a good game engine using object-oriented programming.
The examples illustrate how someone new to building game engines might attempt
to use class inheritance to describe the types of game entities. The article
demonstrates the problems with this approach, and suggests a non-object-oriented
alternative.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-want-types&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-want-types&quot; aria-label=&quot;Anchor link for: you-want-types&quot;&gt;You want types&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You’re making a game engine, and you want a way to categorize entities in your
game, so the engine knows what operations it can perform on an entity.
You want a way to express the fact that &lt;strong&gt;Weapons&lt;&#x2F;strong&gt; can be fired, &lt;strong&gt;Characters&lt;&#x2F;strong&gt; can act,
&lt;strong&gt;Equipment&lt;&#x2F;strong&gt; can be equipped, and so on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;your-programming-language-has-types&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#your-programming-language-has-types&quot; aria-label=&quot;Anchor link for: your-programming-language-has-types&quot;&gt;Your programming language &lt;em&gt;has&lt;&#x2F;em&gt; types!&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Preface: Don’t do this!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Aha&lt;&#x2F;em&gt;, you say, &lt;em&gt;I just need to create abstract classes for &lt;strong&gt;Weapon&lt;&#x2F;strong&gt;, &lt;strong&gt;Character&lt;&#x2F;strong&gt;,
&lt;strong&gt;Equipment&lt;&#x2F;strong&gt;, and inherit them for concrete classes representing game entities&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Weapon &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;damage&lt;&#x2F;span&gt;&lt;span&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Action &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;act&lt;&#x2F;span&gt;&lt;span&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Equipment &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;equip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Sword &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Weapon &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Human &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Zombie &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But hang on, swords can also be equipped, we need multiple inheritance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Weapon &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;damage&lt;&#x2F;span&gt;&lt;span&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Action &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;act&lt;&#x2F;span&gt;&lt;span&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Equipment &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;equip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Sword &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Weapon&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Equipable &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Human &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Zombie &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When a human is bitten by a zombie, they should turn into a zombie. Wait &lt;strong&gt;turn
into&lt;&#x2F;strong&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps we can do something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;TurnsIntoZombie &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Zombie &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;turn_into&lt;&#x2F;span&gt;&lt;span&gt;(); }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Human &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;GameEntity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Character&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;TurnsIntoZombie &lt;&#x2F;span&gt;&lt;span&gt;{ ... }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This raises some questions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What does &lt;code&gt;turn_into&lt;&#x2F;code&gt; actually do? It needs to take a bunch the fields from
the &lt;strong&gt;Human&lt;&#x2F;strong&gt;, (equipment, physical stats), and create a new &lt;strong&gt;Zombie&lt;&#x2F;strong&gt; with
those fields, since it would be nice if the re-animated human in some ways
resembled their former self. Somehow we also need to make the original
&lt;strong&gt;Human&lt;&#x2F;strong&gt; object unusable, and ensure that there are no references to it that
might still try to treat the copied fields as if they were part of a human.&lt;&#x2F;li&gt;
&lt;li&gt;There will probably be other types of character besides humans and zombies,
and some may implement &lt;strong&gt;TurnsIntoZombie&lt;&#x2F;strong&gt;.
This implies that whenever &lt;em&gt;something&lt;&#x2F;em&gt; is bitten by a zombie, we need to
check (at runtime) whether it turns into a zombie. Alternatively,
&lt;code&gt;turn_into&lt;&#x2F;code&gt; could be moved into the &lt;strong&gt;Character&lt;&#x2F;strong&gt; interface, and do nothing for
characters that shouldn’t become zombies (should it return &lt;code&gt;null&lt;&#x2F;code&gt;?).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How should game entities be stored? One can imagine using a collection of
&lt;strong&gt;GameEntity&lt;&#x2F;strong&gt;.
The major problem is that the type information is lost from the
entities in the array, and upon pulling something out of the array, we need to
check what it is, and then cast it appropriately. An alternative may be to use a
separate collection of entities for each entity type. Entities may belong to
multiple types (e.g. a &lt;strong&gt;Sword&lt;&#x2F;strong&gt; is both &lt;strong&gt;Equipable&lt;&#x2F;strong&gt; and a &lt;strong&gt;Weapon&lt;&#x2F;strong&gt;), so
each may appear in several collections, and we would then have to manage the fact
that if an item is destroyed, it must be removed from all the lists that contain
it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;programming-language-types-map-poorly-to-game-entities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#programming-language-types-map-poorly-to-game-entities&quot; aria-label=&quot;Anchor link for: programming-language-types-map-poorly-to-game-entities&quot;&gt;Programming language types map poorly to game entities&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The cracks are starting to show:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Programming language types are static, in the sense that an object’s type
does not change. In games you want the types of game entities to be mutable.&lt;&#x2F;li&gt;
&lt;li&gt;You’re forced to use multiple inheritance if you want entities to fit into
multiple categories. Not all languages support this, and it comes with
its own set of problems.&lt;&#x2F;li&gt;
&lt;li&gt;You’re forced to check types at runtime. There’s nothing wrong with checking
types at runtime, but if you’re going to do it, why tie yourself to your
programming language’s type system?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;composition-over-inheritance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#composition-over-inheritance&quot; aria-label=&quot;Anchor link for: composition-over-inheritance&quot;&gt;Composition over Inheritance!&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The big problem with mapping language types onto game entities is that language
types are often concerned with describing what an object &lt;strong&gt;is&lt;&#x2F;strong&gt;, whereas game
entities are best described in terms of what an object &lt;strong&gt;has&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how one might describe the example above, without trying to fit game
entities into language types. I’m switching from java to rust because I no
longer need to give examples of object-oriented programming (phew!).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;GameEntity {
&lt;&#x2F;span&gt;&lt;span&gt;    weapon_damage: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    actor_state: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ActorState&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; defined below
&lt;&#x2F;span&gt;&lt;span&gt;    human: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    zombie: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; collection of keys into entity_table (below)
&lt;&#x2F;span&gt;&lt;span&gt;    equipment: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;GameState {
&lt;&#x2F;span&gt;&lt;span&gt;    entity_table: HashMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, GameEntity&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ActorState { ... }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ActorState {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new_human_state&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; ActorState { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new_zombie_state&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; ActorState { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; Action { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new_sword&lt;&#x2F;span&gt;&lt;span&gt;(damage: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; GameEntity {
&lt;&#x2F;span&gt;&lt;span&gt;    GameEntity {
&lt;&#x2F;span&gt;&lt;span&gt;        weapon_damage: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(damage),
&lt;&#x2F;span&gt;&lt;span&gt;        actor_state: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; a sword cannot act
&lt;&#x2F;span&gt;&lt;span&gt;        human: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        zombie: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        equipment: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new_human&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; GameEntity {
&lt;&#x2F;span&gt;&lt;span&gt;    GameEntity {
&lt;&#x2F;span&gt;&lt;span&gt;        weapon_damage: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        actor_state: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ActorState::new_human_state()),
&lt;&#x2F;span&gt;&lt;span&gt;        human: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        zombie: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        equipment: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(HashSet::new()),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every entity in the game is a &lt;code&gt;GameEntity&lt;&#x2F;code&gt;. A &lt;code&gt;GameEntity&lt;&#x2F;code&gt; is a collection of
properties that an entity might have, and the categorization of the entity is
based on which properties have values, and what those values are. Each field is
either an &lt;code&gt;Option&lt;&#x2F;code&gt; which may contain some data, or a &lt;code&gt;bool&lt;&#x2F;code&gt; denoting the
existence of a property with no associated data.&lt;&#x2F;p&gt;
&lt;p&gt;Note that there are more efficient ways to represent entities than structs of
&lt;code&gt;Options&lt;&#x2F;code&gt; and &lt;code&gt;bools&lt;&#x2F;code&gt;. I’ll cover this in a later article.&lt;&#x2F;p&gt;
&lt;p&gt;Changing the type of an entity is now as simple as changing some of its fields:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;become_zombie&lt;&#x2F;span&gt;&lt;span&gt;(entity: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; GameEntity) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; replace human ai with zombie ai
&lt;&#x2F;span&gt;&lt;span&gt;    entity.actor_state &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ActorState::new_zombie_state());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    entity.human &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    entity.zombie &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The price one pays for this dynamism is there is much more flexibility possible,
not all of it desirable. What would happen if &lt;code&gt;become_zombie&lt;&#x2F;code&gt; was called on a
sword? The programmer must now think about these extra possibilities and
explicitly check for them, rather than the language doing this checking at
compile time. I argue that this is a reasonable trade-off, as you no longer need
to worry about the engine not being flexible enough to express a behaviour
you &lt;em&gt;do&lt;&#x2F;em&gt; want.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-far-so-good&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#so-far-so-good&quot; aria-label=&quot;Anchor link for: so-far-so-good&quot;&gt;So far so good&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first few game engines I developed used a class hierarchy to represent game
entities, and I was plagued by situations that I couldn’t
represent. Since switching to this approach, I’m yet to encounter such a
situation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#further-reading&quot; aria-label=&quot;Anchor link for: further-reading&quot;&gt;Further Reading&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Representing entities by their constituent parts is how data is represented in
an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entity%E2%80%93component%E2%80%93system&quot;&gt;Entity Component
System&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Apocalypse Post</title>
        <published>2017-03-11T04:20:00+10:00</published>
        <updated>2017-03-11T04:20:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/apocalypse-post/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/apocalypse-post/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/apocalypse-post/">&lt;p&gt;Apocalypse Post is a procedurally-generated, turn-based tactical shooter set in a post-apocalyptic future, where you carry mail between survivor camps in your trusty delivery van, all the while fending off attacks from bandits and zombies. Between each delivery run, buy weapons and armour to upgrade your van to cope with ever-increasing numbers of enemies.&lt;&#x2F;p&gt;
&lt;p&gt;I made this game for the 2017 7 Day Roguelike game jam.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;apocalypse-post&quot;&gt;Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;apocalypse-post&quot;&gt;Source&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;apocalypse-post&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2017: Success</title>
        <published>2017-03-11T00:02:00+10:00</published>
        <updated>2017-03-11T00:02:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-success/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2017-success/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-success/">&lt;p&gt;I spent the night polishing, play-testing, balancing and fixing some minor bugs.
I consider the week to have been largely successful. The game turned out roughly
like what I imagined at the start of the week.&lt;&#x2F;p&gt;
&lt;p&gt;The main thing I would do differently if I could do it over would be making
gameplay more pure. My original design was inspired by 868HACK, specifically the
predictable gameplay allowing for thinking many moves ahead. The result I ended
up with was instead quite organic, with gameplay emerging from low-level physical
rules. I still think I have created something fun, but it wasn’t exactly what I
set out to achieve.&lt;&#x2F;p&gt;
&lt;p&gt;Something I’m happy with is the fact that players must think about short and
long term goals when playing Apocalypse Post. During a delivery they make short
term decisions about positioning and combat. Between deliveries, they must
decide whether it’s worth spending money on things they might need next mission,
or saving up for something more expensive that will pay off long term.
Further, while on a mission, players collect letters which increase the reward
at the end of the mission. Going out of their way to collect letters is more
dangerous than just taking the safest route, so there is a trade-off between
safety right now, and having enough resources later on.
This is
an improvement over the game I made for last year’s 7DRL,
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;skeleton-crew&#x2F;&quot;&gt;Skeleton Crew&lt;&#x2F;a&gt;, in which all the decision making was short
term.&lt;&#x2F;p&gt;
&lt;p&gt;Another goal of this week for me was to stress test the game engine I’ve
been developing for several months. Its goal is to be able to efficiently and
flexibly encode and enforce rules for a turn-based game,
which it does using many concepts
borrowed from Entity Component Systems.&lt;&#x2F;p&gt;
&lt;p&gt;The 7DRL has succeeded in highlighting
which parts of the engine I would most benefit from improving. In short, as the
number of rules increases, unintended interactions between rules can
occasionally cause undesired results. I have some ideas for addressing this
problem. I plan on making some blog posts explaining how the engine works and
how I’ll address the limitations I discovered.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2017: Consumables</title>
        <published>2017-03-10T03:33:00+10:00</published>
        <updated>2017-03-10T03:33:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-consumables/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2017-consumables/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-consumables/">&lt;p&gt;I added many features today, most notably consumable items that can be used
while stationary in the field to repair the engine or replace a burst tyre.
These items can be bought from the shop in the survivor camp. The shop also
sells repairs that happen immediately.&lt;&#x2F;p&gt;
&lt;p&gt;Zombies are now dumber, and the game can handle many more of them.
The game had noticeable delays between turns when there were more than 30
enemies on a map. Profiling revealed most of the time being spent in the zombie
pathfinding code. Each zombie was performing a search to find the shortest path
to the player. This was wasteful, and could be made much faster using dijkstra
maps, where a map describing the shortest path from each cell to the player is
computed once, and used by all NPCs. In the interest of time however, I made
the zombies simply walk to wards the
player if they know where the player is. This means zombies will now bump into
obstacles as they move towards the player, which is appropriate behaviour for
zombies. The game can now handle hundreds of zombies with no noticeable slowdown.&lt;&#x2F;p&gt;
&lt;p&gt;Various other minor changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The contents of the shop is now randomized each time you enter the survivor
camp.&lt;&#x2F;li&gt;
&lt;li&gt;The chance to encounter the more difficult enemies (cars and bikes) goes up as
the game progresses.&lt;&#x2F;li&gt;
&lt;li&gt;The current amount of money owned by the player appears on the hud.&lt;&#x2F;li&gt;
&lt;li&gt;The hud is now visible in menus in the survivor camp.&lt;&#x2F;li&gt;
&lt;li&gt;I added flavour text to the camp explaining that the player is healed and
paid when entering the camp. This should also help establish the game’s
(minimal) story.&lt;&#x2F;li&gt;
&lt;li&gt;The message log is now cleared between delivery runs.&lt;&#x2F;li&gt;
&lt;li&gt;Driving into barrels causes them to explode.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2017: Procgen and Explosions</title>
        <published>2017-03-09T03:03:00+10:00</published>
        <updated>2017-03-09T03:03:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-procgen-explosions/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2017-procgen-explosions/</id>
        
        <summary type="html">&lt;p&gt;Today I implemented a procedural generator. Levels are relatively simple,
compared to say, dungeons. Levels have a straight road, with acid generated
using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Perlin_noise&quot;&gt;Perlin Noise&lt;&#x2F;a&gt;, and various
enemies, obstacles and items placed randomly, with different probabilities for
each entity starting in a cell for road cells and off-road cells.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a screenshot from a procedurally generated level.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2017-procgen-explosions&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2017: Mechanics and Descriptions</title>
        <published>2017-03-08T01:44:00+10:00</published>
        <updated>2017-03-08T01:44:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-mechanics/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2017-mechanics/</id>
        
        <summary type="html">&lt;p&gt;Today I implemented lots of small mechanics to add some depth to gameplay. I
also added descriptions to many actions which are printed in the message log.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2017-mechanics&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2017: Vehicles</title>
        <published>2017-03-07T02:41:00+10:00</published>
        <updated>2017-03-07T02:41:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-vehicles/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2017-vehicles/</id>
        
        <summary type="html">&lt;p&gt;Today I added cars and motorbikes. Cars are equipped with shotguns and can
shoot to the left and right. Bikes are equipped with a pistol and can shoot in
all directions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2017-vehicles&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2017: Shopping</title>
        <published>2017-03-06T02:24:00+10:00</published>
        <updated>2017-03-06T02:24:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-shopping/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2017-shopping/</id>
        
        <summary type="html">&lt;p&gt;The main feature I implemented today was a set of menus that are displayed
between levels. These include a shop for buying items (currently just guns),
equipping guns to weapon slots (which can’t be done in the field), and
inventory management (just removing items from the inventory to make room for
more items).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2017-shopping&#x2F;shop.png&quot; alt=&quot;shop.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2017: Day 1</title>
        <published>2017-03-05T03:22:00+10:00</published>
        <updated>2017-03-05T03:22:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2017-day1/</id>
        
        <summary type="html">&lt;p&gt;After a day of development, I’ve implemented some of the basic functionality and
created some of the artwork. You can control the speed of the van, and steer it
provided that its speed is above zero. Zombies can be run over which insta-kills
them, or they can be shot if they are directly in front of the van.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2017-day1&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2017: Plan</title>
        <published>2017-03-04T09:54:00+10:00</published>
        <updated>2017-03-04T09:54:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-plan/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2017-plan/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2017-plan/">&lt;p&gt;For this year’s &lt;a href=&quot;http:&#x2F;&#x2F;7drl.roguetemple.com&#x2F;&quot;&gt;7DRL&lt;&#x2F;a&gt; I’m making a game called
“Apocalypse Post”. It will be a &lt;a href=&quot;http:&#x2F;&#x2F;www.roguebasin.com&#x2F;index.php?title=Category:Coffeebreak_roguelikes&quot;&gt;coffeebreak
roguelike&lt;&#x2F;a&gt;
where the player delivers mail in a post-apocalyptic world.&lt;&#x2F;p&gt;
&lt;p&gt;I’m writing the game in rust, using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;howl&quot;&gt;Howl&lt;&#x2F;a&gt; as
a starting point. My recent focus for Howl has been adding basic (but
non-trivial) functionality to the engine (menus, saving, configuring controls)
so I can take advantage of it for the 7DRL and focus on the high-level parts of
game development this week.&lt;&#x2F;p&gt;
&lt;p&gt;Features I plan to implement:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;on each turn the player automatically moves forward&lt;&#x2F;li&gt;
&lt;li&gt;gun-based combat&lt;&#x2F;li&gt;
&lt;li&gt;various weapons with interesting tactical significance (e.g. rail gun shoots
through everything in a certain direction, costing you a finite resource)&lt;&#x2F;li&gt;
&lt;li&gt;a shop for buying upgrades and equipment&lt;&#x2F;li&gt;
&lt;li&gt;procedural terrain generator suitable for automatic side-scrolling&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I’ll try to post daily updates to this site.&lt;&#x2F;p&gt;
&lt;p&gt;Follow development more closely on
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;apocalypse-post&quot;&gt;github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Howl</title>
        <published>2017-01-07T00:00:00+10:00</published>
        <updated>2017-01-07T00:00:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/howl/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/howl/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/howl/">&lt;p&gt;Howl is a turn-based tactical game, where everything has an alternate form that
is revealed under moonlight. I started this project to teach myself &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;the rust
programming language&lt;&#x2F;a&gt;, and to experiment with
&lt;a href=&quot;https:&#x2F;&#x2F;wikipedia.org&#x2F;wiki&#x2F;Entity-component-system&quot;&gt;entity component systems&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The game is still in active development.
Check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;howl&quot;&gt;source code on github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the linux version of the game depends on sdl2, sdl2_image, and sdl2_ttf.&lt;&#x2F;p&gt;
&lt;p&gt;Controls:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;movement: arrow keys&lt;&#x2F;li&gt;
&lt;li&gt;fire: f, f again to fire, arrow keys move cursor, n&#x2F;m switch targets&lt;&#x2F;li&gt;
&lt;li&gt;close door: c followed by arrow key&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;howl&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Roguelike Lighting Demo</title>
        <published>2016-12-20T09:31:00+10:00</published>
        <updated>2016-12-20T09:31:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/roguelike-lighting-demo/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/roguelike-lighting-demo/</id>
        
        <summary type="html">&lt;p&gt;This is a demonstration of some lighting techniques I’ve been experimenting
with. It was originally intended to be an entire game, but I’ve abandoned it to
work on other projects.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;roguelike-lighting-demo&quot;&gt;Run in browser&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Use arrow or vi keys to move. Press “f” followed by a direction key to fire a
burst of plasma.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;roguelike-lighting-demo&quot;&gt;Source code on github&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;roguelike-lighting-demo&#x2F;screenshot0.png&quot; alt=&quot;screenshot0.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Even Separation Algorithm</title>
        <published>2016-05-04T23:27:00+10:00</published>
        <updated>2016-05-04T23:27:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/even-separation-algorithm/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/even-separation-algorithm/</id>
        
        <summary type="html">&lt;p&gt;This post describes an algorithm for evenly spreading out a sequence of items made
up of
two distinct types of item. I came up with it when attempting to draw straight
lines on a grid, where lines are represented by discrete steps in one of two
directions. In order for such a line to appear straight, the steps in one
direction should be spread out as much as possible with respect to the steps in
the other direction. The solution generalizes to spreading out any sequence
made up of two distinct types of item that are repeated a number of times.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;even-separation-algorithm&#x2F;straight-line-screenshot.png&quot; alt=&quot;straight-line-screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Skeleton Crew</title>
        <published>2016-03-12T00:19:00+10:00</published>
        <updated>2016-03-12T00:19:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/skeleton-crew/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/skeleton-crew/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/skeleton-crew/">&lt;p&gt;I wrote this game for the 2016 7 Day Roguelike challenge.&lt;&#x2F;p&gt;
&lt;p&gt;Fight a variety of undead enemies with a variety of weapons on a procedurally
generated spaceship. Damaging the hull of the ship causes sections of the ship
to be depressurized, and their contents sucked into space, including you!&lt;&#x2F;p&gt;
&lt;p&gt;Play or download Skeleton Crew on &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.itch.io&#x2F;skeleton-crew&quot;&gt;its itch.io page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;View the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;skeleton-crew&quot;&gt;source code on github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;skeleton-crew&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2016: Success</title>
        <published>2016-03-12T00:17:00+10:00</published>
        <updated>2016-03-12T00:17:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-success/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2016-success/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-success/">&lt;p&gt;It’s now Friday night (technically Saturday morning). Tomorrow morning it will have been 1 week since I
started work on “Skeleton Crew”. This is the final entry in my development log.&lt;&#x2F;p&gt;
&lt;p&gt;Tonight was mostly polishing. I added support for arrow keys and the numpad as
an alternative to vi keys, lots of playtesting and tweaked a few parameters here
and there to make the game more balanced.&lt;&#x2F;p&gt;
&lt;p&gt;I also added a rocket launcher.&lt;&#x2F;p&gt;
&lt;p&gt;Aiming. This also happens to show another rocket launcher lying on the ground.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-success&#x2F;s0.png&quot; alt=&quot;s0.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fired!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-success&#x2F;s1.png&quot; alt=&quot;s1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Explosion! This shows the shock wave beginning to move outwards. The nearest
zombies have already been pushed back by the explosion.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-success&#x2F;s2.png&quot; alt=&quot;s2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Aftermath.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-success&#x2F;s3.png&quot; alt=&quot;s3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2016: Ending</title>
        <published>2016-03-11T02:08:00+10:00</published>
        <updated>2016-03-11T02:08:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-ending/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2016-ending/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-ending/">&lt;p&gt;Tonight I implemented stairs and an ending for the game. You must reach the
teleporter on the 3rd floor of the ship, and teleport to safety. I also added
some more flavour text, fixed some bugs, and balanced some characters. At this
point the game is largely complete. I’ll spend some of tomorrow playtesting and
adding any remaining polish and balance I think is necessary. I also want to
add a rocket launcher which shouldn’t be too complicated given I already have
projectile weapons and explosions.&lt;&#x2F;p&gt;
&lt;p&gt;This screenshot shows the teleporter at the end of the game:
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-ending&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2016: Polish</title>
        <published>2016-03-10T02:18:00+10:00</published>
        <updated>2016-03-10T02:18:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-polish/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2016-polish/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-polish/">&lt;p&gt;Tonight I finished the level generator, adding weapons and items.
I fixed a bug in my recursive shadowcast implementation causing strange
behaviour when looking at the edge of the map.
I tweaked a
couple of mechanics, namely:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;explosions destroy nearby walls regardless of whether one side is pressurized
&lt;ul&gt;
&lt;li&gt;this is unlike bullets, which  only damage walls if one side is
pressurized and the other isn’t&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;flames from the flamethrower don’t stop when they hit an enemy&lt;&#x2F;li&gt;
&lt;li&gt;doors can’t be closed if there is an enemy standing in the way&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I spent the rest of my time tonight polishing the game’s UI.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some death screens from playtesting!&lt;&#x2F;p&gt;
&lt;p&gt;Shooting a bloat at point-blank range. Never a good idea.
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-polish&#x2F;s0.png&quot; alt=&quot;s0.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tried to kill some zombies by blowing up a nearby bloat. Didn’t end well.
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-polish&#x2F;s1.png&quot; alt=&quot;s1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Getting sucked out of the ship as a section decompresses due to a hull breach.
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-polish&#x2F;s2.png&quot; alt=&quot;s2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2016: Pathfinding</title>
        <published>2016-03-09T01:56:00+10:00</published>
        <updated>2016-03-09T01:56:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-pathfinding/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2016-pathfinding/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-pathfinding/">&lt;p&gt;The most notable change from tonight is that
I turned on pathfinding for NPCs for the first time. Up until now they
had been stationary, and could be injured or killed, or affected by vacuum, but
could never observe the world or take actions. Enabling AI is scary because it
greatly increases the amount of work the computer is doing between human turns.
The vision system is now running once per NPC turn as well as the player. Then
there’s the additional cost of pathfinding for each NPC. I use Dijkstra maps for
pathfinding which are
&lt;a href=&quot;http:&#x2F;&#x2F;www.roguebasin.com&#x2F;index.php?title=The_Incredible_Power_of_Dijkstra_Maps&quot;&gt;explained in detail on roguebasin&lt;&#x2F;a&gt;.
This post is about solving a performance problem introduced by all the extra
characters.&lt;&#x2F;p&gt;
&lt;p&gt;With AI turned on, there was a noticeable increase in the time between player
turns.
Benchmarking revealed most of the time between player turns was spent in the
vision system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vision-system&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#vision-system&quot; aria-label=&quot;Anchor link for: vision-system&quot;&gt;Vision System&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The vision system uses the Recursive Shadowcast algorithm which I
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;visible-area-detection-recursive-shadowcast&#x2F;&quot;&gt;wrote about earlier&lt;&#x2F;a&gt;.
Detecting visible cells
is relatively fast. The problem was what how this information was being used.&lt;&#x2F;p&gt;
&lt;p&gt;NPC pathfinding and the renderer don’t work on the canonical world
representation. This game uses
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;encoding-rules-for-turn-based-games&#x2F;&quot;&gt;an ECS-based engine described in a previous post&lt;&#x2F;a&gt;,
so more concretely, AI and the
renderer don’t directly access entities or components. Instead, each character
maintains a representation of the world based on what they have observed.
A character’s knowledge is represented by “shadow entities”, made up of
“shadow components”. These were designed to be frequently updated by setting
data in shadow components from “canonical” reference components without allocating
any new objects. This was a technique I learnt while solving performance problems in a
&lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;bugcatcher&#x2F;&quot;&gt;game I wrote earlier&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At the
start of a character’s turn, the vision system runs and updates that character’s
knowledge of the world by updating shadow components.
It was this knowledge updating process that was taking
up most of the time. Knowledge is updated in the following way. It relies on a
spacial hash of entities, and an analogous spacial hash of shadow entities in
the knowledge representation of characters.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;for each coordinate visible according to recursive shadowcast:
&lt;&#x2F;span&gt;&lt;span&gt;    knowledgeCell = get knowledge spacial hash cell for the coord
&lt;&#x2F;span&gt;&lt;span&gt;    cell = get canonical spacial hash cell for the coord
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    knowledgeCell.clear() # remove all shadow entities from the cell
&lt;&#x2F;span&gt;&lt;span&gt;    for each entity in that cell:
&lt;&#x2F;span&gt;&lt;span&gt;        knowledgeCell.see(entity) # makes a shadow entity
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Knowledge cells re-use shadow entities
and shadow components to prevent invoking the allocator on each cell that is seen.
Despite this, this process was still taking too long. A key insight for
optimization was that most entities in most cells don’t change most of the time.
The only time a knowledge cell needs to be updated is when an entity has entered
or left the corresponding canonical cell, or an entity in the cell changes in a
“knowable” way (ie. a way that will be represented in a character’s knowledge).&lt;&#x2F;p&gt;
&lt;p&gt;With this in mind, the loop becomes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;for each coordinate visible according to recursive shadowcast:
&lt;&#x2F;span&gt;&lt;span&gt;    knowledgeCell = get knowledge spacial hash cell for the coord
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    if knowledgeCell.isDirty():
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        cell = get canonical spacial hash cell for the coord
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        knowledgeCell.clear()
&lt;&#x2F;span&gt;&lt;span&gt;        for each entity in that cell:
&lt;&#x2F;span&gt;&lt;span&gt;            knoweldgeCell.see(entity)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;isDirty()&lt;&#x2F;code&gt; method compares a “last modified” timestamp on the canonical
spacial hash table cell with a “last observed” timestamp on the knowledge cell.
&lt;strong&gt;A knowledge cell is now only updated if the cell has been changed more recently
than it was last observed.&lt;&#x2F;strong&gt; A complication this change introduced is now the
“last modified” timestamps must be updated whenever a cell’s contents is changed
in a meaningful way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;windows-and-npcs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#windows-and-npcs&quot; aria-label=&quot;Anchor link for: windows-and-npcs&quot;&gt;Windows and NPCs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve updated the level generator to include windows and NPCs. It also places the
player in a sane starting position, and determines a sane goal position (though
there currently isn’t anything there).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-pathfinding&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Still to do is adding items (weapons and healthkits), and stairs. I still
haven’t decided how the game will end, though the current plan is to have some
emergency beacon that needs to be activated before the ship-full-of-zombies
arrives in a populated area.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2016: Procedural Generation</title>
        <published>2016-03-08T03:04:00+10:00</published>
        <updated>2016-03-08T03:04:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-procedural-generation/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2016-procedural-generation/</id>
        
        <summary type="html">&lt;p&gt;This is my second attempt at a procedurally generated space ship. The first
attempt involved generating the hull first by starting with a large rectangle
and stripping smaller rectangular pieces away until I got something roughly
hull-looking. I would then attempt to fill the hull with rooms. Adding rooms to
a preexisting hull proved messy and prone to difficult edge cases.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s what it looked like at the point where I gave up:
&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-procedural-generation&#x2F;old.png&quot; alt=&quot;old.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2016: Day 1</title>
        <published>2016-03-06T10:04:00+10:00</published>
        <updated>2016-03-06T10:04:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-day1/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2016-day1/</id>
        
        <summary type="html">&lt;p&gt;It’s one day in. Here’s my progress so far!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;7drl2016-day1&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>7 Day Roguelike 2016: Plan</title>
        <published>2016-03-05T10:06:00+10:00</published>
        <updated>2016-03-05T10:06:00+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-plan/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/7drl2016-plan/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/7drl2016-plan/">&lt;p&gt;The 7 Day Roguelike Challenge is a game jam where participants make a roguelike in 7 days.
This year I’m making a game called “Skeleton Crew” where you fight undead things
on a spaceship. I’ll post updates to this site as I make progress.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-plan&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-plan&quot; aria-label=&quot;Anchor link for: the-plan&quot;&gt;The Plan&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’m going to start with the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;glacial&quot;&gt;glacial
codebase&lt;&#x2F;a&gt;.
I plan to implement the following features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;guns&lt;&#x2F;li&gt;
&lt;li&gt;shooting the hull can cause a breach and vent the atmosphere from connected
parts of the ship&lt;&#x2F;li&gt;
&lt;li&gt;you need oxygen in your suit to survive in vacuum&lt;&#x2F;li&gt;
&lt;li&gt;oxygen drains while
you’re in vacuum, and recharges while you’re in atmosphere.&lt;&#x2F;li&gt;
&lt;li&gt;as atmosphere is vented, characters and items are sucked towards, and possibly
out of, the breach&lt;&#x2F;li&gt;
&lt;li&gt;flamethrower that doesn’t penetrate the hull but only works in atmosphere&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Encoding Rules for Turn-Based Games</title>
        <published>2016-03-02T23:20:01+10:00</published>
        <updated>2016-03-02T23:20:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/encoding-rules-for-turn-based-games/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/encoding-rules-for-turn-based-games/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/encoding-rules-for-turn-based-games/">&lt;p&gt;A key consideration when designing a game engine is how rules of the game will
be encoded. The engine needs a way of enforcing statements such as “Doors can
only be passed through if they are open”, and “If a burning character walks into
a pool of water, it stops burning”. The expressiveness of a game engine’s
rule-encoding is important, as it dictates the limitations of mechanics that can
be implemented in games. Nobody wants to discover late in development that their
engine can’t be used to efficiently implement a certain feature.&lt;&#x2F;p&gt;
&lt;p&gt;This post will describe the framework I developed to encode rules in two games I
recently made: &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;glacial&#x2F;&quot;&gt;Glacial&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;bugcatcher&#x2F;&quot;&gt;Bugcatcher&lt;&#x2F;a&gt;. It’s based on
the idea of an Entity Component System (ECS), extended with the abstraction of
Actions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;entity-component-system&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#entity-component-system&quot; aria-label=&quot;Anchor link for: entity-component-system&quot;&gt;Entity Component System&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Every object in the game (walls,
characters, doors, bullets, etc) is represented by an &lt;strong&gt;entity&lt;&#x2F;strong&gt;. An
entity is simply a container for storing &lt;strong&gt;components&lt;&#x2F;strong&gt;. Components store
information about objects in the world. The fact that an object is solid, that
an object is opaque, that it has health or that it can take actions are all
examples of components. The key idea of ECS is that all the information about
the state of the world is stored in components, and each entity is simply a
collection of various components.&lt;&#x2F;p&gt;
&lt;p&gt;The rules of the game are represented by various systems that operate on
components of entities.
An example of such a system is
a collision detector, that checks if an entity with a &lt;em&gt;Collider&lt;&#x2F;em&gt;
component is about to walk into an entity with a &lt;em&gt;Solid&lt;&#x2F;em&gt; component, and stops the
movement from going ahead.
Another example is a system that applies burning effects. Periodically, it loops
through each entity with a &lt;em&gt;Burning&lt;&#x2F;em&gt; component and a &lt;em&gt;Health&lt;&#x2F;em&gt; component, and reduce
their health by some amount.&lt;&#x2F;p&gt;
&lt;p&gt;This should serve as sufficient background in Entity Component Systems. The
previous paragraph was intentionally vague about the details of how systems
work. Rest assured that a more concrete explanation will follow. To learn more
about ECS:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wikipedia has an overview: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entity_component_system&quot;&gt;Entity component system&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;More detailed description and comparison to OOP:
&lt;a href=&quot;http:&#x2F;&#x2F;www.gamedev.net&#x2F;page&#x2F;resources&#x2F;_&#x2F;technical&#x2F;game-programming&#x2F;understanding-component-entity-systems-r3013&quot;&gt;Understanding
Component-Entity-Systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Another index of references from roguebasin:
&lt;a href=&quot;http:&#x2F;&#x2F;www.roguebasin.com&#x2F;index.php?title=Entity_Component_System&quot;&gt;Entity Component System&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;actions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#actions&quot; aria-label=&quot;Anchor link for: actions&quot;&gt;Actions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So far I’ve explained how wold state is represented - as a
collection of entities made up of components. What’s missing from the picture is
how the world state gets updated. This engine is specifically designed for
turn-based games, so the world is updated in discrete, sequential steps.
This is where &lt;strong&gt;actions&lt;&#x2F;strong&gt; come in: an action
is a description of a change in the world state.
More concretely, actions can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;change the parameters of components (of entities)&lt;&#x2F;li&gt;
&lt;li&gt;add&#x2F;remove components to&#x2F;from entities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The only way the world state can change is by an action being committed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#systems&quot; aria-label=&quot;Anchor link for: systems&quot;&gt;Systems&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There are several different types of systems for encoding different types of
rule:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reactive Systems respond to actions&lt;&#x2F;li&gt;
&lt;li&gt;Continuous Systems run periodically to simulate continuous processes&lt;&#x2F;li&gt;
&lt;li&gt;Passive Systems don’t affect the world state, but may update other parts of
the game (e.g. a renderer). The don’t encode game rules, but rather behaviour
of the game itself. As they aren’t particularly interesting in the context of
this post, this is the last I will say about them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reactive-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reactive-systems&quot; aria-label=&quot;Anchor link for: reactive-systems&quot;&gt;Reactive Systems&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Systems can register an interest in certain
types of actions.
When an action is proposed, interested systems can examine it,
and possibly cause additional actions to occur in response, or cancel the current action.
If after all interested systems have had the chance to respond to an action, the
action hasn’t been cancelled, the action is committed, and the change it
describes actually occurs. If during this process, a system
caused additional actions to be scheduled, these actions go through
the same process.&lt;&#x2F;p&gt;
&lt;p&gt;As an example, consider a &lt;em&gt;Walk&lt;&#x2F;em&gt; action. When the action is proposed (by a
character’s AI or the player), it contains information about
how the walk will occur, such as the start coordinate, the destination
coordinate, the direction and the entity (character) who is walking. The
&lt;em&gt;Collision&lt;&#x2F;em&gt; system has registered an interest in &lt;em&gt;Walk&lt;&#x2F;em&gt; actions. When it sees one,
it checks to see if the entity who is walking has the &lt;em&gt;Collider&lt;&#x2F;em&gt; component
(indicating it’s not, say, a ghost who can walk through walls), and if the
destination coordinate contains any entity with the &lt;em&gt;Solid&lt;&#x2F;em&gt; component. If these
conditions are met, the &lt;em&gt;Collision&lt;&#x2F;em&gt; system cancels the &lt;em&gt;Walk&lt;&#x2F;em&gt; action.&lt;&#x2F;p&gt;
&lt;p&gt;If an action is canceled, it is still presented to all other
interested systems. Systems have the ability to check if an action has been
cancelled, so if multiple systems conflict, this can be resolved in
the systems themselves, and by the game designer specifying the order in which
systems run. Consider a &lt;em&gt;SpiderWeb&lt;&#x2F;em&gt; system, that when presented with a &lt;em&gt;Walk&lt;&#x2F;em&gt;
action where the walker is stuck in a spider web (which can be represented by their
entity having a &lt;em&gt;StuckInWeb&lt;&#x2F;em&gt; component), the walk is cancelled and another
action is scheduled that breaks the spider web. If a character who is stuck in
a web walks into a wall, the first system to run out of the &lt;em&gt;StuckInWeb&lt;&#x2F;em&gt; system
and the &lt;em&gt;Collision&lt;&#x2F;em&gt; system will cancel the action. It wouldn’t make much sense to
have the player struggle in the web, not moving, but then to also bump into a
wall. The decision of what should happen in this situation is up to the game
designer, and they are free to order systems as they please, and to check if an
action is cancelled before processing it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;continuous-systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#continuous-systems&quot; aria-label=&quot;Anchor link for: continuous-systems&quot;&gt;Continuous Systems&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Continuous systems simulate continuous processes, such as recovering health over
time.
At the end of each turn, all continuous systems are invoked with the amount of
time that has passed since they were last invoked. This information, coupled
with a rate of change, can be used to change values in away that
appears continuous.&lt;&#x2F;p&gt;
&lt;p&gt;What actually happens when a continuous system runs is up to the implementation.
Typically, it will iterate over all entities with some component, and schedule
an action for the entity based on a rate of change specified by the component,
and the time delta since the last time the system ran.&lt;&#x2F;p&gt;
&lt;p&gt;Consider a mechanic where characters that are on fire take a certain amount of
damage each second. An &lt;em&gt;OnFire&lt;&#x2F;em&gt; component could be used to signify that an
entity is on fire. It could be parameterized with a &lt;em&gt;rate&lt;&#x2F;em&gt;, indicating the
damage taken per second. A &lt;em&gt;Burning&lt;&#x2F;em&gt; continuous system would iterate over all
the entities with an &lt;em&gt;OnFire&lt;&#x2F;em&gt; component, and for each entity, schedule an action
where the entity takes &lt;code&gt;timeDelta * damageRate&lt;&#x2F;code&gt; damage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;schedule-and-game-loop&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#schedule-and-game-loop&quot; aria-label=&quot;Anchor link for: schedule-and-game-loop&quot;&gt;Schedule and Game Loop&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The engine uses a schedule to keep track of the order of turns.
Tasks can be added to the schedule, along with a relative time at which
they should occur. The schedule can be queried for the next task. It keeps track
of the current absolute time, which increases as tasks are retrieved from the
schedule.
The game loop is based solely on the schedule, and isn’t
particularly interesting:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;while the game is not over {
&lt;&#x2F;span&gt;&lt;span&gt;    get next task from schedule;
&lt;&#x2F;span&gt;&lt;span&gt;    do task;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More interesting, is the contents of tasks that are scheduled.
The engine schedules two types of tasks: turns and immediate actions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;turn&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#turn&quot; aria-label=&quot;Anchor link for: turn&quot;&gt;Turn&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;During a turn, an entity produces a Turn object, consisting of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;action: an action to perform&lt;&#x2F;li&gt;
&lt;li&gt;time: the time this action will take&lt;&#x2F;li&gt;
&lt;li&gt;reschedule: whether the entity should be rescheduled on the current schedule&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Entities that can take turns have the &lt;em&gt;TurnTaker&lt;&#x2F;em&gt; component. This component
contains a function that returns a Turn object describing what the entity does
on its turn.
For NPCs, this function constructs a turn based on the behaviour of the entity.
For the player character, it returns a turn based on the player’s
input.&lt;&#x2F;p&gt;
&lt;p&gt;A turn progresses as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;takeTurn(entity) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    turn = entity.getComponent(TurnTaker).takeTurn();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    for each reactive system {
&lt;&#x2F;span&gt;&lt;span&gt;        run the system on turn.action;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    if turn.action has not been cancelled {
&lt;&#x2F;span&gt;&lt;span&gt;        turn.action.commit();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    if turn.reschedule {
&lt;&#x2F;span&gt;&lt;span&gt;        schedule turn for entity in turn.time;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    for each continuous system {
&lt;&#x2F;span&gt;&lt;span&gt;        timeDelta = schedule.getTimeDelta();
&lt;&#x2F;span&gt;&lt;span&gt;        run the system with timeDelta;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;immediate-actions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#immediate-actions&quot; aria-label=&quot;Anchor link for: immediate-actions&quot;&gt;Immediate Actions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If during a turn, a character’s action caused additional actions to be
scheduled, they must be processed before the next character’s turn. A naive way
to implement this would be to schedule the actions at the current time. This
won’t necessarily work, as it’s possible that the next character’s turn is also
scheduled for the current time. The schedule breaks ties by choosing the first
task to be scheduled out of all those with equal times, so this will result in
these actions being processed after the next character’s turn.&lt;&#x2F;p&gt;
&lt;p&gt;Scheduling actions with negative relative times would result in them being
retrieved from the schedule before anything else. This would lead to further
complications, as the absolute time tracked by the schedule would appear to be
going in reverse.&lt;&#x2F;p&gt;
&lt;p&gt;The solution I implemented was to add an &lt;code&gt;immediate&lt;&#x2F;code&gt; flag to scheduler tasks.
Tasks with this flag set to true will be scheduled before tasks with it set to
false, regardless of their scheduled times. To prevent complications with
tracking absolute time, the schedule ignores immediate tasks when updating
the absolute time. The scheduled times of immediate tasks is used solely to
specify the order in which tasks will be retrieved from the scheduler.&lt;&#x2F;p&gt;
&lt;p&gt;An immediate action is a task that applies an action, after passing it to each
reactive system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;optimizations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#optimizations&quot; aria-label=&quot;Anchor link for: optimizations&quot;&gt;Optimizations&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In order to write efficient systems, it’s important to consider how entities and
components are stored.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;entity-implementation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#entity-implementation&quot; aria-label=&quot;Anchor link for: entity-implementation&quot;&gt;Entity Implementation&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;An entity consists of an array with one element for each type of component in the
game. Each component type is assigned a unique identifier (an integer) which is
used as an index into this array. Each element of the array corresponds to a
particular type of component. To add a component to an entity, a reference to
the component is placed in the array element corresponding to the component’s
type. To remove a component, the element is set to null.
This allows components of entities
to be retrieved in constant time. A limitation of this representation of
entities is that each entity can have at most one of each type of component.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;spacial-hashing-on-position&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#spacial-hashing-on-position&quot; aria-label=&quot;Anchor link for: spacial-hashing-on-position&quot;&gt;Spacial Hashing on Position&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As with all information, an entity’s position is just another component. For
games that take place within a 2D grid, the &lt;em&gt;Position&lt;&#x2F;em&gt; component is
parameterized by an (x, y) coordinate. As it is a common operation to check what
is at a particular position within the world, storing all entities that have a
&lt;em&gt;Position&lt;&#x2F;em&gt; component in a spacial hash table, keyed by their position, is a useful
optimization.&lt;&#x2F;p&gt;
&lt;p&gt;Each cell of the spacial hash table is a set of entities. A common operation performed
by systems is checking if any entity at a given coordinate has a certain
component. For example, when checking for collisions, it doesn’t matter which entity at the
destination coordinate is solid, as long as at least one is solid. To prevent having
to loop over a cell’s contents to search for a given component, each cell in the
spacial hash table maintains a count of which components are there. When an
entity enters or leaves the cell, the count for each component is updated based
on that entity’s components.&lt;&#x2F;p&gt;
&lt;p&gt;Components can be added and removed from entities, and entities can be added and
removed from the game. Additionally, entities can move around. All these
operations need to be dealt with to keep the spacial hash up to date.&lt;&#x2F;p&gt;
&lt;p&gt;Each component is given &lt;code&gt;onAdd&lt;&#x2F;code&gt; and &lt;code&gt;onRemove&lt;&#x2F;code&gt; methods, which are called when
the component is added to and removed from an entity respectively. By default,
these are used to maintain in each component, a reference to the entity it is
currently a part of. These methods can be extended for the &lt;em&gt;Position&lt;&#x2F;em&gt; component to add
or remove the entity possessing the component from its current cell in the
spacial hash table.&lt;&#x2F;p&gt;
&lt;p&gt;If an entity is removed from the game, the &lt;code&gt;onRemove&lt;&#x2F;code&gt; method of each of
its components is called. If an entity that isn’t currently part of the game has
a component added to it, the call to &lt;code&gt;onAdd&lt;&#x2F;code&gt; is deferred to when the entity is
added to the game, at which point the &lt;code&gt;onAdd&lt;&#x2F;code&gt; method of each component is
called.&lt;&#x2F;p&gt;
&lt;p&gt;The coordinates stored in a &lt;em&gt;Position&lt;&#x2F;em&gt; component are updated by a method call,
rather than setting properties
of the component directly. This method takes care of removing the entity from its
previous cell in the spacial hash table, and inserting it into its new cell.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;continuous-system-storage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#continuous-system-storage&quot; aria-label=&quot;Anchor link for: continuous-system-storage&quot;&gt;Continuous System Storage&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To optimize continuous systems, a set of entities each system is currently
interested in is maintained. For each continuous system, there is a component
such that the system is interested in an entity if and only if it has that
component. The adding and removing of entities from a system’s set of interested
entities is done by the component’s &lt;code&gt;onAdd&lt;&#x2F;code&gt; and &lt;code&gt;onRemove&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Everything in the game is an entity, and an entity
is just a collection of components. Everything that happens in the game is an
action. Reactive systems react to actions by scheduling more actions, and
continuous systems schedule actions that simulate continuous processes.
These abstractions are expressive enough to encode complex game rules, and can
be implemented efficiently.&lt;&#x2F;p&gt;
&lt;p&gt;An implementation of all the abstractions described in this post can be found in
the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;glacial&quot;&gt;source code of Glacial&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Glacial</title>
        <published>2016-03-01T01:27:01+10:00</published>
        <updated>2016-03-01T01:27:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/glacial/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/glacial/</id>
        
        <summary type="html">&lt;p&gt;A roguelike I made in Februrary 2016.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;glacial&quot;&gt;Play in browser&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You are a faithful servant of the Pyro God.
You returned to the former home of your ancestors in search of his ancient cathedral,
only to find the city a frozen ruin.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;glacial&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Bug Catcher</title>
        <published>2016-02-09T23:49:01+10:00</published>
        <updated>2016-02-09T23:49:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/bugcatcher/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/bugcatcher/</id>
        
        <summary type="html">&lt;p&gt;This is my first attempt at writing &lt;a href=&quot;http:&#x2F;&#x2F;www.onegameamonth.com&#x2F;&quot;&gt;one game a month&lt;&#x2F;a&gt;. It’s a turn-based
dungeon crawler in the style of traditional roguelikes. All the characters in the game are bugs. Each bug
has an ability and combat stats. You can “channel” a bug and gain access to its ability and stats.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;bugcatcher&quot;&gt;Play in browser&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;bugcatcher&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visible Area Detection with Recursive Shadowcast</title>
        <published>2015-11-16T12:30:01+10:00</published>
        <updated>2015-11-16T12:30:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/visible-area-detection-recursive-shadowcast/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/visible-area-detection-recursive-shadowcast/</id>
        
        <summary type="html">&lt;p&gt;Most games employ some form of visible area detection to simulate the fact that
opaque objects obscure one’s view of whatever is behind them.
&lt;em&gt;Recursive Shadowcast&lt;&#x2F;em&gt; is one
of a handful of algorithms that compute visible area in worlds represented
by 2D grids.
This makes it suitable for use in roguelikes.
This post will explain the recursive shadowcast algorithm.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;visible-area-detection-recursive-shadowcast&#x2F;dcss0.png&quot; alt=&quot;Screenshot from Dungeon Crawl Stone Soup demonstrating its visible area detection&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Cellular Automata Cave Generation</title>
        <published>2015-09-26T12:30:01+10:00</published>
        <updated>2015-09-26T12:30:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/cellular-automata-cave-generation/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/cellular-automata-cave-generation/</id>
        
        <summary type="html">&lt;p&gt;A cellular automata is a collection of cells whose states change over time
based on the states of adjacent cells.
They can be used to produce natural-looking patterns, such as the cave
in the picture below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;cellular-automata-cave-generation&#x2F;caverns.png&quot; alt=&quot;caverns.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>2D Phong Illumination in WebGL</title>
        <published>2015-07-13T23:49:01+10:00</published>
        <updated>2015-07-13T23:49:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/2d-phong-illumination-in-webgl/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/2d-phong-illumination-in-webgl/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/2d-phong-illumination-in-webgl/">&lt;p&gt;Suppose you’re rendering an uneven surface like a cobblestone floor, water or
grass.
You could just draw the details on a flat image by hand.
This might look great from one particular angle, but if the player is moving
around, the flatness of the image may be quickly exposed. This is exacerbated by
the presence of lights, which will illuminate the surface as if it had just been
painted on (which it sort of has been).&lt;&#x2F;p&gt;
&lt;p&gt;Another approach is to create lots of polygons and model the surface in 3D.
This will solve the lighting problem (provided you have shaders aware of
lighting), but as these surfaces can have lots of tiny details, that’s lots of
work for you to define all the polygons, and lots of work for your GPU to draw
them, and all you really gain is a nice aesthetic effect.&lt;&#x2F;p&gt;
&lt;p&gt;Another approach that is generally more efficient on graphics hardware is
creating maps - buffers that store information about the details of a surface
relevant to lighting. These maps correspond pixel by pixel to the texture being
drawn onto the surface, and are used when shading fragments (pixels) to
determine exactly how light should behave.&lt;&#x2F;p&gt;
&lt;p&gt;A demo that uses this technique is &lt;a href=&quot;https:&#x2F;&#x2F;www.gridbugs.org&#x2F;2d-phong-illumination-in-webgl&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For the tiles demo, I use two maps. The &lt;strong&gt;bump map&lt;&#x2F;strong&gt; stores the surface normal
(vector at right angle to the surface at a point)
and depth
at every pixel on the screen (or every pixel in a tile since the tiles are
repeated). The &lt;strong&gt;light map&lt;&#x2F;strong&gt; stores values indicating how reflective each pixel
is to ambient, diffuse and specular lights.&lt;&#x2F;p&gt;
&lt;p&gt;Soon I’ll explain exactly how these maps work, but for it to make sense you need
a crash course on lighting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;crash-course-on-lighting&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#crash-course-on-lighting&quot; aria-label=&quot;Anchor link for: crash-course-on-lighting&quot;&gt;Crash course on lighting&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I use a technique called
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Phong_reflection_model&quot;&gt;Phong Illumination&lt;&#x2F;a&gt;
to light the scene. It combines
ambient, diffuse and specular lighting at each pixel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ambient&lt;&#x2F;strong&gt; lighting is the same at every pixel. A scene has a global value
representing the amount of ambient light present. Different surfaces may
reflect a different amount of ambient light. It does not change with the viewing
angle.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;ambient_example.png&quot; alt=&quot;ambient_example.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Diffuse&lt;&#x2F;strong&gt; lighting is light from a point light source hitting a surface and
illuminating it. The amount of light reflected by a point on a surface is
dependant on the angle between the light source and surface normal at that
point. Here’s a diagram:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;diffuse_diagram.png&quot; alt=&quot;diffuse_diagram.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The more similar the two vectors, the brighter the light. This is computed in
practice by multiplying the intensity of the light by the dot product of the two
vectors. This value is then multiplied by the surface’s diffuse reflection
coefficient, thus different surfaces may reflect a different amount of diffuse
light. If there are multiple light sources in a scene, compute the diffuse
intensity for each light and add them together.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;diffuse_example.png&quot; alt=&quot;diffuse_example.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Specular&lt;&#x2F;strong&gt; lighting computes the “shiny” bits of a surface. When you look at polished wood, metal
or water, and see the really bright patches of light reflected on them, these
are specular highlights. The intensity of specular lighting at a point is dependent on the
difference between the angle from a ray reflected from the light at that point
and a vector from that point to the eye.
In the diagram below, the relevant vectors are coloured red and green.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;specular_diagram.png&quot; alt=&quot;specular_diagram.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The intensity of the light is the dot product of the two relevant vectors raised
to some power. The higher the power, the smaller and more intense the highlights
appear, and thus the shinier the surface looks. Multiply this value by the
surfaces specular reflection coefficient and light brightness. If there are
multiple specular lights in an area, compute the specular intensity for each and
add them together.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;specular_example.png&quot; alt=&quot;specular_example.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once the intensity of each type of lighting is computed for a point, just add
them all together to get the total lighting at that point. In the tile example,
I add the ambient and diffuse lighting first, multiply this by the colour of the
pixel (given by the texture) treating the (r, g, b, a) values as a 4D vector,
then add on the specular lighting as a vector (i, i, i, 0) where ‘i’ is the
specular light intensity. This is because I wanted the specular highlights to
appear white rather than draw from the underlying colour.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;phong_example.png&quot; alt=&quot;phong_example.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;map-encoding-scheme&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#map-encoding-scheme&quot; aria-label=&quot;Anchor link for: map-encoding-scheme&quot;&gt;Map Encoding Scheme&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I store maps in bitmap files that I made using GIMP.
Information is encoded in the rgb values
of each pixel.
Each channel (red, green, blue) of a pixel is represented by a single byte. Thus
there are 256 values (0-255) that can be stored in a channel of a pixel.&lt;&#x2F;p&gt;
&lt;p&gt;There are actually 4 images that get combined into making the
tile demo. These are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;texture&lt;&#x2F;li&gt;
&lt;li&gt;bump map&lt;&#x2F;li&gt;
&lt;li&gt;light map&lt;&#x2F;li&gt;
&lt;li&gt;shine map&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tile-texture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tile-texture&quot; aria-label=&quot;Anchor link for: tile-texture&quot;&gt;Tile Texture&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;tile.png&quot; alt=&quot;tile.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A simple texture. It’s used to determine the colour of each pixel.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bump-map&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bump-map&quot; aria-label=&quot;Anchor link for: bump-map&quot;&gt;Bump Map&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;bump_map.png&quot; alt=&quot;bump_map.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For each pixel, this encodes the surface normal vector and depth at that pixel.
Normal vectors are represented by a pair of angles. The diagram below shows the
pair of angles used to represent the green point. The horizontal angle is blue
and the vertical angle is red. The vertical angle in this system is constrained
between 90° and -90°. As the tile scene is viewed from above, for the purposes
of this example, the vertical angle will be constrained between 90° and 0°. The
length of normal vectors is always 1.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;angles.png&quot; alt=&quot;angles.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Different information is encoded in each channel, so it makes sense to examine
one channel at a time.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;red-horizontal-angle&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#red-horizontal-angle&quot; aria-label=&quot;Anchor link for: red-horizontal-angle&quot;&gt;Red (Horizontal Angle)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;bump_map_red.png&quot; alt=&quot;bump_map_red.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This channel encodes the horizontal angle of the surface normal.
A value of 0 denotes 0°, 64 (256&#x2F;4) denotes 90° (360°&#x2F;4) and so on.
This is why the right side of the red image is black - the horizontal angle of
the normal is 0°.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;green-vertical-angle&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#green-vertical-angle&quot; aria-label=&quot;Anchor link for: green-vertical-angle&quot;&gt;Green (Vertical Angle)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;bump_map_green.png&quot; alt=&quot;bump_map_green.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This channel encodes the vertical angle of the surface normal.
Values are linearly interpolated between 0° and 90°.
0° indicates a vertical normal.
The middle and edges of the image are black because the surface normal is
straight up.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;blue-depth&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#blue-depth&quot; aria-label=&quot;Anchor link for: blue-depth&quot;&gt;Blue (Depth)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;bump_map_blue.png&quot; alt=&quot;bump_map_blue.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The image above is slightly blue though it’s hard to see.
It represents the height in pixel-sized units of each pixel.
Heights of tiles range from 0 to 8 pixels, so the blue-est colour in that
picture is rgb(0, 0, 8) which looks almost black.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;light-map&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#light-map&quot; aria-label=&quot;Anchor link for: light-map&quot;&gt;Light Map&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;light_map.png&quot; alt=&quot;light_map.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This stores the ambient, diffuse and specular reflection coefficients in the
red, green and blue channels respectively.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;red-ambient&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#red-ambient&quot; aria-label=&quot;Anchor link for: red-ambient&quot;&gt;Red (Ambient)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;light_map_red.png&quot; alt=&quot;light_map_red.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;green-diffuse&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#green-diffuse&quot; aria-label=&quot;Anchor link for: green-diffuse&quot;&gt;Green (Diffuse)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;light_map_green.png&quot; alt=&quot;light_map_green.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;blue-specular&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#blue-specular&quot; aria-label=&quot;Anchor link for: blue-specular&quot;&gt;Blue (Specular)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;light_map_blue.png&quot; alt=&quot;light_map_blue.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The grout between tiles isn’t very shiny, so it has a low specular reflection
coefficient&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shine-map&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shine-map&quot; aria-label=&quot;Anchor link for: shine-map&quot;&gt;Shine Map&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;This indicates how shiny each pixel is. It is used to determine the specular
exponent (the power to which the dot product is raised wen computing specular
lighting). Only one channel is used for this, and values can range from 0 to 255.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;2d-phong-illumination-in-webgl&#x2F;shine_map.png&quot; alt=&quot;shine_map.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Post Mortem of an Abandoned Game</title>
        <published>2015-07-12T22:46:01+10:00</published>
        <updated>2015-07-12T22:46:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/post-mortem-of-abandoned-game/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/post-mortem-of-abandoned-game/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/post-mortem-of-abandoned-game/">&lt;p&gt;I spent about 6 months of 2014 working in my spare time
on what I hoped would become a top-down
side-scrolling action-rpg. I’d just started playing Dark Souls,
and wanted to emulate its art style and combat, but in 2D.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;post-mortem-of-abandoned-game&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My aim from the start was to quickly implement features at a basic level, rather than getting bogged down in low-level details.
I implemented character animation, collision processing
and visible area detection over the course of several months. Often I would find myself starting to focus too much on one thing,
such as smooth interpolation between animation modes, or having characters slide along walls following a collision rather than
stopping abruptly. Nonetheless, I continued to make progress.&lt;&#x2F;p&gt;
&lt;p&gt;All the graphics were drawn using html canvas’s 2D drawing context. I was interested in comparing the relative performance of
the 2D drawing context and WebGL, which is native browser support for OpenGL ES.
I’d attempted to learn webgl on several occasions prior to this, but never had a project to apply it to until now.
I set about porting the low-level graphics functionality of the game to webgl, and unknowingly opened Pandora’s box.&lt;&#x2F;p&gt;
&lt;p&gt;Suddenly I had the power of shaders at my fingertips. I poured endless hours into writing shaders and meticulously crafting
bump maps and light maps for various scenes and marveling at the speed at which complex graphical effects could be applied.
(Shaders are programs which run on massively parallel hardware (GPUs), and perform computations on each vertex in a scene, and
each pixel on the screen.) I wrote a blur filter, a pixelate filter, a phong illumination system that used a collection of
special images to give the illusion of 3D textures.&lt;&#x2F;p&gt;
&lt;p&gt;At this point I started to lose sight of where the project was going. The cost of adding new content was increased by the shiny new graphics
engine, as images needed accompanying bump and light maps. I was starting to approach the limit of computation which can be done
in a single frame on my development machine (a 2013 macbook air). I started to doubt whether top-down was really the best viewing angle for
the task at hand, and wondered if &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;post-mortem-of-abandoned-game&#x2F;lttp.jpg&quot;&gt;3&#x2F;4 perspective&lt;&#x2F;a&gt; would be more appropriate, or if purely top-down implied
a more &lt;a href=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;post-mortem-of-abandoned-game&#x2F;teleglitch.jpg&quot;&gt;minimal art style&lt;&#x2F;a&gt;. I experimented with different styles of drawing but couldn’t settle
on anything I both liked and had the skill to create.&lt;&#x2F;p&gt;
&lt;p&gt;Eventually I decided I’d have better luck starting a new project from scratch. I learnt a lot about computer graphics and also about
how not to go about creating a game.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to stop working on this project on a Friday night, and while liberating, it was also frustrating, so to prove
to myself that I could actually make games, I spent the weekend making
&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;unfinished-game&#x2F;&quot;&gt;this little platform game&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;runnable-versions-of-game-engine-runs-in-browser&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#runnable-versions-of-game-engine-runs-in-browser&quot; aria-label=&quot;Anchor link for: runnable-versions-of-game-engine-runs-in-browser&quot;&gt;Runnable versions of game engine (runs in browser)&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;top-down-sidescrolling-engine&quot;&gt;Large area with buggy dynamic lighting and shaders&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;abandoned-game-big-noshaders&quot;&gt;Large area with dynamic lighting but no shaders&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;abandoned-game-small&quot;&gt;Small area with dynamic lighting but no shaders&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shader-demos&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shader-demos&quot; aria-label=&quot;Anchor link for: shader-demos&quot;&gt;Shader demos&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;old-webgl-shader-demos&#x2F;pavement&#x2F;artwork&#x2F;shaders&#x2F;irregular_pavement&quot;&gt;Irregular pavement shader demo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;old-webgl-shader-demos&#x2F;tiles&#x2F;&quot;&gt;Tiles shader demo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;old-webgl-shader-demos&#x2F;waves&#x2F;&quot;&gt;Waves shader demo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gridbugs&#x2F;old-webgl-shader-demos&quot;&gt;source code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Top-down Sidescrolling Engine</title>
        <published>2015-07-11T22:46:01+10:00</published>
        <updated>2015-07-11T22:46:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/top-down-sidescrolling-engine/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/top-down-sidescrolling-engine/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/top-down-sidescrolling-engine/">&lt;p&gt;A partially-complete game engine I wrote in 2014 in javascript&#x2F;html5.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;top-down-sidescrolling-engine&quot;&gt;Demo (runs in browser)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;top-down-sidescrolling-engine&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;circle&#x2F;line-segment collision detection and processing&lt;&#x2F;li&gt;
&lt;li&gt;framework for animating top-down 2D characters based on a skeleton description and a collection of images&lt;&#x2F;li&gt;
&lt;li&gt;phong illumination in webgl&lt;&#x2F;li&gt;
&lt;li&gt;dynamic lighting and visible area detection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pitch Controlled Game</title>
        <published>2015-07-10T22:46:01+10:00</published>
        <updated>2015-07-10T22:46:01+10:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gridbugs.github.io/gridbugs.org-zola/pitch-controlled-game/"/>
        <id>https://gridbugs.github.io/gridbugs.org-zola/pitch-controlled-game/</id>
        
        <content type="html" xml:base="https://gridbugs.github.io/gridbugs.org-zola/pitch-controlled-game/">&lt;p&gt;A game I made for UNSW ArtsWeek 2014. Control the cat by making noises of various pitches.
Collect the coins but avoid the ghosts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;games.gridbugs.org&#x2F;pitch-controlled-game&quot;&gt;Play in browser&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridbugs.github.io&#x2F;gridbugs.org-zola&#x2F;pitch-controlled-game&#x2F;screenshot.png&quot; alt=&quot;screenshot.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
